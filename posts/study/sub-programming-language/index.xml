<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Programming Language on CodeXlog</title><link>https://codex-devlab.github.io/posts/study/sub-programming-language/</link><description>Recent content in Programming Language on CodeXlog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Fri, 15 Jun 2018 04:22:12 +0600</lastBuildDate><atom:link href="https://codex-devlab.github.io/posts/study/sub-programming-language/index.xml" rel="self" type="application/rss+xml"/><item><title>강제 캐스팅에 의한 1byte 단위 접근 방법</title><link>https://codex-devlab.github.io/posts/study/sub-programming-language/1-byte-unit-access-by-forced-casting/</link><pubDate>Fri, 15 Jun 2018 04:22:12 +0600</pubDate><guid>https://codex-devlab.github.io/posts/study/sub-programming-language/1-byte-unit-access-by-forced-casting/</guid><description>&lt;h2 id="1byte-accesshttpsgithubcomehdwn1991embededstudyblobmasterc_programing0615address_swapc">&lt;a href="https://github.com/ehdwn1991/Embeded.study/blob/master/C_programing/0615/address_swap.c" target="_blank" rel="noopener">1Byte access&lt;/a>&lt;/h2>
&lt;p>&lt;code>강제 캐스팅에 의한 1byte 단위 접근 방법&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">다음과&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">같이&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">출력되도록&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">코드를&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">짜시오&lt;/span>.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>temp : &lt;span style="color:#ae81ff">0x12345678&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>temp : &lt;span style="color:#ae81ff">0x78563412&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 강제 캐스팅에 의한 1byte 접근법
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>(){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>s;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">char&lt;/span> swap_char;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> temp&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0x12345678&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> s&lt;span style="color:#f92672">=&lt;/span>(&lt;span style="color:#66d9ef">char&lt;/span>&lt;span style="color:#f92672">*&lt;/span>)&lt;span style="color:#f92672">&amp;amp;&lt;/span>temp; &lt;span style="color:#75715e">//4byte의 값을 1byte씩 접근
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// a=(char)&amp;amp;temp; 변수 자료형의 형변환
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;temp : 0x%x&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>,temp );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> swap_char&lt;span style="color:#f92672">=*&lt;/span>s;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">*&lt;/span>s&lt;span style="color:#f92672">=*&lt;/span>(s&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">3&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">*&lt;/span>(s&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">3&lt;/span>)&lt;span style="color:#f92672">=&lt;/span>swap_char;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> swap_char&lt;span style="color:#f92672">=*&lt;/span>(s&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">*&lt;/span>(s&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>)&lt;span style="color:#f92672">=*&lt;/span>(s&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">*&lt;/span>(s&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span>)&lt;span style="color:#f92672">=&lt;/span>swap_char;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;temp : 0x%x&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>,temp );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>이런 방법론은 Endian 문제에 적용시킬수 있다. Little Endian 과 Big Endian 과의 데이터 불일치가&lt;/p></description></item><item><title>C언어 스터디</title><link>https://codex-devlab.github.io/posts/study/sub-programming-language/study-c-language/</link><pubDate>Mon, 11 Jun 2018 04:22:12 +0600</pubDate><guid>https://codex-devlab.github.io/posts/study/sub-programming-language/study-c-language/</guid><description>&lt;h1 id="c언어">C언어&lt;/h1>
&lt;p>프로그램이란? 컴퓨터에서 실행될때 특정 작업을 수행 하는 일련의 명령어들의 모음이다.&lt;/p>
&lt;h2 id="소프트웨어-공학">소프트웨어 공학&lt;/h2>
&lt;ul>
&lt;li>요구사항 분석
자료형 정의 등등&lt;/li>
&lt;li>Flow chart 설계 및 구현(pseudo code)&lt;/li>
&lt;li>코드 구현&lt;/li>
&lt;li>실행&lt;/li>
&lt;li>테스트&lt;/li>
&lt;li>유지보수&lt;/li>
&lt;/ul>
&lt;h2 id="cpu-구조">CPU 구조&lt;/h2>
&lt;p>Control unit&amp;lt;-&amp;gt;ALU&amp;lt;-&amp;gt;Processor resister(R1,R2,R3&amp;hellip;)
위의 3가지 장치들이 Internal bus로 연결되어 통신한다.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>ALU(Arithmetic logic unit )&lt;/p>
&lt;p>산술 논리 장치 : 실질적으로 산술, 논리 계산을 수행함.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Resister&lt;/p>
&lt;p>CPU의 자체적인 메모리저장 기능.&lt;/p>
&lt;p>Memory buffer register(MBR)&lt;/p>
&lt;p>​ I/O로 보내지거나 메모리에 저장될 Word 혹은 I/O나 메모리로 부터 Word를 받는 것.&lt;/p></description></item><item><title>Python 기초</title><link>https://codex-devlab.github.io/posts/study/sub-programming-language/sub-python/basic-python/</link><pubDate>Mon, 11 Jun 2018 04:22:12 +0600</pubDate><guid>https://codex-devlab.github.io/posts/study/sub-programming-language/sub-python/basic-python/</guid><description>&lt;h2 id="파이썬-basic">파이썬 basic&lt;/h2>
&lt;blockquote>
&lt;p>플랫폼 독립적이며 인터프리터식, 객체지향적, 동적 타이핑(Dynamically typed) 대화형 언어 이다.&lt;/p>
&lt;p>파이썬이 유지보수가 쉬운 이유는 &lt;code>가독성이 좋아서 &lt;/code> 이다.&lt;/p>
&lt;p>파이썬으로 프로그래밍시 주의할 점은 Name Space 이다.&lt;/p>
&lt;p>이미 존재하는 라이브러리와 같은 이름으로 저장시 overiiding의 문제가 발생할수도 있다.&lt;/p>
&lt;p>다중 패러다임(함수형, 명령형, 객체지향- 클래스 기반) 프로그래밍 언어 이다.&lt;/p>&lt;/blockquote>
&lt;ul>
&lt;li>
&lt;p>언어의 종류&lt;/p>
&lt;p>C - python&lt;/p>
&lt;p>Java - jython&lt;/p>
&lt;p>.net - Iron python&lt;/p>
&lt;p>python - pypi(속도 향상을 위해 파이썬 기반으로 제작)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>주의 사항&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Name space 주의&lt;/p></description></item></channel></rss>