[{"categories":null,"contents":"Development Running the forked theme against your own site Running the forked theme against your own site 참고\n원활한 커스텀을 위해, 테마를 Fork하여 별도의 저장소로 관리.\n과정은 간단합니다. Go 개발시에 로컬 모듈을 go.mod에 추가하여 개발하는 방식과 동일 합니다.\n단, toha의 테마에 있는 설정들과 스크립트들이 github.com/hugo-toha/toha/v4를\n바라보고 있기 때문에 사설 레포의 경로로 변경해줘야 합니다.\ntoha의 테마 원격 저장소를 Fork 하여 본인의 Github로 가져 옵니다.\n저는 저장소를 Fork하면서 이름을 customs_theme 로 변경했습니다.\n처음 Fork 받은 후에는 Release가 없습니다.\n반드시 다음 과정 진행 전에 릴리즈 해주세요.\n가급적 Fork 받은 당시의 Stable한 태그를 기준으로 원래의 저장소와 동일하게 Release 해주시면 됩니다.\n모듈 경로 변경\ngo.mod의 모듈 경로를 fork 받아온 자신의 모듈 경로로 변경 합니다.\nmodule github.com/codex-devlab/customs_theme/v4 go 1.21 Hugo 블로그 저장소의 테마 모듈 경로 설정\nFork 받은 Custom Theme을 사용하고자 한다면, Hugo 블로그 저장소의 설정을 몇가지 변경해줘야 합니다.\nhugo.yaml 변경\n기존의 모듈 경로를 Fork 받은 테마의 경로로 변경 합니다.\n# Use Hugo modules to add theme module: imports: - path: github.com/codex-devlab/customs_theme/v4 go.mod 변경\n필요한 테마의 저장소 경로를 설정합니다.\n위 과정에서 릴리즈 버전(v4.7.1)을 경로 뒤에 명시해 줍니다.\n만약 로컬에서 테마를 개발중이라면, 주석으로 되어 있는 replace 부분 적절하게 변경하여서 사용하시면 됩니다.\n단, 반드시 원격 저장소로 Push 전에 replace부분은 주석을 하거나 지워 주세요.\nmodule github.com/codex-devlab/codex-devlab.github.io go 1.21 // For Future costom update require github.com/codex-devlab/customs_theme/v4 v4.7.1 // indirect // For Running on Hugo container and develop custom theme //replace( // github.com/codex-devlab/customs_theme/v4 =\u0026gt; ../customs_theme //) Pre-Commit Githook의 Pre-commit을 사용하면 협업에서 큰 도움이 됩니다.\n디버깅 지옥에서 벗어 날 수 있는 좋은 방법 입니다.\n기능 리스트 go.mod replace 경로 자동 주석\n로컬에서 개발하다가 원격으로 커밋할 때 가벼운 맘으로 푸시 했다가,\n팀원들에게 디버깅 지옥을 선사한 적 있었나요?\n항상 경각심을 가져야 합니다\u0026hellip; 혹시나 하는 에러 사태를 방지하기 위해 pre-commit을 통해 go 모듈의 경로를 로컬에서 리모트로 바꿔는 명령을 실행하게 하는게 좋습니다.\npre-commit 생성 #!/bin/bash # Git 프로젝트 루트 경로 가져오기 GIT_ROOT=$(git rev-parse --show-toplevel) GO_MOD_FILE=\u0026#34;$GIT_ROOT/go.mod\u0026#34; if [ ! -f \u0026#34;$GO_MOD_FILE\u0026#34; ]; then echo \u0026#34;❌ go.mod 파일을 찾을 수 없습니다!\u0026#34; exit 1 fi echo \u0026#34;🔍 go.mod 수정 중...\u0026#34; # OS 확인 (macOS vs Linux) if [[ \u0026#34;$OSTYPE\u0026#34; == \u0026#34;darwin\u0026#34;* ]]; then SED_OPT=\u0026#34;-i \u0026#39;\u0026#39;\u0026#34; else SED_OPT=\u0026#34;-i\u0026#34; fi # 1️⃣ `replace(...)` 블록이 주석 처리되지 않았다면 주석 추가 if ! grep -q \u0026#34;^[[:space:]]*//[[:space:]]*replace(\u0026#34; \u0026#34;$GO_MOD_FILE\u0026#34;; then sed $SED_OPT \u0026#39;/^[[:space:]]*replace(/, /^[[:space:]]*)/ s|^|// |\u0026#39; \u0026#34;$GO_MOD_FILE\u0026#34; echo \u0026#34;✅ replace(...) 블록이 주석 처리되었습니다.\u0026#34; else echo \u0026#34;✅ replace(...) 블록이 이미 주석 처리되어 있습니다.\u0026#34; fi # 2️⃣ 변경 사항을 git에 추가 git add \u0026#34;$GO_MOD_FILE\u0026#34; echo \u0026#34;✅ go.mod 파일이 자동으로 수정되었습니다.\u0026#34; 실행 권한 변경 $ chmod +x .git/hooks/pre-commit 정상적으로 동작이 되는지 확인하고 싶으면 직접 실행해 보는것도 좋습니다.\n직접 Git 명령어로 커밋 할때만 echo로 작성된 안내메시지가 나오니까 Vscode같은 IDE를 통해 커밋하시면 메세지는 안나옵니다.\nWritting Tips Collapsed Sections Collapsed Sections 1 \u0026lt;details\u0026gt; Collapsed text \u0026lt;/details\u0026gt; \u0026lt;details\u0026gt; \u0026lt;summary\u0026gt;Details Title\u0026lt;/summary\u0026gt; Collapsed text \u0026lt;/details\u0026gt; Details Title Collapsed text Using undefined shortcodes Print Using undefined shortcodes Print 2 메뉴얼을 위해 Hugo 의 Shortcode를 호출하는 code를 포스트안에 작성하려고 했으나,\n{{/\u0026lt; \u0026hellip; \u0026gt;/}} 의 형태로 작성되면 Hugo의 랜더링 과정에서 callout하게 되어,\n관련된 shortcode를 참조하게 됩니다.\n때문에 메뉴얼 작성을 위한 shortcode를 문자 그대로 출력하기 위해선, Escaping 과정을 거쳐야 합니다.\n여려가지 방법이 있었으나, code block안에서는 정상적으로 출력이 안되는 등 가능한 방법은 한가지 뿐이였습니다.\n먼저 가능한 예제를 보여드리고, 불가능한 예제들도 소개해 드리겠습니다.\n저처럼 시행착오를 반복하기 않기를 바라겠습니다!\n정상적인 Case\nShortcode 문자 그대로 출력하는 방법\n{{/*\u0026lt; \u0026hellip; \u0026gt;*/}} 의 내부에 주석을 넣는 방법을 사용하면 됩니다. 예를 들어 tag list 를 반환하는 Shortcode 를 작성 하고 싶다면, 하단처럼 작성하면 됩니다.\n{{\u0026lt;/* partial \u0026#34;tags/custom-list.html\u0026#34; */\u0026gt;}} 실패한 Case 3\n{{% raw %}} 사용\nliquid Template 언어에 따르면 {{% raw %}} \u0026hellip; {{% /raw %}} 의 형태로 사용하면 일시적으로 랜더링을 멈출 수 있다고 하나, Hugo 는 Go언어의 Template을 사용하기 떄문에 적용 할 수 없습니다. 예전 Jekyll 때는 Liquid를 사용했으나 현재는 Hugo를 사용하므로 해당 방법은 적용 불가 합니다. Template Custom Layout Randomly changes the background image of the post Randomly changes the background image of the post 각 포스트 마다 배경 이미지를 선택하지 않으면, theme에 등록되어 있는 기본 이미지만\n출력되도록 템플릿이 짜여 있습니다.\n글 작성시에 썸네일 같은 적당한 이미지가 있다면 모르겠지만,\n매번 새로운 이미지 찾아서 넣는것도 귀찮습니다.\n그래서 간단하게 별도의 배경 이미지 설정을 하지 않으면,\n미리 넣어둔 이미지 리스트 중에서 빌드시 랜덤으로 배경이 적용되는 기능으로 개선해보려 합니다.\n그럼 어떤 템플릿이 해당 기능을 하는지 먼저 알아야 합니다.\n크롬의 개발자 모드에 들어가서 각 엔트리에 맞는 템플릿을 찾아주면 됩니다.\n설명드린 배경은 하단의 그림 참고 부탁드립니다.\n포스트 상단에 들어가는 이미지 입니다.\n개발자 모드에 들어가시면 해당 부분은 태그로 되어 있는 이미지 입니다.\n\u0026lt;div class=\u0026#34;hero-area col-sm-12\u0026#34; id=\u0026#34;hero-area\u0026#34; style=\u0026#34;background-image: url(/images/rand_images/michael-dziedzic.jpg);\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; 이제 customs_theme에서 해당 클래스를 생성해주는 템플릿을 찾아주면 됩니다.\ncustoms_theme/layouts/_default/single.html\n하단의 코드를 보시면 Partial의 helpers/get-hero.html을 호출하는 것을 확인 할 수 있습니다.\n\u0026lt;div class=\u0026#34;hero-area col-sm-12\u0026#34; id=\u0026#34;hero-area\u0026#34; style=\u0026#39;background-image: url({{ partial \u0026#34;helpers/get-hero.html\u0026#34; . }});\u0026#39;\u0026gt; \u0026lt;/div\u0026gt; customs_theme/layouts/partials/helpers/get-hero.html\n전체 코드중에서 이미지를 결정 짓는 부분만 집중하시면 됩니다.\n원래 위의 코드에서 각 포스트의 $heroImage가 설정되어 있으면 값을 가져오는 부분이 있습니다.\n귀찮아서 이미지를 설정 하지 않았다면, 하단의 코드처럼 images/default-hero.jpg가\n기본 이미지로 들어갑니다.\n... {{/* if hero image is not provided, then use the default hero image */}} {{ if not $heroImage }} {{ $heroImage := resources.Get \u0026#34;images/default-hero.jpg\u0026#34;}} {{ .Scratch.Set \u0026#34;heroScratch\u0026#34; $heroImage }} {{ end }} ... 자 그럼 어떻게 해야 할까요? 뇌피셜로는 그냥 assets/images 같은데에 이미지들 밀어 넣어두고,\n이중에서 랜덤으로 호출 하면 될 것 같은데,\n역시나 그렇게 편하게는 안됩니다.\n{{/* if hero image is not provided, then use a random hero image */}} {{ if not $heroImage }} {{ $heroImages := readDir \u0026#34;static/images/rand_images\u0026#34; }} {{/* 이미지 디렉토리 읽기 */}} {{ $imageCount := len $heroImages }} {{ if gt $imageCount 0 }} {{/* 이미지 파일이 하나 이상 있을 경우 */}} {{ $randomIndex := int (math.Floor (mul (float $imageCount) (math.Rand))) }}{{/* 현재 시간 기반 랜덤 인덱스 */}} {{ $randomImage := index $heroImages $randomIndex }} {{ $randomImagePath := printf \u0026#34;images/rand_images/%s\u0026#34; $randomImage.Name }} {{ $heroImage := resources.Get $randomImagePath }} {{ .Scratch.Set \u0026#34;heroScratch\u0026#34; $heroImage }} {{ end }} {{ end }} Example-All tag list Template Example-All tag list Template hugo.yaml 에서 markup unafe 설정 확인\nlayouts에 paritals와 shortcodes 생성\nmkdir -p layouts/partials layouts/shortcodes tag 리스트를 생성하는 partial custom-list.html 생성\n$ mkdir -p layouts/partials/tags $ vim layouts/partials/tags/custom-list.html \u0026lt;!-- layouts/partials/tags/custom-list.html --\u0026gt; \u0026lt;h2\u0026gt;All Tags\u0026lt;/h2\u0026gt; \u0026lt;ul\u0026gt; {{ range $tag, $items := .Site.Taxonomies.tags }} \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;{{ \u0026#34;/tags/\u0026#34; | relLangURL }}{{ $tag }}\u0026#34;\u0026gt;{{ $tag }}\u0026lt;/a\u0026gt; ({{ len $items }} posts)\u0026lt;/li\u0026gt; {{ end }} \u0026lt;/ul\u0026gt; :wq 페이지 내부에서 custom-list 템플릿을 불러 올 수 있도록 partoal shortcode 생성\nvim layouts/shortcodes/partial.html {{ partial (.Get 0) . }} :wq 특정 페이지 내에서 custom-list template 호출 예시) contents/post/sample.md\n--- title: \u0026#34;Sample Post\u0026#34; date: 2025-01-01T09:12:43+05:00 tags: - Hugo - Example #draft: false --- # Sample Post This page lists all tags: {{\u0026lt; partial \u0026#34;tags/custom-list.html\u0026#34; \u0026gt;}} Creating Sub Category https://toha-guides.netlify.app/posts/writing-posts/organizing/sub-category/example/\nReference Hugo 관련 팁\ntoha sample blog\ntoha Guide\ntoha Guide-Github\nFoot Note Github-collapsed-sections 참고\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nShortcodes escaped 참고\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nLiquid Template raw 참고\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"January 1, 2025","hero":"/images/rand_images/sigmund-tax.jpg","permalink":"https://codex-devlab.github.io/posts/blog-migration/sub-hugo/","summary":"\u003ch2 id=\"development\"\u003eDevelopment\u003c/h2\u003e\n\u003cdetails\u003e\n  \u003csummary\u003eRunning the forked theme against your own site\u003c/summary\u003e\n\u003ch3 id=\"running-the-forked-theme-against-your-own-site\"\u003eRunning the forked theme against your own site\u003c/h3\u003e\n\u003cp\u003e\u003ca href=\"https://toha-guides.netlify.app/posts/contributing/#running-the-forked-theme-against-your-own-site\" target=\"_blank\" rel=\"noopener\"\u003e참고\u003c/a\u003e\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e원활한 커스텀을 위해, 테마를 Fork하여 별도의 저장소로 관리.\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e과정은 간단합니다.\nGo 개발시에 로컬 모듈을 go.mod에 추가하여 개발하는 방식과 동일 합니다.\u003cbr\u003e\n단, toha의 테마에 있는 설정들과 스크립트들이 \u003ccode\u003egithub.com/hugo-toha/toha/v4\u003c/code\u003e를\u003cbr\u003e\n바라보고 있기 때문에 사설 레포의 경로로 변경해줘야 합니다.\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003etoha의 테마 원격 저장소를 Fork 하여 본인의 Github로 가져 옵니다.\u003cbr\u003e\n저는 저장소를 Fork하면서 이름을 \u003ca href=\"github.com/codex-devlab/customs_theme\"\u003ecustoms_theme\u003c/a\u003e 로 변경했습니다.\u003c/p\u003e","tags":["Hugo","Hugo-Toha Theme","Manual"],"title":"Hugo"},{"categories":null,"contents":"Gitlab Upgrade History Gitlab의 업그레이드 과정은 하단의 Upgrade Path(https://docs.gitlab.com/ee/update/#upgrade-paths)를 준수 하며 진행해야 합니다.\n위 경로대로 업그레이드를 진행하지 않으면, 하위 호완성의 문제로 구동이 불가능 하거나 데이터 베이스 오류등 다양한 에러가 발생 할 수 있습니다.\nNone Stop 업그레이드는 이중화 구성이 되어있지 않은 인스턴스에서는 불가능 하기에, 업그레이드 과정중에는 반드시 서비스의 중단을 공지한 후 진행하시기 바랍니다.\n마지막으로 업그레이드 과정에서 Gitlab Rails에서 Background Migration 작업을 진행 하게 되는데, 해당 과정은 Major 버전이 올라가거나, 업그레이드 경로 상 마지막 과정에서 상당 시간이 소요 됩니다.\n다음 버전으로의 업그레이드느 반드시 Background Migration 작업이 완료 된 후 진행해야 합니다.\nUpgrade Path 현재 사용중인 버전의 가장 최신 패치 버전으로 업그레이드.\nex) 11.10.6 (현재 11.10.x 버전) →11.10.8 (11.10.x 중 최신)\n이전 마이너의 최신 패치 버전에서 다음 마이너의 초기 버전으로 업그레이드\nex) 11.10.8 (11.10.x 중 최신)→11.11.0 (11.11.x 초기 버전)\n현재 마이너의 최신 패치 버전으로 업그레이드\nex) 11.11.0 (11.11.x 초기 버전)→11.11.8 (11.11.x 중 최신)\n현재 메이저 버전중 가장 최신 버전에서 다음 메이저의 최초 마이너의 최신 패치 버전으로 업그레이드\nex) 11.11.8 (11.11.x 중 최신)→12.0.12 (12.0.x 중 최신)\nGitlab Upgrade paths에 따라 업그레이드 진행\n8.11.Z -\u0026gt; 8.12.0 -\u0026gt; 8.17.7 -\u0026gt; 9.0.13 -\u0026gt; 9.5.10 -\u0026gt; 10.0.7 -\u0026gt; 10.8.7 -\u0026gt; 11.0.6 -\u0026gt; 11.11.8 -\u0026gt; 12.0.12 -\u0026gt; 12.1.17 -\u0026gt; 12.10.14 -\u0026gt; 13.0.14 -\u0026gt; 13.1.11 -\u0026gt; 13.8.8 -\u0026gt; 13.12.15 -\u0026gt; 14.0.12 -\u0026gt; 14.3.6 -\u0026gt; 14.9.5 -\u0026gt; 14.10.Z -\u0026gt; 15.0.Z -\u0026gt; 15.1.Z (for GitLab instances with multiple web nodes) -\u0026gt; 15.4.0 -\u0026gt; latest 15.Y.Z\n14.10.5→15.0.5→15.1.6→15.4.0→15.5.6→15.6.2\nUpgrade Guide 11.10.8-ce.0 버전에서 시작\ndocker 이미지 pull\ndocker pull gitlab/gitlab-ce:11.10.8-ce.0 Main Server에서 Gitlab 폴더 생성\nmkdir -p /Image/custom_dev_gitlab/ Gitlab Server에서 Main Server로 config 폴더 복사\nscp -r /data/docker/custom_dev_gitlab/config root@172.29.241.100:/Image/custom_dev_gitlab/ Main Server에서 Docker Dompose 파일 작성\nvi /Image/custom_dev_gitlab/docker-compose.yml\nservices: web: image: \u0026#39;gitlab/gitlab-ce:11.10.8-ce.0\u0026#39; restart: always hostname: \u0026#39;dev-gitlab\u0026#39; container_name: custom_dev_gitlab environment: GITLAB_OMNIBUS_CONFIG: | # Add any other gitlab.rb configuration here, each on its own line external_url \u0026#39;\u0026lt;http://182.114.70.81:32000\u0026gt;\u0026#39; gitlab_rails[\u0026#39;gitlab_shell_ssh_port\u0026#39;] = 8102 ports: - \u0026#39;32000:32000\u0026#39; - \u0026#39;8102:22\u0026#39; volumes: - \u0026#39;/Storage/docker/custom_dev_gitlab/config:/etc/gitlab\u0026#39; - \u0026#39;/Storage/docker/custom_dev_gitlab/logs:/var/log/gitlab\u0026#39; - \u0026#39;/Storage/docker/custom_dev_gitlab/data:/var/opt/gitlab\u0026#39; - /etc/localtime:/etc/localtime:ro Docker Compose 시작\ndocker compose up -d Gitlab 컨테이너 로그 확인\ndocker logs -f custom_dev_gitlab Gitlab Server에서 Main Server로 백업 파일 복사\nscp /data/docker/custom_dev_gitlab/data/backups/ /Storage/docker/custom_dev_gitlab/data/backups/ 백업파일 권한 부여\nchown 998:0 /Storage/docker/custom_dev_gitlab/data/backups/1671738795_2022_12_23_11.10.8_gitlab_backup.tar 복구 진행\n# 호스트에서 gitlab-ce docker 쉘 진입 docker exec -it custom_dev_gitlab /bin/bash # gitlab-ce docker 쉘에서 진행 gitlab-ctl stop unicorn # 웹서비스가 puma 인 경우에는 puma gitlab-ctl stop sidekiq gitlab-rake gitlab:backup:restore BACKUP=/var/opt/gitlab/backups/1671738795_2022_12_23_11.10.8 Unpacking backup ... done Before restoring the database, we will remove all existing tables to avoid future upgrade problems. Be aware that if you have custom tables in the GitLab database these tables and all data will be removed. Do you want to continue (yes/no)? yes Removing all tables. Press `Ctrl-C` within 5 seconds to abort 2022-12-15 14:07:17 +0900 -- Cleaning the database ... 2022-12-15 14:07:21 +0900 -- done 2022-12-15 14:07:21 +0900 -- Restoring database ... Restoring PostgreSQL database gitlabhq_production ... ... 2023-02-05 11:46:02 +0900 -- Restoring lfs objects ... 2023-02-05 11:46:04 +0900 -- done This task will now rebuild the authorized_keys file. You will lose any data stored in the authorized_keys file. Do you want to continue (yes/no)?yes Gitlab 서비스 재시작\n# gitlab-ce docker 쉘에서 진행 gitlab-ctl restart Admin 패스워드 변경 # gitlab-ce docker 쉘에서 진행 gitlab-rails console ------------------------------------------------------------------------------------- GitLab: 11.10.8 (313bd8e65df) GitLab Shell: 9.0.0 PostgreSQL: 9.6.11 ------------------------------------------------------------------------------------- Loading production environment (Rails 5.0.7.2) irb(main):001:0\u0026gt; user = User.find(1) =\u0026gt; #\u0026lt;User id:1 @administrator\u0026gt; irb(main):002:0\u0026gt; new_password = \u0026#39;원하는 패스워드 설정\u0026#39; =\u0026gt; \u0026#34;원하는 패스워드 설정\u0026#34; irb(main):003:0\u0026gt; user.password = new_password =\u0026gt; \u0026#34;원하는 패스워드 설정\u0026#34; irb(main):004:0\u0026gt; user.password_confirmation = new_password =\u0026gt; \u0026#34;원하는 패스워드 설정\u0026#34; irb(main):005:0\u0026gt; user.save! Enqueued ActionMailer::DeliveryJob (Job ID: 1ac763a2-1672-4719-bc0c-1e1355ef35cc) to Sidekiq(mailers) with arguments: \u0026#34;DeviseMailer\u0026#34;, \u0026#34;password_change\u0026#34;, \u0026#34;deliver_now\u0026#34;, #\u0026lt;GlobalID:0x00007fd1f81f4d80 @uri=#\u0026lt;URI::GID gid://gitlab/User/1\u0026gt;\u0026gt; =\u0026gt; true irb(main):006:0\u0026gt;exit 11.11.0-ce.0 업그레이드\ndocker-compose.yml 이미지 변경\nservices: web: image: \u0026#39;gitlab/gitlab-ce:11.11.0-ce.0\u0026#39; restart: always hostname: \u0026#39;dev-gitlab\u0026#39; container_name: custom_dev_gitlab environment: GITLAB_OMNIBUS_CONFIG: | # Add any other gitlab.rb configuration here, each on its own line external_url \u0026#39;\u0026lt;http://182.114.70.81:32000\u0026gt;\u0026#39; gitlab_rails[\u0026#39;gitlab_shell_ssh_port\u0026#39;] = 8102 gitlab_rails[\u0026#39;time_zone\u0026#39;] = \u0026#39;Asia/Seoul\u0026#39; ports: - \u0026#39;32000:32000\u0026#39; - \u0026#39;8102:22\u0026#39; volumes: - \u0026#39;/Image/custom_dev_gitlab/config:/etc/gitlab\u0026#39; - \u0026#39;/Image/custom_dev_gitlab/logs:/var/log/gitlab\u0026#39; - \u0026#39;/Image/custom_dev_gitlab/data:/var/opt/gitlab\u0026#39; - /etc/localtime:/etc/localtime:ro Docker Compose 재시작\ndocker compose down docker compose up -d Gitlab 컨테이너 로그 확인\ndocker logs -f custom_dev_gitlab 11.11.8-ce.0 업그레이드\ndocker-compose.yml 이미지 변경 후 11.11.0-ce.0 업그레이드와 동일한 방법으로 진행\n... image: \u0026#39;gitlab/gitlab-ce:11.11.8-ce.0\u0026#39;** ... 12.0.12-ce.0 업그레이드\ndocker-compose.yml 이미지 변경 후 11.11.0-ce.0 업그레이드와 동일한 방법으로 진행\n... image: \u0026#39;gitlab/gitlab-ce:12.0.12-ce.0\u0026#39;** ... 12.1.17-ce.0 업그레이드\ndocker-compose.yml 이미지 변경 후 11.11.0-ce.0 업그레이드와 동일한 방법으로 진행\n... image: \u0026#39;gitlab/gitlab-ce:12.1.17-ce.0\u0026#39;** ... 12.10.14-ce.0 업그레이드\ndocker-compose.yml 이미지 변경 후 11.11.0-ce.0 업그레이드와 동일한 방법으로 진행\n... image: \u0026#39;gitlab/gitlab-ce:12.10.14-ce.0\u0026#39;** ... 13.0.14-ce.0 업그레이드\ndocker-compose.yml 이미지 변경 후 11.11.0-ce.0 업그레이드와 동일한 방법으로 진행\n... image: \u0026#39;gitlab/gitlab-ce:13.0.14-ce.0\u0026#39;** ... 13.1.11-ce.0 업그레이드\ndocker-compose.yml 이미지 변경 후 11.11.0-ce.0 업그레이드와 동일한 방법으로 진행\n... image: \u0026#39;gitlab/gitlab-ce:13.1.11-ce.0\u0026#39;** ... 13.8.8-ce.0 업그레이드\ndocker-compose.yml 이미지 변경 후 11.11.0-ce.0 업그레이드와 동일한 방법으로 진행\n... image: \u0026#39;gitlab/gitlab-ce:13.8.8-ce.0\u0026#39;** ... 13.12.15-ce.0 업그레이드\n반드시 이전 단계에서 legacy storage를 hashed storage 로 변경 후 진행\ndocker-compose.yml 이미지 변경\n... image: \u0026#39;gitlab/gitlab-ce:13.12.15-ce.0\u0026#39;** ... Gitlab console에 진입하여 read-only 상태인 프로젝트들의 read-only 상태 해제\n# 호스트에서 gitlab-ce docker 쉘 진입 docker exec -it custom_dev_gitlab /bin/bash # Gitlab consoe 진입 gitlab-rails console -------------------------------------------------------------------------------- Ruby: ruby 2.7.2p137 (2020-10-01 revision 5445e04352) [x86_64-linux] GitLab: 13.12.15 (6614e1562c6) FOSS GitLab Shell: 13.18.1 PostgreSQL: 12.6 -------------------------------------------------------------------------------- Loading production environment (Rails 6.0.3.7) # 프로젝트들 중에서 read only프로젝트가 true인 레포가 있다면 하단 업데이트 진행 projects = Project.where(repository_read_only: true) projects.each do |p| print p end # read-only 상태인 프로젝트들의 read-only 상태 해제, end까지 한번에 복사해서 붙여넣기후 실행 projects = Project.where(repository_read_only: true) projects.each do |p| p.update!(repository_read_only:nil) end # console 빠져나오기 exit 하단처럼 read only로 되어 있는거 나옴\n=\u0026gt; [#\u0026lt;Project id:363 codex/stamper-go\u0026gt;\u0026gt;, #\u0026lt;Project id:364 jellywing/stamper-go\u0026gt;\u0026gt;, #\u0026lt;Project id:367 dev-subbuilder-go/service-registry\u0026gt;\u0026gt;, #\u0026lt;Project id:31 dev-rankup-vex/dev-rankup-public/rankup-console\u0026gt;\u0026gt;] 그렇게 해도 해싱 되지 않아서 안나오는레포들이있어서 하단 명령어 실행 하여 전부 조회\n만약 레포에 들어갔는데 빈 레포로 나오면 하단의 작업 반드시 수행\nBefore upgrade to 14.x, Prerequisites 반드시 하단의 링크로 들어가서 주의사항 정독!!!\nUpgrading GitLab | GitLab\nmigrating to hashed storage\n13.8.8 에서 완료\n만약 해싱이 안되어 있으면, gitlab-rake gitlab:check SANITIZE=true 이 단계에서 확인 가능\nmigrating to Puma\n하단 처럼 상태에 puma가 돌고 있으면 문제 없지만,안전하게 업그레이드 하기 위해 gitlab.rb에서 puma 설정을 enable 로 바꾼후 gitlab-ctl reconfigure 실행\ngitlab-ctl status run: alertmanager: (pid 1595) 335s; run: log: (pid 1296) 358s run: gitaly: (pid 1471) 336s; run: log: (pid 535) 442s run: gitlab-exporter: (pid 1470) 336s; run: log: (pid 1109) 376s run: gitlab-workhorse: (pid 1436) 337s; run: log: (pid 824) 388s run: grafana: (pid 1622) 334s; run: log: (pid 1387) 346s run: logrotate: (pid 442) 457s; run: log: (pid 450) 456s run: nginx: (pid 830) 385s; run: log: (pid 857) 382s run: postgres-exporter: (pid 1613) 334s; run: log: (pid 1338) 352s run: postgresql: (pid 614) 439s; run: log: (pid 625) 438s run: prometheus: (pid 1568) 336s; run: log: (pid 1261) 364s run: puma: (pid 742) 403s; run: log: (pid 749) 402s run: redis: (pid 454) 451s; run: log: (pid 462) 449s run: redis-exporter: (pid 1481) 336s; run: log: (pid 1184) 370s run: sidekiq: (pid 756) 397s; run: log: (pid 767) 395s run: sshd: (pid 31) 467s; run: log: (pid 30) 467s 14.0.12-ce.0 업그레이드\ndocker-compose.yml 이미지 변경\n... image: \u0026#39;gitlab/gitlab-ce:14.0.12-ce.0\u0026#39;** ... unicorn 에 해당되는 부분들 주석 처리\nvi /Storage/docker/custom_dev_gitlab/config/gitlab.rb\n# unicorn[\u0026#39;enable\u0026#39;] = true # 그외에도 unicorn 관련된 부분 모두 주석 처리 puma 활성화\nvi /Storage/docker/custom_dev_gitlab/config/gitlab.rb\npuma[\u0026#39;enable\u0026#39;] = true Docker Compose 재시작\ndocker compose down docker compose up -d Gitlab 컨테이너 로그 확인\ndocker logs -f custom_dev_gitlab Issue\n웹페이지 표시 불가 및 에러 로그\n이전 14버전으로 넘어오기전 13버전 마지막 즈음에서 hashed storage로 변환이 이루어지지 않아서 발생\nhttps_test_gitlab | https_test_gitlab | Running handlers: https_test_gitlab | Running handlers complete https_test_gitlab | Chef Infra Client finished, 316/1392 resources updated in 01 minutes 33 seconds https_test_gitlab | gitlab Reconfigured! https_test_gitlab | Checking for unmigrated data on legacy storage https_test_gitlab | https_test_gitlab | Legacy storage is no longer supported. Please migrate your data to hashed storage. https_test_gitlab | Check \u0026lt;https://docs.gitlab.com/ee/administration/raketasks/storage.html#migrate-to-hashed-storage\u0026gt; for details. https_test_gitlab | https_test_gitlab | Upgrade failed. Retry the upgrade after migrating your data to hashed storage. 무한 재시작\n하단 처럼 계속해서 재시작 된다면, Gitlab 도커를 완전히 종료(docker compose down 후 시작)\nUpgrade failed. Could not check for unmigrated data on legacy storage. If you would like to restart the instance without perfming this check check, add the following to your docker command: -e GITLAB_SKIP_UNMIGRATED_DATA_CHECK=true Thank you for using GitLab Docker Image! Current version: gitlab-ce=14.0.12-ce.0 Configure GitLab for your system by editing /etc/gitlab/gitlab.rb file And restart this container to reload settings. To do it use docker exec: docker exec -it gitlab editor /etc/gitlab/gitlab.rb docker restart gitlab For a comprehensive list of configuration options please see the Omnibus GitLab readme \u0026lt;https://gitlab.com/gitlab-org/omnibus-gitlab/blob/master/README.md\u0026gt; If this container fails to start due to permission problems try to fix it by executing: docker exec -it gitlab update-permissions docker restart gitlab 14.3.6-ce.0 업그레이드\ndocker-compose.yml 이미지 변경 후 11.11.0-ce.0 업그레이드와 동일한 방법으로 진행\n... image: \u0026#39;gitlab/gitlab-ce:14.3.6-ce.0\u0026#39;** ... 14.9.5-ce.0 업그레이드\ndocker-compose.yml 이미지 변경 후 11.11.0-ce.0 업그레이드와 동일한 방법으로 진행\n... image: \u0026#39;gitlab/gitlab-ce:14.9.5-ce.0\u0026#39;** ... 14.10.5-ce.0 업그레이드\ndocker-compose.yml 이미지 변경 후 11.11.0-ce.0 업그레이드와 동일한 방법으로 진행\n... image: \u0026#39;gitlab/gitlab-ce:14.10.5-ce.0\u0026#39;** ... 15.0.5-ce.0 업그레이드\ndocker-compose.yml 이미지 변경 후 11.11.0-ce.0 업그레이드와 동일한 방법으로 진행\n... image: \u0026#39;gitlab/gitlab-ce:15.0.5-ce.0\u0026#39;** ... 15.1.6-ce.0 업그레이드\ndocker-compose.yml 이미지 변경 후 11.11.0-ce.0 업그레이드와 동일한 방법으로 진행\n... image: \u0026#39;gitlab/gitlab-ce:15.1.6-ce.0\u0026#39;** ... 15.4.6-ce.0 업그레이드\ndocker-compose.yml 이미지 변경 후 11.11.0-ce.0 업그레이드와 동일한 방법으로 진행\n... image: \u0026#39;gitlab/gitlab-ce:15.4.6-ce.0\u0026#39;** ... 15.9.0-ce.0 업그레이드\ndocker-compose.yml 이미지 변경 후 11.11.0-ce.0 업그레이드와 동일한 방법으로 진행\n... image: \u0026#39;gitlab/gitlab-ce:15.4.6-ce.0\u0026#39;** ... 15.9.0 버전 까지 업그레이드를 마쳤다면, 이후 최신버전으로 업그레이드는 별도의 Upgrade Path를 준수할 필요 없습니다.\n업그레이드 과정에서 자주 발생하는 에러에 대해서는 하단의 Debug History 참고 부탁드립니다.\nDebug History Jira Gitlab Integration Gitlab Jira Integration Issue Vm에서서 구동중인 신규로 구축한 Gitlab의 15.9.0~15.9.3 까지의 의 Jira 연동 시도\n도메인 주소 변경(jira-test-ce.devlab.com → jira-ce.devlab.com) 도메인 주소가 길어진 경우 이유를 알 수 없으나 Jira에서 Gitlab도메인을 인증 불가 Gitlab에 Admin권한을 가진 계정이 반드시 Jira의 Admin계정과 일치 현재 Jira는 admin 을 사용중이며, Gitlab에서도 해당 계정으로 연동을 진행해야만 정상적으로 Jira에서 Oatuh 가능 Gitlab의 Network Inboud 규칙 추가 local host와 내/외부 접근 IP에 대한 규칙이 추가 되어 있어야 Jira에서 오는 API가 정상적으로 동작 Jira의 API Key Gitlab 중복 연동 불가 서로 다를 도메인과 VM에서 실행중인 Gitlab에 동일한 Jira의 API키를 연동하면 먼저 연결한 쪽은 문제가 없지만, 나중에 연결한 Gitlab은 namespace인식을 못 함 연동시에 사용하는 포트 이슈 443 Port 반드시 오픈 VM에서 신규로 구축한 Gitlab 을 연동할 때에는 443포트만 오픈 하여도 문제없이 연동이 되었지만, 현재 사내에서 운영중인 Gitlab서버에 동일한 설정후 연동을 진행 하려고 하면 문제 발생. 차이점은 VM은 any:any 방식으로 NAT 연결, Gitlab server는 포트 포워딩 방식으로 연결되어 있음 Jira Gitlab 연동 플러그인 에러 Failed to update Gitlab version. Please try again. 하단의 그림처럼 버전을 업데이트 해야 한다는 에러 메세지가 나옴 최신버전(15.9.0 이상)의 Gitlab을 Container로 새로 구축해서 연동 해도 동일\nFailed to load Jira Connect Application ID. Please try again. OAuth 인증을 위해 Gitlab으로 이동시 하단의 화면처럼 에러 리턴\nGit Upgrade Issue 13.8.8 → 15.9.3 업그레이드 이슈 해결\nRegistry Not Exist 새로운 Gitlab에서 해당 설정 disable 하고 재시작 후 복구 진행 시, Registry가 없다는 이유로 복구가 중단 됨 원인은 백업 파일을 생성한 Gitlab에는 Registry 설정이 없거나 비활성화 되어있는 상태에서 백업을 받았고, 새로운 Gitlab에서는 기본 설정으로 Registry 기능이 활성화 되어 있어서 복구 과정에서 상단과 같은 문제 발생\n해결 방법\n원래는 config 의 gitlab.rb에서 해야 하지만 편의를 위해 도커 컴포즈 파일의 환경 설정 에서 적용\nregistry[\u0026#39;enable\u0026#39;] = false storage Hashing 해당 이슈가 해결 안되면 500 error 가 뜨거나, 무한 재부팅 이슈 발생\n해결 방법\nAll projects are in hashed storage? ... no Try fixing it: Please migrate all projects to hashed storage as legacy storage is deprecated in 13.0 and support will be removed in 14.0. For more information see: doc/administration/repository_storage_types.md gitlab:check 에서 projects hashed storage 이슈 발생 Gitlab-13.4.0 Upgrading Instruction 에 따르면, 13.4.0 부터 모든 레포들을 반드시 Hashed Storage로 변환해야 함\nreadonly project Readonly Project로 설정 되고 나면, 해당 프로젝트에 어떠한 것도 업로드 할 수 없음 예를 들어, Push, MR, Issue등 아무것도 업로드/생성 불가\n해결 방법\n# 호스트에서 gitlab-ce docker 쉘 진입 $ docker exec -it custom_dev_gitlab /bin/bash # Gitlab consoe 진입 gitlab-rails console -------------------------------------------------------------------------------- Ruby: ruby 2.7.2p137 (2020-10-01 revision 5445e04352) [x86_64-linux] GitLab: 13.12.15 (6614e1562c6) FOSS GitLab Shell: 13.18.1 PostgreSQL: 12.6 -------------------------------------------------------------------------------- Loading production environment (Rails 6.0.3.7) # 프로젝트들 중에서 read only프로젝트가 true인 레포가 있다면 하단 업데이트 진행 projects = Project.where(repository_read_only: true) projects.each do |p| print p end # read-only 상태인 프로젝트들의 read-only 상태 해제, end까지 한번에 복사해서 붙여넣기후 실행 projects = Project.where(repository_read_only: true) projects.each do |p| p.update!(repository_read_only:nil) end # console 빠져나오기 exit service not enable puma service 활성화를 안하면 Background migration 부분에서 무한 루프\n해결 방법\ngitlab-ctl status run: alertmanager: (pid 1595) 335s; run: log: (pid 1296) 358s run: gitaly: (pid 1471) 336s; run: log: (pid 535) 442s run: gitlab-exporter: (pid 1470) 336s; run: log: (pid 1109) 376s run: gitlab-workhorse: (pid 1436) 337s; run: log: (pid 824) 388s run: grafana: (pid 1622) 334s; run: log: (pid 1387) 346s run: logrotate: (pid 442) 457s; run: log: (pid 450) 456s run: nginx: (pid 830) 385s; run: log: (pid 857) 382s run: postgres-exporter: (pid 1613) 334s; run: log: (pid 1338) 352s run: postgresql: (pid 614) 439s; run: log: (pid 625) 438s run: prometheus: (pid 1568) 336s; run: log: (pid 1261) 364s run: puma: (pid 742) 403s; run: log: (pid 749) 402s run: redis: (pid 454) 451s; run: log: (pid 462) 449s run: redis-exporter: (pid 1481) 336s; run: log: (pid 1184) 370s run: sidekiq: (pid 756) 397s; run: log: (pid 767) 395s run: sshd: (pid 31) 467s; run: log: (pid 30) 467 DB Error Postgresql의 마이그레이션시 발생하는 이슈가 해결 안되면 유저 등록 불가, 특정 페이지 접근 불가, 프로젝트 생성 불가, 저장소 연결(push, clone…) 불가 이슈 발생\n해결 방법\n하단의 쿼리를 Postgresql 에서 실행하여 이슈가 발생한 테이블 삭제 필요\ngitlabhq_production=\u0026gt; DELETE FROM ci_group_variables; DELETE 0 gitlabhq_production=\u0026gt; DELETE FROM ci_variables; DELETE 72 gitlabhq_production=\u0026gt; gitlabhq_production=\u0026gt; UPDATE projects SET runners_token = null, runners_token_encrypted = null; UPDATE 350 gitlabhq_production=\u0026gt; UPDATE namespaces SET runners_token = null, runners_token_encrypted = null; UPDATE 198 gitlabhq_production=\u0026gt; UPDATE application_settings SET runners_registration_token_encrypted = null; UPDATE 1 gitlabhq_production=\u0026gt; UPDATE application_settings SET encrypted_ci_jwt_signing_key = null; UPDATE 1 gitlabhq_production=\u0026gt; UPDATE ci_runners SET token = null, token_encrypted = null; UPDATE 81 gitlabhq_production=\u0026gt; gitlabhq_production=\u0026gt; UPDATE ci_builds SET token = null, token_encrypted = null; UPDATE 60857 gitlabhq_production=\u0026gt; gitlabhq_production=\u0026gt; TRUNCATE web_hooks CASCADE; NOTICE: truncate cascades to table \u0026#34;web_hook_logs\u0026#34; TRUNCATE TABLE gitlabhq_production=\u0026gt; DELETE FROM ci_group_variables; DELETE FROM ci_variables; UPDATE projects SET runners_token = null, runners_token_encrypted = null; UPDATE namespaces SET runners_token = null, runners_token_encrypted = null; UPDATE application_settings SET runners_registration_token_encrypted = null; UPDATE ci_runners SET token = null, token_encrypted = null; UPDATE ci_builds SET token = null, token_encrypted = null; TRUNCATE web_hooks CASCADE; DELETE FROM application_settings; ProjectImportData failures [2023-02-09T18:20:27.909506 #8920] INFO -- : - ProjectImportData failures: 1 [2023-02-09T18:20:27.909587 #8920] DEBUG -- : - ProjectImportData[9]: credentials https://gitlab.com/gitlab-org/gitlab/-/issues/285080\n해결 방법\n하단의 예제는 credentials에 오류가 있는 컬럼을 찾아서 null 로 초기화 하는 코드\n$ gitlab-rails c # Find the ids of the corrupt ProjectImportData objects total = 0 bad = [] ProjectImportData.find_each do |data| begin total += 1 data.credentials rescue =\u0026gt; e bad \u0026lt;\u0026lt; data.id end end puts \u0026#34;Bad count: #{bad.count} / #{total}\u0026#34; # See the bad ProjectImportData ids bad # Remove the corrupted credentials import_data = ProjectImportData.where(id: bad) import_data.each do |data| data.update_columns({ encrypted_credentials: nil, encrypted_credentials_iv: nil, encrypted_credentials_salt: nil}) end 예시\nirb(main):001:0\u0026gt; total = 0 =\u0026gt; 0 irb(main):002:0\u0026gt; bad = [] =\u0026gt; [] irb(main):003:1* ProjectImportData.find_each do |data| irb(main):004:2* begin irb(main):005:2* total += 1 irb(main):006:2* data.credentials irb(main):007:2* rescue =\u0026gt; e irb(main):008:2* bad \u0026lt;\u0026lt; data.id irb(main):009:1* end irb(main):010:0\u0026gt; end =\u0026gt; nil irb(main):011:0\u0026gt; puts \u0026#34;Bad count: #{bad.count} / #{total}\u0026#34; Bad count: 1 / 1 =\u0026gt; nil irb(main):012:0\u0026gt; bad =\u0026gt; [9] irb(main):013:0\u0026gt; import_data = ProjectImportData.where(id: bad) =\u0026gt; #\u0026lt;ActiveRecord::Relation [#\u0026lt;ProjectImportData id: 9, project_id: 28, data: nil, encrypted_credentials: \u0026#34;bBpRdlKeY+/yggOwozgG7kLwOr7gjZxPk0MQQxWueLFO70WSwu...\u0026#34;, encrypted_credentials_iv: \u0026#34;SA6wLgm6kdMQGLrk/Fq+kA==\\\\n\u0026#34;, encr... irb(main):014:0\u0026gt; iedentials_salt: nil}) irb(main):014:1* import_data.each do |data| irb(main):015:1* data.update_columns({ encrypted_credentials: nil, encrypted_credentials_iv: nil, encrypted_credentials_salt: nil}) irb(main):016:0\u0026gt; end =\u0026gt; [#\u0026lt;ProjectImportData id: 9, project_id: 28, data: nil, encrypted_credentials: nil, encrypted_credentials_iv: nil, encrypted_credentials_salt: nil, credentials: nil\u0026gt;] Fix integrations and webhooks 최신 버전의 가이드 → Back up and restore GitLab | GitLab 현재 버전의 가이드 → Back up and restore GitLab | GitLab\nlogs/gitlab-rails 에서 production.log 를 보면 하단과 같이 나옴\nJira 연동 에러 Log\n해결 방법\n하단의 쿼리 실행\ngitlabhq_production=\u0026gt; delete from jira_connect_installations; DELETE 1 gitlabhq_production=\u0026gt; delete from jira_connect_subscriptions; DELETE 0 gitlabhq_production=\u0026gt; delete from jira_imports; DELETE 0 gitlabhq_production=\u0026gt; delete from jira_tracker_data; DELETE 14 gitlabhq_production=\u0026gt; Log\nStarted GET \u0026#34;/admin/runners\u0026#34; for 192.168.200.1 at 2023-02-09 10:49:16 +0900 Processing by Admin::RunnersController#index as HTML Completed 500 Internal Server Error in 46ms (ActiveRecord: 1.5ms | Elasticsearch: 0.0ms | Allocations: 51078) ActionView::Template::Error (): 36: 37: .col-sm-6 38: .bs-callout 39: = render partial: \u0026#39;ci/runner/how_to_setup_runner\u0026#39;, 40: locals: { registration_token: Gitlab::CurrentSettings.runners_registration_token, 41: type: \u0026#39;shared\u0026#39;, 42: reset_token_url: reset_registration_token_admin_application_settings_path } lib/gitlab/crypto_helper.rb:27:in `aes256_gcm_decrypt\u0026#39; app/models/concerns/token_authenticatable_strategies/encrypted.rb:45:in `get_token\u0026#39; app/models/concerns/token_authenticatable_strategies/base.rb:38:in `ensure_token!\u0026#39; app/models/concerns/token_authenticatable.rb:48:in `block in add_authentication_token_field\u0026#39; app/models/application_setting_implementation.rb:336:in `runners_registration_token\u0026#39; lib/gitlab/current_settings.rb:20:in `method_missing\u0026#39; app/views/admin/runners/index.html.haml:39 app/controllers/application_controller.rb:125:in `render\u0026#39; app/controllers/application_controller.rb:482:in `set_current_admin\u0026#39; lib/gitlab/session.rb:11:in `with_session\u0026#39; app/controllers/application_controller.rb:473:in `set_session_storage\u0026#39; lib/gitlab/i18n.rb:73:in `with_locale\u0026#39; lib/gitlab/i18n.rb:79:in `with_user_locale\u0026#39; app/controllers/application_controller.rb:467:in `set_locale\u0026#39; lib/gitlab/error_tracking.rb:52:in `with_context\u0026#39; app/controllers/application_controller.rb:532:in `sentry_context\u0026#39; app/controllers/application_controller.rb:460:in `block in set_current_context\u0026#39; lib/gitlab/application_context.rb:56:in `block in use\u0026#39; lib/gitlab/application_context.rb:56:in `use\u0026#39; lib/gitlab/application_context.rb:22:in `with_context\u0026#39; app/controllers/application_controller.rb:451:in `set_current_context\u0026#39; lib/gitlab/metrics/elasticsearch_rack_middleware.rb:16:in `call\u0026#39; lib/gitlab/middleware/rails_queue_duration.rb:33:in `call\u0026#39; lib/gitlab/metrics/rack_middleware.rb:16:in `block in call\u0026#39; lib/gitlab/metrics/transaction.rb:56:in `run\u0026#39; lib/gitlab/metrics/rack_middleware.rb:16:in `call\u0026#39; lib/gitlab/request_profiler/middleware.rb:17:in `call\u0026#39; lib/gitlab/jira/middleware.rb:19:in `call\u0026#39; lib/gitlab/middleware/go.rb:20:in `call\u0026#39; lib/gitlab/etag_caching/middleware.rb:21:in `call\u0026#39; lib/gitlab/middleware/multipart.rb:172:in `call\u0026#39; lib/gitlab/middleware/read_only/controller.rb:50:in `call\u0026#39; lib/gitlab/middleware/read_only.rb:18:in `call\u0026#39; lib/gitlab/middleware/same_site_cookies.rb:27:in `call\u0026#39; lib/gitlab/middleware/handle_malformed_strings.rb:21:in `call\u0026#39; lib/gitlab/middleware/basic_health_check.rb:25:in `call\u0026#39; lib/gitlab/middleware/handle_ip_spoof_attack_error.rb:25:in `call\u0026#39; lib/gitlab/middleware/request_context.rb:23:in `call\u0026#39; config/initializers/fix_local_cache_middleware.rb:9:in `call\u0026#39; lib/gitlab/metrics/requests_rack_middleware.rb:76:in `call\u0026#39; lib/gitlab/middleware/release_env.rb:12:in `call\u0026#39; web Hook 연동 에러\nLog\nStarted GET \u0026#34;/dev-rankup-vex/rankup/hooks\u0026#34; for 192.168.200.1 at 2023-02-20 16:19:44 +0900 Processing by Projects::HooksController#index as HTML Parameters: {\u0026#34;namespace_id\u0026#34;=\u0026gt;\u0026#34;dev-rankup-vex\u0026#34;, \u0026#34;project_id\u0026#34;=\u0026gt;\u0026#34;rankup\u0026#34;} Completed 500 Internal Server Error in 61ms (ActiveRecord: 2.7ms | Elasticsearch: 0.0ms | Allocations: 66041) ActionView::Template::Error (): 1: %li 2: .row 3: .col-md-8.col-lg-7 4: %strong.light-header= hook.url 5: %div 6: - hook.class.triggers.each_value do |trigger| 7: - if hook.public_send(trigger) app/views/shared/web_hooks/_hook.html.haml:4 app/views/shared/web_hooks/_index.html.haml:11 app/views/shared/web_hooks/_index.html.haml:10 app/views/projects/hooks/index.html.haml:14 app/controllers/application_controller.rb:125:in `render\u0026#39; app/controllers/application_controller.rb:482:in `set_current_admin\u0026#39; lib/gitlab/session.rb:11:in `with_session\u0026#39; app/controllers/application_controller.rb:473:in `set_session_storage\u0026#39; lib/gitlab/i18n.rb:73:in `with_locale\u0026#39; lib/gitlab/i18n.rb:79:in `with_user_locale\u0026#39; app/controllers/application_controller.rb:467:in `set_locale\u0026#39; lib/gitlab/error_tracking.rb:52:in `with_context\u0026#39; app/controllers/application_controller.rb:532:in `sentry_context\u0026#39; app/controllers/application_controller.rb:460:in `block in set_current_context\u0026#39; lib/gitlab/application_context.rb:56:in `block in use\u0026#39; lib/gitlab/application_context.rb:56:in `use\u0026#39; lib/gitlab/application_context.rb:22:in `with_context\u0026#39; app/controllers/application_controller.rb:451:in `set_current_context\u0026#39; lib/gitlab/metrics/elasticsearch_rack_middleware.rb:16:in `call\u0026#39; lib/gitlab/middleware/rails_queue_duration.rb:33:in `call\u0026#39; lib/gitlab/metrics/rack_middleware.rb:16:in `block in call\u0026#39; lib/gitlab/metrics/transaction.rb:56:in `run\u0026#39; lib/gitlab/metrics/rack_middleware.rb:16:in `call\u0026#39; lib/gitlab/request_profiler/middleware.rb:17:in `call\u0026#39; lib/gitlab/jira/middleware.rb:19:in `call\u0026#39; lib/gitlab/middleware/go.rb:20:in `call\u0026#39; lib/gitlab/etag_caching/middleware.rb:21:in `call\u0026#39; lib/gitlab/middleware/multipart.rb:172:in `call\u0026#39; lib/gitlab/middleware/read_only/controller.rb:50:in `call\u0026#39; lib/gitlab/middleware/read_only.rb:18:in `call\u0026#39; lib/gitlab/middleware/same_site_cookies.rb:27:in `call\u0026#39; lib/gitlab/middleware/handle_malformed_strings.rb:21:in `call\u0026#39; lib/gitlab/middleware/basic_health_check.rb:25:in `call\u0026#39; lib/gitlab/middleware/handle_ip_spoof_attack_error.rb:25:in `call\u0026#39; lib/gitlab/middleware/request_context.rb:23:in `call\u0026#39; config/initializers/fix_local_cache_middleware.rb:9:in `call\u0026#39; lib/gitlab/metrics/requests_rack_middleware.rb:76:in `call\u0026#39; lib/gitlab/middleware/release_env.rb:12:in `call\u0026#39; 해결 방법\nTRUNCATE web_hooks CASCADE; 위 방법 대로 진행 하면 모든 웹 훅 설정이 삭제 됨\nAbout CI/CD Page Internal Server Error 500 Internal Server Error 500 while accessing $GITLAB/admin/runners\nhttps://stackoverflow.com/questions/54216933/internal-server-error-500-while-accessing-gitlab-admin-runners\nGitlab CICD Variable Error There was an error fetching the variables.\nCICD메뉴 들어가면 위같이 나옴\n실제 메뉴에 들어가면 값이 아무것도 없음\n2FA로 암호화된 값이 전부 복사가 안됨\ngitlabhq_production=\u0026gt; SELECT * FROM public.\u0026#34;ci_variables\u0026#34;; Back up and restore GitLab | GitLab\n해결 방법 에러가 발생한 테이블 전부 삭제\ngitlab-rails dbconsole SELECT * FROM public.\u0026#34;ci_group_variables\u0026#34;; SELECT * FROM public.\u0026#34;ci_variables\u0026#34;; DELETE FROM ci_group_variables; DELETE 0 DELETE FROM ci_variables; DELETE 72 token failure Project ⇒ runners_token Ci::Build ⇒ token Ci::Runner⇒ token Group failures: 13 ⇒ runner_token Project failures⇒ runners_token 하단의 쿼리 실행해보면 모든 토큰들이 쓰레기 값으로 채워져 있음\ngitlab-rails dbconsole select runners_token from projects; 해결 방법\n관련 토큰들을 강제로 초기화 필요\ngitlab-rails dbconsole UPDATE projects SET runners_token = null, runners_token_encrypted = null; UPDATE 350 select runners_token from namespaces ; UPDATE namespaces SET runners_token = null, runners_token_encrypted = null; UPDATE 199 select runners_registration_token_encrypted from application_settings; runners_registration_token_encrypted -------------------------------------------------- 5DWiuL68oK/+bY0vxg74/xN+ZKUihKDMHCWnmQZJF0uy2gUU (1 row) UPDATE application_settings SET runners_registration_token_encrypted = null; UPDATE 1 select token,token_encrypted from ci_runners; token | token_encrypted -------+-------------------------------------------------- | 8S6u1fDNlvDLQcFB2x3GlARyQqEZQggaMoxv3LqYTRkRbC43 | 7RWfjr22sJLwTqMK3QDFnQ5cXahYk1nT6NlRiuehqQDKuEHG | rXWSk4m/hfv1XacAmxfPhC5PQI3sgCKao2jkC7Sa3uzSHSb+ | pDOIk76tqo/AZYAI8FzPuDFgZf4vHJMfPnPVF2M1MPulJhnY | 6CSKlKPBoorGSsQ/5DLxuzNOb6M/IQtiwjYkxszjgryQwSHN | txOI0r7Pl5fvR5pB3A3biyUoIKGaKmceSYsywq3II2Jisl/0 | jSmT2L+ds/freJAC5QzDpSBORLllSKbAs83+ShsF0v3hWPfe | 5BaLp42RnoPkUJE54VPFnw1gQ7p93aDThn1lk61PbNjJsM8J | rgyclbStrfTbTs1O+yf1izFjYPkZH4iI/rhNBb0lBuEVbkRJ | iBWXpqqKoY77TIESxBznnhFMYLw8ilpbIkx7u0ZjtRbEEGt3 | khnRl4adgbHiVZEo3S7zog5LTbA8eTpRG2n/HqUG+xS/O/79 | rj+9uJCyjqOTNKYn6xfSuh5fIpA/Xs83kXe6MT9wB+7aEHC2 | rgzdsYabranYeqVL6lKb9Fp+UbLZBSk/ydaiaOMGb75/NHTx | sWuohKO9kLvSMIw7+VXhuyFtZoxxMyggYL8Hgvn0m0VPFGc9 | pTWU2IrMqorkV8ARmR6EgTAvWKMtrG3Hxa3eVhcwx7q0K+HW | 73WUzfOwhoj3SIUbnEnAoyF7Y7/ZyTvlIkoYEjZq6gC6ZpMC | mTWhuJKCopLtc8I12RXzlQ9qV5l4Z/69oHLyTDJvA1kb4cVd | rBDSkaCdj5LWZ4MAghfTvxIuf6f99c2civIsqeIp2NZQ9+bp | uweomoWAqvTbWMxJmg3zgAZ4e7DtO7/IcTavSgYsmJzwfnqn | pnGLha2CsJLJTsQp6zfcvg9TT72aArFPVXALqzyiE/hcztZO | mn6clbWRoKbZSKNLnBzEnjp+Vr+BI/veDyFuDXV2toMXV0ss | jDeLiPPVpo6UL60J6g7ktARLZJNW5zDzKaD2UFo3SX0n4aYq | nj+Xpp7VkanSV48bmifXuyJvbJ0vBRGYztfZffd5JYEkQrmV | 5B/SopiPtLHKRKYf1QX3tEFfZJAJrv2ZEeGQeLwXrnZsB8GH UPDATE ci_runners SET token = null, token_encrypted = null; UPDATE 81 select token,token_encrypted from ci_builds ; token | token_encrypted -------+-------------------------------------------------- | rBCGkbKcvrGVR6JP5x7vpA8rXo/hPT9WwYVXFjtfaSEVeFdc | 5H+305+w35jQT8EA/y/ilDZLIKQ8yf/mbylVg+c8oKQ7SVpk UPDATE ci_builds SET token = null, token_encrypted = null; UPDATE 60857 Ci::PipelineVariable failures 하단의 쿼리를 실행 하면, 하단 처럼 키는 있지만 이에 매칭 되는 값이 없음\ngitlab-rails dbconsole select * from ci_pipeline_variables; id | key | value | encrypted_value | encrypted_value_salt | encrypted_value_iv | pipeline_id | variable_type ----+-------------+-------+--------------------------------------------------------------+---------------------------+--------------------------+-------------+--------------- 1 | SSH_PASS | | w8qzJD5aSsaWbjfPPlpLBQ== +| _MiTYiSslBO0Nv7s0tcmF0Q==+| MpyPIrH6HSiggmg+zPi7fg==+| 1256 | 1 | | | | | | | 해결방법\nCI 변수 테이블 전부 삭제\ngitlab-rails dbconsole delete from ci_pipeline_variables; DELETE 6 개인 Access token 위 과정에서 오류가 있는 테이블은 전부 삭제를 했고, deploy_tokens을 찾기 위해 테이블 조회를 한 후 deploy_tokens 테이블 삭제 필요\ngitlab-rails dbconsole SELECT * FROM pg_catalog.pg_tables where tablename like \u0026#39;%token%\u0026#39;; select * from deploy_tokens; 해결 방법\ngitlab-rails dbconsole delete from deploy_tokens; User Failures otp_secret 해당 이슈가 검출 되어도 시스템에 영향은 없음\nI, [2023-03-21T11:32:21.395183 #1925] INFO -- : - User failures: 1 D, [2023-03-21T11:32:21.395311 #1925] DEBUG -- : - User[25]: otp_secret 하지만 해결 하고 싶다면 하고 싶다면 하단의 쿼리 실행\n해결 방법\nDB에서 otp 관련 컬럼들 검색\n$ gitlab-rails db gitlabhq_production=\u0026gt; select username,id,encrypted_otp_secret,encrypted_otp_secret_iv,encrypted_otp_secret_salt,otp_secret_expires_at from users; username | id | encrypted_otp_secret | encrypted_otp_secret_iv | encrypted_otp_secret_salt | otp_secret_expires_at -------------------+-----+----------------------+--------------------------+---------------------------+----------------------- lunar.kim | 25 | | 0RlunopfsqEk4//Zw1TaAQ==+| _rOhq1EDp+u+ag27VknisIw==+| 암호화된 otp값이 실제론 존재 하지 않아서 해당 otp 삭제 및 모든 유저 암호화 OTP 초기화\ngitlabhq_production=\u0026gt; update users set encrypted_otp_secret_iv=null, encrypted_otp_secret_salt=null; UPDATE 143 위 과정을 모두 마치고 다시 오류 검출 시도\n$ gitlab-rake gitlab:doctor:secrets VERBOSE=1 --trace ... I, [2023-03-21T12:19:15.962304 #4092] INFO -- : - User failures: 0 ... I, [2023-03-21T12:19:22.490768 #4092] INFO -- : Total: 0 row(s) affected I, [2023-03-21T12:19:22.490833 #4092] INFO -- : Done! ","date":"March 22, 2023","hero":"/images/posts/gitlab_logo.png","permalink":"https://codex-devlab.github.io/posts/tools/sub-gitlab/gitlab-upgrade/","summary":"\u003ch1 id=\"gitlab-upgrade-history\"\u003eGitlab Upgrade History\u003c/h1\u003e\n\u003cp\u003eGitlab의 업그레이드 과정은 하단의 Upgrade Path(\u003ca href=\"https://docs.gitlab.com/ee/update/#upgrade-paths\" target=\"_blank\" rel=\"noopener\"\u003ehttps://docs.gitlab.com/ee/update/#upgrade-paths\u003c/a\u003e)를 준수 하며 진행해야 합니다.\u003c/p\u003e\n\u003cp\u003e위 경로대로 업그레이드를 진행하지 않으면, 하위 호완성의 문제로 구동이 불가능 하거나 데이터 베이스 오류등 다양한 에러가 발생 할 수 있습니다.\u003c/p\u003e\n\u003cp\u003eNone Stop 업그레이드는 이중화 구성이 되어있지 않은 인스턴스에서는 불가능 하기에, 업그레이드 과정중에는 반드시 서비스의 중단을 공지한 후 진행하시기 바랍니다.\u003c/p\u003e\n\u003cp\u003e마지막으로 업그레이드 과정에서 Gitlab Rails에서 Background Migration 작업을 진행 하게 되는데, 해당 과정은 Major 버전이 올라가거나, 업그레이드 경로 상 마지막 과정에서 상당 시간이 소요 됩니다.\u003c/p\u003e","tags":["GitLab","Manual","Upgrade"],"title":"GitLab Upgrade"},{"categories":null,"contents":"Scanf 에서 공백과 \\n의 의미 먼저 IBM에서 제공하는 Scanf의 정의먼저 보겠습니다.\n공백 문자로,isspace()함수(줄 바꾸기 문자와 공백과 같은)에서 지정됩니다.\n공백 문자로 scanf함수는 공백이 아닌 다음 문자까지 입력의 모든 연속 공백 문자를 읽지만 저장하지 않습니다. format-string의 한 공백 문자는 입력에서 공백 문자의 조합과 일치합니다.\n퍼센트 기호 문자(%)를 제외하고, 공백이 아닌 문자입니다.\n공백이 아닌 문자로scanf()함수는 일치하는 공백이 아닌 문자를 읽지만 저장하지 않습니다.\nstdin의 다음 문자가 일치하지 않는 경우,scanf()함수가 종료합니다.\n예제 #include \u0026lt;stdio.h\u0026gt; int main(){ int a,b; scanf(\u0026#34;%d \u0026#34;,\u0026amp;a); printf(\u0026#34;%d\\n\u0026#34;,a); scanf(\u0026#34;%d \u0026#34;,\u0026amp;b); printf(\u0026#34;%d\\n\u0026#34;,b); } $ ./a.out 1 1 2 2 우리가 1을 입력후 엔터를 치면 1이 출력되고 그다음 2를 입력하면 2가 출력 될것이라고 예상할것이다.\n$ ./a.out 1 2 1 q 2 하지만 1을 입력후 2를 입력해야 1이 출력되고 q를 입력하자 2가 출력된다 왜일까?\nscanf(\u0026quot;%d \u0026ldquo;,\u0026amp;a) 를 해석해 보자 %d뒤에 공백이 있는데, 이 부분에서\n숫자, 1자 이상의 공백문자, 공백문자가 아닌 문자값이 들어오기를 기다립니다.\n그렇다면 1을 입력후에는 버퍼안에 1이 들어가있고\n그다음 공백 문자 이외의 문자를 기다립니다.\n물론 우리는 엔터를 통해 \u0026lsquo;\\n\u0026rsquo;을 입력했지만 New line은 문자로 할당되지 않습니다.\n그리고 다음 기대 값인 2를 입력 했을때 비로소 공백이 아닌 문자가 들어오게 된것이죠.\n그래서 버퍼에있던 1을 출력해 주고 현재 버퍼엔 2가 남아있게 됩니다.\n그리고 아무 문자를 입력하고 나면 공백이아닌 문자가 들어왔기 때문에\n2가 출력되게 되는것입니다.\n그리고 프로그램이 끝나기 전까지는 버퍼에 마지막 입력했던 문자가 들어있겠지요.\n참고 IBM Scanf 정의 여기 참고\n","date":"June 8, 2020","hero":"/images/rand_images/emile-perron.jpg","permalink":"https://codex-devlab.github.io/posts/study/sub-algorithms/programming-tips/the-meaning-of-scanf-in-c-language/","summary":"\u003ch2 id=\"scanf-에서-공백과-n의-의미\"\u003eScanf 에서 공백과 \\n의 의미\u003c/h2\u003e\n\u003cp\u003e먼저 IBM에서 제공하는 Scanf의 정의먼저 보겠습니다.\u003c/p\u003e\n\u003cp\u003e공백 문자로,\u003ca href=\"https://www.ibm.com/support/knowledgecenter/ko/ssw_ibm_i_73/rtref/isalnum.htm?view=kc#isalnum\" target=\"_blank\" rel=\"noopener\"\u003eisspace()함수\u003c/a\u003e(줄 바꾸기 문자와 공백과 같은)에서 지정됩니다.\u003c/p\u003e\n\u003cp\u003e공백 문자로 \u003ccode\u003escanf\u003c/code\u003e함수는 공백이 아닌 다음 문자까지 입력의 모든 연속 공백 문자를 읽지만 저장하지 않습니다. format-string의 한 공백 문자는 입력에서 공백 문자의 조합과 일치합니다.\u003c/p\u003e\n\u003cp\u003e퍼센트 기호 문자(%)를 제외하고, 공백이 아닌 문자입니다.\u003c/p\u003e\n\u003cp\u003e공백이 아닌 문자로scanf()함수는 일치하는 공백이 아닌 문자를 읽지만 저장하지 않습니다.\u003c/p\u003e\n\u003cp\u003estdin의 다음 문자가 일치하지 않는 경우,scanf()함수가 종료합니다.\u003c/p\u003e\n\u003ch2 id=\"예제\"\u003e예제\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;stdio.h\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e(){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e a,b;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003escanf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;%d \u0026#34;\u003c/span\u003e,\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003ea);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eprintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;%d\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e,a);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003escanf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;%d \u0026#34;\u003c/span\u003e,\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003eb);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eprintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;%d\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e,b); }\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e$ ./a.out\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e우리가 1을 입력후 엔터를 치면 1이 출력되고 그다음 2를 입력하면 2가 출력 될것이라고 예상할것이다.\u003c/p\u003e","tags":["Study","Programming tips","C","Scanf"],"title":"C언어 Scanf 의 의미"},{"categories":null,"contents":"CentOS 7 DVD Partion \u0026amp; Setting Partioning RedHat 권고 파티션 설정을 보고 해도 상관 없음.\n/boot\n500M(장치유형 : 표준 파티션, 파일시스템 : ext4)\nswap\n16G(해당 PC는 16G Ram 장착, 장치유형 : 표준 파티션, 파일시스템 : swap)\n/home\n100G(라이브리러등 이것저것 설치하다 보면 귀찮아서 걍 100G, 장치유형 : LVM, 파일시스템 : ext4)\n/\n나머지 용량 전부 때려 박는다(장치유형 : LVM, 파일시스템 : ext4)\nSetting \u0026lt;출처 : http://img1.daumcdn.net/thumb/R1920x0/?fname=http%3A%2F%2Fcfile7.uf.tistory.com%2Fimage%2F2437A64F58A55A5622FAD7\u003e\nNetwork setting Centos는 ubuntu 와는 다르게 네트워크 초기 설정을 직접 해줘야 한다. 하지만 본인은 특정 ip를 수동으로 잡아줬다.\nIPv4 : 192.168.xxx.xxx\nNetmask : 255.255.255.0\nGatway : 192.168.xxx.xxx\nDNS : 8.8.8.8\nAfter installation 운영체제가 설치되고 나서 설정 해줄것들\n$ yum update -y $ systemctl stop firewalld $ systemctl mask firewalld $ yum install -y iptables-services $ systemctl enable iptables $ systemctl start iptables $ iptables -nL $ vi /etc/sysconfig/iptables Hangul setting 우분투에 비해 상당히 깔끔하고 편하다. 설정 -\u0026gt; 지역 및 언어 에서 다음과 같이 설정.\n단축키 토글에 한글키를 그냥 냅둬도 상관 없음.\nTypora Typora Github 참고\n$ git clone https://github.com/RPM-Outpost/typora $ cd typora $ ./create-package.sh x64 # alias 설정 $ vi ~/.bashrc alias typora=\u0026#34;/opt/typora/Typora\u0026#34; 위에꺼 안됨 바이너리 파일 받아서 실행해야됨\n//not sudo $ cd ~ $ wget https://typora.io/linux/Typora-linux-x64.tar.gz $ ls Typora-linux-x64.tar.gz $ tar -xzvf Typora-linux-x64.tar.gz $ ls Typora-linux-x64 $ sudo mv Typora-linux-x64 /opt/typora $ vi ~/.bashrc alias typora=\u0026#34;/opt/typora/Typora\u0026#34; 터미널에서 실행하면 꺼지지 안음 ㅋㅋㅋ\n그래서 앱을 따로 등록해 줘야함\n$ vi /home/codex/.local/share/applications/typora.desktop [Desktop Entry] Version=1.0 Type=Application Name=Typora Icon=/opt/typora/resources/app/asserts/icon/icon_512x512.png Exec=/opt/typora/Typora Comment=Minimal markdown md editor Categories=Office;TextEditor Terminal=false MimeType=text/markdown Turn off Mouse accelation # device list확인 $ xinput --list # 현재 속도 확인 $ xset q | grep -A 1 Pointer # 가속 끄기 $ xset m 0/1 4 $ sudo vi /usr/share/X11/xorg.conf.d/80-no-mouse-accel.conf Section \u0026#34;InputClass\u0026#34; Identifier \u0026#34;Set mouse acceleration to zero\u0026#34; MatchIsPointer \u0026#34;on\u0026#34; MatchDevicePath \u0026#34;/dev/input/event*\u0026#34; # Default value of mouse acceleration: 2/1 4 # Set AccelerationNumerator to zero to disable Option \u0026#34;AccelerationNumerator\u0026#34; \u0026#34;0\u0026#34; Option \u0026#34;AccelerationDenominator\u0026#34; \u0026#34;1\u0026#34; Option \u0026#34;AccelerationThreshold\u0026#34; \u0026#34;4\u0026#34; EndSection Gnome themes https://github.com/vinceliuice/Mojave-gtk-theme\n$ ./install.sh -c dark Shared Drive Auto mount $ df -l Filesystem 1K-blocks Used Available Use% Mounted on ... /dev/sdb1 1831250824 12 1733558752 1% /run/media/codex/share $ ll disk/by-uuid/ ... lrwxrwxrwx 1 root root 10 12월 26 12:56 7dbc16eb-699b-d401-30ac-16eb699bd401 -\u0026gt; ../../sdb1 ... $ sudo vi /etc/fstab UUID=7dbc16eb-699b-d401-30ac-16eb699bd401 /run/media/codex/share ext4 defaults 0 0 Dev Setting Python 기본으로 설치되어 있는 2.7.5버전 사용 하면 됨.\nJava $ rpm -qa | grep jdk java-1.7.0-openjdk-1.7.0.201-2.6.16.1.el7_6.x86_64 java-1.8.0-openjdk-headless-1.8.0.191.b12-1.el7_6.x86_64 java-1.8.0-openjdk-1.8.0.191.b12-1.el7_6.x86_64 java-1.7.0-openjdk-headless-1.7.0.201-2.6.16.1.el7_6.x86_64 copy-jdk-configs-3.3-10.el7_5.noarch # jdk 는 설치되어 있으나 java compiler는 없는 상태 $ javac -verions bash: javac: 명령을 찾을 수 없습니다... $ yum list java*jdk-devel java-1.6.0-openjdk-devel.x86_64 1:1.6.0.41-1.13.13.1.el7_3 base java-1.7.0-openjdk-devel.x86_64 1:1.7.0.201-2.6.16.1.el7_6 updates java-1.8.0-openjdk-devel.i686 1:1.8.0.191.b12-1.el7_6 updates java-1.8.0-openjdk-devel.x86_64 1:1.8.0.191.b12-1.el7_6 updates java-11-openjdk-devel.i686 1:11.0.1.13-3.el7_6 updates java-11-openjdk-devel.x86_64 1:11.0.1.13-3.el7_6 updates $ sudo yum install -y java-1.8.0-openjdk-devel.x86_64 $ javac -version javac 1.8.0_191 IntelliJ 공홈 에서 linux용 다운로드\n학생용 email 주소가 있으면 free\n다만, linux에서는 앱들을 별다른 설치 없이 압축 해제된 폴더 자체에서 실행 가능한 경우가 많기에\n필자는 /dev 폴더를 따로 만들어서 옮겨 주었다.\n$ tar -xzf ideaIU-2018.3.2.tar.gz $ cd idea-IU-183.4886.37/bin $ ./idea.sh Install \u0026amp; Setting 공유 메모리 및 힙 늘리는법 이전에 IntelliJ 사용중에 CPU를 과도하게 점유하는 사태가 생김 IntelliJ가 점유 하는것이 아닌 kworker라는 process가 전부 점유.\n원인은 Shared memory 의 용량 부족이고, 설정을 바꾸어 용량을 늘려주면됨.\n$ cd IntelliJ가 설치되어 있는 위치/bin $ ls appletviewer.policy idea.png idea64.vmoptions log.xml format.sh idea.properties inspect.sh printenv.py fsnotifier idea.sh libdbm64.so restart.py fsnotifier-arm idea.svg libyjpagent-linux.so fsnotifier64 idea.vmoptions libyjpagent-linux64.so # 이중에서 idea.vmoptions의 내용을 수정해 줘야 한다. $ vi idea.vmoptions ... -Xms1024m -Xmx1024m ... # 1024로 수정 google code style guid https://github.com/google/styleguide\nhttps://jiyeonseo.github.io/2016/11/15/setting-java-google-style-to-intellij/\nKernel update https://www.howtoforge.com/tutorial/how-to-upgrade-kernel-in-centos-7-server/\n$ yum --enablerepo=elrepo-kernel install kernel-ml -y # devel 이 yum 으로 설치가 안됨 # 때문에 오레곤 행님 들이 제공하는 repo에서 다운받음. $ rpm -ivh http://ftp.osuosl.org/pub/elrepo/kernel/el7/x86_64/RPMS/kernel-ml-devel-4.20.1-1.el7.elrepo.x86_64.rpm $ rpm -ivh http://ftp.osuosl.org/pub/elrepo/kernel/el7/x86_64/RPMS/kernel-ml-headers-4.20.1-1.el7.elrepo.x86_64.rpm 그래픽 카드 업데이트(정석) 우선 커널을 업데이트후 진행해줬다. 현재 커널 버전 4.20.1-1.el7.elrepo.x86_64.\nDownload Nvidia graphic driver 현재 그래픽 카드에 맞는 Nvidia driver를 받아야 한다 필자는 GeForce GTX 1060 3GB 사용중.\nNvidia driver list 에 들어가서 그래픽카드에 맞는 드라이버를 다운 받기를 바란다.\n# 해당 자료는 설치 완료후에 수집된 자료임. $ lshw -numeric -C display *-display description: VGA compatible controller product: GP106 [GeForce GTX 1060 3GB] [10DE:1C02] vendor: NVIDIA Corporation [10DE] physical id: 0 bus info: pci@0000:01:00.0 version: a1 width: 64 bits clock: 33MHz capabilities: pm msi pciexpress vga_controller bus_master cap_list rom configuration: driver=nvidia latency=0 resources: irq:132 memory:f6000000-f6ffffff memory:e0000000-efffffff memory:f0000000-f1ffffff ioport:e000(size=128) memory:c0000-dffff 이제 설치를 시작해 보자 처음 그래픽 카드에 대한 정보를 찾아보면\n$ lshw -numeric -C display *-display description: VGA compatible controller product: GP106 [GeForce GTX 1060 3GB] [10DE:1C02] vendor: NVIDIA Corporation [10DE] physical id: 0 bus info: pci@0000:01:00.0 version: a1 width: 64 bits clock: 33MHz capabilities: pm msi pciexpress vga_controller bus_master cap_list rom configuration: driver=nouveau latency=0 ... # 이런식으로 configuration: driver의 셋팅이 nouveau로 잡혀있다 이걸 먼저 수정해줘야함. $ vim /etc/default/grub GRUB_CMDLINE_LINUX=\u0026#34;crashkernel=auto rd.lvm.lv=centos/root rhgb quiet nouveau.modeset=0\u0026#34; $ grub2-mkconfig -o /boot/grub2/grub.cfg # 이제 드라이버 다운로드 # 필자는 Latest Long Lived Branch Version을 받았다. $ wget http://us.download.nvidia.com/XFree86/Linux-x86_64/410.93/NVIDIA-Linux-x86_64-410.93.run $ yum groupinstall \u0026#34;Development Tools\u0026#34; -y $ yum install kernel-devel epel-release $ yum install dkms # 자 이제 여기서 중요한 부분이 커널을 업데이트 하면서 문제가 발생했다. # yum 으로 커널을 업데이트 했고 kernel-devel 을 다운 받았지만, 업데이트된 커널의 devel은 설치가 되지 안았다. 해당 부분은 issue1을 살펴보자. [Issue 1(kernel-devel 이 repo를 통해서 제대로 설치가 되지 않음)](#Issue 1(kernel-devel 이 repo를 통해서 제대로 설치가 되지 않음))\n# 이제 x-org server를 끄자. 해당 명령어를 실행하면 화면이 꺼진다. # 얼탱이가 없는게그럼 일반 유저들은 어케 설치하라는건지 $ systemctl isolate multi-user.target # 이제 아까 받았던 nvidia driver를 설치하자. $ ./NVIDIA-Linux-x86_64-410.93.run --kernel-source-path /usr/src/kernels/4.20.1-1.el7.elrepo.x86_64 # $ bash 다운받은 드라이버 이름 --kernel-source-path /usr/src/kernels/커널버전 이제 부터가 중요하다 다양한 블로그를 참조하였지만 전부 노답. 설치를 하다보면 대부분 yes를 해주면 된다. 하지만 단 한부분에서 yes를 하면 안되는데 바로 32bit library 를 설치 할건지에 대한 여부다.\n절대 yes 하면 안된다. 필자의 pc도 64bit이고 대부분 pc들은 64bit 기반 cpu일것이다.\n고로 No 를 해주자\n이제 마무리 이고 reboot 만 해주면됨.\nIssue 1(kernel-devel 이 repo를 통해서 제대로 설치가 되지 않음) $ ./파일이름 --kernel-source-path /usr/src/kernels/4.20.1-1.el7.elrepo.x86_64 Failed to run `/usr/sbin/dkms build -m nvidia -v 410.93 -k 4.20.1-1.el7.elrepo.x86_64`: Error! echo Your kernel headers for kernel 4.20.1-1.el7.elrepo.x86_64 cannot be found at /lib/modules/4.20.1-1.el7.elrepo.x86_64/build or /lib/modules/4.20.1-1.el7.elrepo.x86_64/sourc e. Sol # 직접 /lib/modules/4.20.1-1.el7.elrepo.x86_64에 들어가서 확인해 보니 build와 source에 링크가 걸려있다. # 먼저 /usr/src/kernels로 가보니 우리가 현재 적용한 4.20.1-1.el7.elrepo.x86_64가 없는것을 확인 # 착하게도 oregon repo에서 devel 과 header를 제공해준다. $ rpm -ivh http://ftp.osuosl.org/pub/elrepo/kernel/el7/x86_64/RPMS/kernel-ml-devel-4.20.1-1.el7.elrepo.x86_64.rpm $ rpm -ivh http://ftp.osuosl.org/pub/elrepo/kernel/el7/x86_64/RPMS/kernel-ml-headers-4.20.1-1.el7.elrepo.x86_64.rpm $ ls /usr/src/kernels/ 3.10.0-957.1.3.el7.x86_64 3.10.0-957.1.3.el7.x86_64.debug 4.20.1-1.el7.elrepo.x86_64 너무나도 착한 오레곤 대학교 행님들한테 감사를\u0026hellip;Oregon Repo\nnvidia-installer was forced to guess the X library path \u0026#39;/usr/lib64\u0026#39; and X module path \u0026#39;/usr/lib64/xorg/modules\u0026#39;; these paths were not queryable from the system. If X fails to find the NVIDIA X driver module, please install the `pkg-config` utility and the X.Org SDK/development package for your distribution and reinstall the driver yes\nIssue 2 (libX11 없는 문제) $ nvidia-setting nvidia-settings: error while loading shared libraries: libX11.so.6: cannot open shared object file: No such file or directory # 또 에러를 토해낸다. libX11.so.6가 없다는데 검색 ㄲ $ yum whatprovides */libX11.so.6 libX11-1.6.5-2.el7.i686 : Core X11 protocol client library Repo : base Matched from: Filename : /usr/lib/libX11.so.6 libX11-1.6.5-2.el7.x86_64 : Core X11 protocol client library Repo : base Matched from: Filename : /usr/lib64/libX11.so.6 nxagent-3.5.99.17-1.el7.x86_64 : NX Agent Repo : epel Matched from: Filename : /usr/lib64/nx/X11/libX11.so.6 해결방법\nnvidia-settings ERROR: libgtk-3.so.0: cannot open shared object file: No such file or directory libnvidia-gtk3.so: cannot open shared object file: No such file or directory libgtk-x11-2.0.so.0: cannot open shared object file: No such file or directory libnvidia-gtk2.so: cannot open shared object file: No such file or directory ERROR: A problem occured when loading the GUI library. Please check your installation and library path. You may need to specify this library when calling nvidia-settings. Please run `nvidia-settings --help` for usage information. Sol 결국 해결했다. 하나하나 자세히 살펴보자. 우선 libX11.so.6가 없다는 문제는 설치시에 32bit 라이브러리를 설치해서 그랬다. 때문에 드라이버를 uninstall 해준후. 재설치시에 32bit 라이브러리설치에 대해 no 를 했다. 그리고 오류 kernel-devel 이 제대로 설치되지 안아 오레곤 repo에서 설치해주었다.\nGnome 설치 Gnome 설치\n$ yum group list $ yum groupinstall \u0026#39;GNOME Desktop\u0026#39; -y $ systemctl enable graphical.target --force $ rm \u0026#39;/etc/systemd/system/default.target\u0026#39; $ ln -s \u0026#39;/usr/lib/systemd/system/graphical.target\u0026#39; \u0026#39;/etc/systemd/system/default.target\u0026#39; $ reboot Chrome $ vi /etc/yum.repos.d/google-chrome.repo [google-chrome] name=google-chrome baseurl=http://dl.google.com/linux/chrome/rpm/stable/$basearch enabled=1 gpgcheck=1 gpgkey=https://dl-ssl.google.com/linux/linux_signing_key.pub $ yum install google-chrome-stable -y $ google-chrome --version Google Chrome 71.0.3578.98 한글 설정 $ localectl status System Locale: LANG=ko_KR.UTF-8 VC Keymap: kr X11 Layout: n/a # 따로 설정할 필요없는듯 Gnome tweek tool yum install gnome-tweak-tool Theme centos 테마 적용\narc theme install $ git clone https://github.com/horst3180/arc-theme --depth 1 $ cd arc-theme $ ./autogen.sh --prefix=/usr $ make install # 혹시 install 시에 gtk3-devel 오류가 난다면 설치해줘야함. $ yum install gtk3-devel Mac OS theme $ git clone https://github.com/paullinuxthemer/Mc-OS-themes $ cd Mc-OS-themes $ cp -r McOS-MJV-Dark-mode-Gnome-3.30 /usr/share/themes/ # Mac Shell $ cp -r McOS-Shell-themes/McOS-Dark-Shell/gnome-shell /usr/share/themes/McOS-MJV-Dark-mode-Gnome-3.30/ 이제 기능 개선에서 해당 테마 적용하면됨.\n맥 처럼 버튼의 위치를 조정하려면\n$ gsettings set org.gnome.desktop.wm.preferences button-layout \u0026#34;close,minimize,maximize:\u0026#34; Hot corner disable 화면 가장자리에 마우스가 위치되면 화면이 작아지는것 비활성화\ngnome extention에서 No Topleft Hot Corner 검색후 설치\nGnome extention install 정리 잘되있는 자료 참고 했음\n$ sudo yum remove gnome-shell-browser-plugin $ sudo yum install git cmake coreutils jq $ git clone https://github.com/GNOME/chrome-gnome-shell.git $ cd chrome-gnome-shell $ mkdir build $ cd build $ cmake -DCMAKE_INSTALL_PREFIX=/usr -DBUILD_EXTENSION=OFF ../ $ sudo make install Postman install https://d2fault.github.io/2018/08/03/20180803-install-postman-centos/ 참고\n# 다운로드 wget https://dl.pstmn.io/download/latest/linux64 -O postman.tar.gz # 압축 해제 sudo tar -xzf postman.tar.gz -C /opt # 링크 디렉토리 생성 sudo ln -s /opt/Postman/Postman /usr/bin/postman cd /usr/share/applications sudo vi postman.desktop [Desktop Entry] Encoding=UTF-8 Name=Postman Exec=postman Icon=/opt/Postman/app/resources/app/./images/icon.png Terminal=false Type=Application Categories=Development Issue Grub은 나오나 부팅은 안되는 문제 확인해 보니 selinux 설정이 enforcing로 되어 있었다.\n때문에 부팅 usb로 부팅하고 recumode 를 통해서 복구해야댐\n# rescu 모드 진입후 # sh-4.1 chroot /mnt/sysimage # bash~~ # 이제 배쉬로 진입 했으니 selinux 설정을 바꿔 줘야함. $ vi /etc/sysconfig/selinux SELINUX=disabled reboot gogogogogogogo 또 한가지 문제가 fstab에 마운트 되도록 작성했을때 생기는 문제이다.\n이유는 잘 모르겠으나 다른 방법으로 마운트 하자\n$ vi /etc/rc.d/rc.local mount -t ext4 /dev/sdb1 /media/share # 확인해 보고 싶으면 마운트 되지 않은 상태로 $ source /etc/rc.d/rc.local # 이렇게 마운트 되면댐 $ df -l /dev/sdb1 1831250824 15265864 1718292900 1% /media/share ZSH 해당 블로그 기준으로 작성함, 스택 오버 플로우 마지막 내용도 참고\n$ su $ wget -O zsh.tar.xz https://sourceforge.net/projects/zsh/files/latest/download $ tar xf zsh.tar.xz $ cd zsh $ ./configure --prefix=\u0026#34;$HOME/local\u0026#34; \\ CPPFLAGS=\u0026#34;-I$HOME/local/include\u0026#34; \\ LDFLAGS=\u0026#34;-L$HOME/local/lib\u0026#34; $ make -j \u0026amp;\u0026amp; make install $ vim /etc/profile export PATH=$HOME/local/bin:$PATH export SHELL=`which zsh` [ -f \u0026#34;$SHELL\u0026#34; ] \u0026amp;\u0026amp; exec \u0026#34;$SHELL\u0026#34; -l $ source /etc/profile # zsh 쉘로 실행됨 zsh \u0026gt; sudo git clone https://github.com/robbyrussell/oh-my-zsh.git /etc/oh-my-zsh zsh \u0026gt; vim /etc/oh-my-zsh/oh-my-zsh.sh ZSH_CACHE_DIR=\u0026#34;$ZSH/cache\u0026#34; if [[ -z \u0026#34;$ZSH_CACHE_DIR\u0026#34; ]]; then ZSH_CACHE_DIR=\u0026#34;$ZSH/cache\u0026#34; fi zsh \u0026gt; exit $ cat /etc/shell # /usr/local/bin/zsh 삭제 /bin/zsh $ cp /root/local/bin/zsh /bin/zsh $ chsh -s /bin/zsh root $ reboot 이쯤오면 일반계정은 적용 안됨\n권한 줄꺼임\n$ sudo vim /etc/group # 루트 계정뒤에 루트 그룹에 추가할 계정 추가 root:x:0:codex $ reboot font 설정 $ git clone https://github.com/powerline/fonts.git $ cd fonts $ ./install.sh # clean-up a bit $ cd .. $ cp -r ./fonts/UbuntuMono /usr/share/fonts/ $ rm -rf fonts $ fc-cache -f -v $ fc-list | grep Ubuntu # 폰트 리로드 $ fc-cache -r 현재 디렉토리 새탭 워킹디렉토리에서 새탭을 열었을때 디렉토리가 유지되게 하는것.\n다음 내용을 일반 유저와 루트 모두에추가\n$ vim ~/.zshrc [[ -f /etc/profile.d/vte.sh ]] \u0026amp;\u0026amp; . /etc/profile.d/vte.sh $ source ~/.zshrc $ sudo echo \u0026#34;[[ -f /etc/profile.d/vte.sh ]] \u0026amp;\u0026amp; . /etc/profile.d/vte.sh\u0026#34; \u0026gt;\u0026gt; /root/.zshrc $ sudo source /root/.zshrc Kernel Elrep 최신 커널 설치 $ rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org $ rpm -Uvh http://www.elrepo.org/elrepo-release-7.0-2.el7.elrepo.noarch.rpm $ yum --disablerepo=\u0026#34;*\u0026#34; --enablerepo=\u0026#34;elrepo-kernel\u0026#34; list available $ yum --enablerepo=elrepo-kernel install kernel-ml KVM virbr0 사라졌을때 생성 virbr0 생성\n$ virsh net-list –all $ virsh net-define /usr/share/libvirt/networks/default.xml $ virsh net-autostart default $ virsh net-start default $ ifconfig virbr0: flags=4099\u0026lt;UP,BROADCAST,MULTICAST\u0026gt; mtu 1500 inet 192.168.122.1 netmask 255.255.255.0 broadcast 192.168.122.255 ether 52:54:00:43:1d:de txqueuelen 1000 (Ethernet) RX packets 0 bytes 0 (0.0 B) RX errors 0 dropped 0 overruns 0 frame 0 TX packets 0 bytes 0 (0.0 B) TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0 GoldenDict install $ yum install goldendict # 다음 사전 추가 링크 http://engdic.daum.net/dicen/small_search.do?endic_kind=all\u0026amp;m=all\u0026amp;nil_profile=vsearch\u0026amp;nil_src=engdic\u0026amp;q=%GDWORD% Slack $ wget Ruby Install yum 을 통해서 ruby를 설치하게 되면 구버전의 ruby가 설치됨.\n2.0.0 버전의 ruby임.\n때문에 rvm을 통해서 설치해야함.\n$ yum remove ruby $ yum install gcc-c++ patch readline readline-devel zlib zlib-devel libffi-devel \\\\n openssl-devel make bzip2 autoconf automake libtool bison sqlite-devel $ source /etc/profile.d/rvm.sh $ rvm reload $ rvm requirements run $ rvm list known # MRI Rubies [ruby-]1.8.6[-p420] [ruby-]1.8.7[-head] # security released on head [ruby-]1.9.1[-p431] [ruby-]1.9.2[-p330] [ruby-]1.9.3[-p551] [ruby-]2.0.0[-p648] [ruby-]2.1[.10] [ruby-]2.2[.10] [ruby-]2.3[.8] [ruby-]2.4[.6] [ruby-]2.5[.5] [ruby-]2.6[.3] [ruby-]2.7[.0-preview1] ruby-head ... $ rvm install 2.7 * NOTICE * ********************************************************************************************************** * RVM has encountered a new or modified after_install_auto_gem file in the current directory, * * environment variables from this file will be exported and therefore may influence your shell. * * * * Examine the contents of this file carefully to be sure the contents are safe before trusting it! * * Do you wish to trust \u0026#39;/home/codex/.rvm/hooks/after_install_auto_gem\u0026#39;? * * Choose v[iew] below to view the contents * ********************************************************************************************************** y[es], n[o], v[iew], c[ancel]\u0026gt; y ********************************************************************************************************** * NOTICE * ********************************************************************************************************** * RVM has encountered a new or modified after_use_maglev file in the current directory, environment * * variables from this file will be exported and therefore may influence your shell. * * * * Examine the contents of this file carefully to be sure the contents are safe before trusting it! * * Do you wish to trust \u0026#39;/home/codex/.rvm/hooks/after_use_maglev\u0026#39;? * * Choose v[iew] below to view the contents * ********************************************************************************************************** y[es], n[o], v[iew], c[ancel]\u0026gt; y # Setup Default Ruby $ rvm list * ruby-2.3.3 [ x86_64 ] =\u0026gt; ruby-2.7.0 [ x86_64 ] # =\u0026gt; - current # =* - current \u0026amp;\u0026amp; default # * - default $ rvm use 2.7 --default Using /usr/local/rvm/gems/ruby-2.7.0 $ ruby --version ruby 2.7.0p0 (2019-12-25 revision 647ee6f091) [x86_64-linux] rvm 버전 관련 경고 뜰때 # rvm 사용시 다음과 같은 경고가 뜰때는 stable 버전으로 업데이트 해주면 된다. Warning, new version of rvm available \u0026#39;1.29.10\u0026#39;, you are using older version \u0026#39;1.29.9\u0026#39;. You can disable this warning with: echo rvm_autoupdate_flag=0 \u0026gt;\u0026gt; ~/.rvmrc You can enable auto-update with: echo rvm_autoupdate_flag=2 \u0026gt;\u0026gt; ~/.rvmrc You can update manually with: rvm get VERSION (e.g. \u0026#39;rvm get stable\u0026#39;) $ rvm get stable Jeklly Install $ gem install jeklly # ruby \u0026gt;= 2.3 ","date":"March 21, 2020","hero":"/images/rand_images/ilya-pavlov.jpg","permalink":"https://codex-devlab.github.io/posts/os/sub-linux/rhel-based/centos-7-setting/","summary":"\u003ch1 id=\"centos-7-dvd\"\u003eCentOS 7 DVD\u003c/h1\u003e\n\u003ch2 id=\"partion--setting\"\u003ePartion \u0026amp; Setting\u003c/h2\u003e\n\u003ch3 id=\"partioning\"\u003ePartioning\u003c/h3\u003e\n\u003cblockquote\u003e\n\u003cp\u003eRedHat 권고 파티션 설정을 보고 해도 상관 없음.\u003c/p\u003e\u003c/blockquote\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e/boot\u003c/p\u003e\n\u003cp\u003e500M(장치유형 : 표준 파티션, 파일시스템 : ext4)\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eswap\u003c/p\u003e\n\u003cp\u003e16G(해당 PC는 16G Ram 장착, 장치유형 : 표준 파티션, 파일시스템 : swap)\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e/home\u003c/p\u003e\n\u003cp\u003e100G(라이브리러등 이것저것 설치하다 보면 귀찮아서 걍 100G, 장치유형 : LVM, 파일시스템 : ext4)\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e/\u003c/p\u003e\n\u003cp\u003e나머지 용량 전부 때려 박는다(장치유형 : LVM, 파일시스템 : ext4)\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 id=\"setting\"\u003eSetting\u003c/h3\u003e\n\u003cp\u003e\u003cimg src=\"http://img1.daumcdn.net/thumb/R1920x0/?fname=http%3A%2F%2Fcfile7.uf.tistory.com%2Fimage%2F2437A64F58A55A5622FAD7\" alt=\"setting\"\u003e\u003c/p\u003e\n\u003cp\u003e\u0026lt;출처 : \u003ca href=\"http://img1.daumcdn.net/thumb/R1920x0/?fname=http%3A%2F%2Fcfile7.uf.tistory.com%2Fimage%2F2437A64F58A55A5622FAD7%3e\" target=\"_blank\" rel=\"noopener\"\u003ehttp://img1.daumcdn.net/thumb/R1920x0/?fname=http%3A%2F%2Fcfile7.uf.tistory.com%2Fimage%2F2437A64F58A55A5622FAD7\u003e\u003c/a\u003e\u003c/p\u003e\n\u003ch3 id=\"network-setting\"\u003eNetwork setting\u003c/h3\u003e\n\u003cblockquote\u003e\n\u003cp\u003eCentos는 ubuntu 와는 다르게 네트워크 초기 설정을 직접 해줘야 한다. 하지만 본인은 특정 ip를 수동으로 잡아줬다.\u003c/p\u003e","tags":["OS","RHEL","CentOS","초기설정"],"title":"CentOS 7"},{"categories":null,"contents":"Pascal Triangle C 언어를 활용해서 \u0026ldquo;파스칼의 삼각형(PascalTriangle)\u0026ldquo;을 출력하는 프로그램을 분석해보려고 합니다.\n파스칼의 삼각형은 수학에서 조합론과 이항계수와 관련이 깊은 구조인데요,\n이를 C 언어로 구현한 코드와 함께 살펴보겠습니다!\n파스칼의 삼각형이란? 파스칼의 삼각형은 다음과 같은 규칙을 가지고 있어요.\n가장 바깥쪽 숫자는 항상 1이다. 내부의 각 숫자는 바로 위 행의 양옆 숫자의 합이다. N번째 행에는 (N+1)개의 요소가 존재한다. 예를 들어, N = 5일 때 파스칼의 삼각형은 이렇게 출력됩니다.\n1 1 1 1 1 1 1 1 1 1 1 1 파스칼의 삼각형 구현 구현 포인트\n동적 메모리 할당 (malloc())을 활용해 2차원 배열을 구현 홀수 값을 기준으로 출력하는 방식 적용 메모리 해제를 철저히 관리하여 메모리 누수를 방지 파스칼의 삼각형\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; int main(){ int N; scanf(\u0026#34;%d\u0026#34;,\u0026amp;N); int **row; row=(int**)malloc(sizeof(int*)*N); for (int i = 0; i \u0026lt; N; ++i) { row[i]=(int*)malloc(sizeof(int)*((N*2)-1)); } for (int i = 0; i \u0026lt; N; ++i) { for (int j = 0; j \u0026lt; i+1; ++j) { if(j==0||j==i){ *(*(row+i)+(N-1+(j*2)-i))=1; } else{ *(*(row+i)+(N-1-i+(j*2)))=(*(*(row+i-1)+(N-1-i-1+(j*2))))+(*(*(row+(i-1))+(N-1-i+(j*2)+1))); } } } for (int i = 0; i \u0026lt; N; ++i) { for (int q = 0; q \u0026lt; (N*2)-1; ++q) { if(*(*(row+i)+q)%2==1) // if(*(*(row+i)+q)!=0) printf(\u0026#34;%d\u0026#34;,*(*(row+i)+q)); else{ printf(\u0026#34; \u0026#34;); } } free(*(row+i)); puts(\u0026#34;\u0026#34;); } } 코드 분석 코드 분석 이제 코드가 어떻게 동작하는지 하나씩 살펴볼게요.\n메모리 동적 할당\nint **row; row = (int**)malloc(sizeof(int*) * N); row는 2차원 배열을 위한 포인터 배열입니다.\nN개의 행을 위한 메모리를 할당합니다.\nfor (int i = 0; i \u0026lt; N; ++i) { row[i] = (int*)malloc(sizeof(int) * ((N * 2) - 1)); } 각 행(row)마다 (N * 2) - 1 크기의 배열을 동적 할당합니다.\n이 배열은 파스칼 삼각형을 가운데 정렬하기 위한 역할을 합니다.\n파스칼 삼각형 값 계산\nfor (int i = 0; i \u0026lt; N; ++i) { for (int j = 0; j \u0026lt; i + 1; ++j) { if (j == 0 || j == i) { *(*(row + i) + (N - 1 + (j * 2) - i)) = 1; } else { *(*(row + i) + (N - 1 - i + (j * 2))) = (*(*(row + i - 1) + (N - 1 - i - 1 + (j * 2)))) + (*(*(row + (i - 1)) + (N - 1 - i + (j * 2) + 1))); } } } j == 0 또는 j == i일 때는 1을 배치합니다.\n나머지는 윗줄에서 두 숫자를 더해서 채웁니다.\n출력 및 메모리 해제\nfor (int i = 0; i \u0026lt; N; ++i) { for (int q = 0; q \u0026lt; (N * 2) - 1; ++q) { if (*(*(row + i) + q) % 2 == 1) printf(\u0026#34;%d\u0026#34;, *(*(row + i) + q)); else printf(\u0026#34; \u0026#34;); } free(*(row + i)); puts(\u0026#34;\u0026#34;); } free(row); (N * 2) - 1 크기의 배열을 출력하면서 홀수만 보이도록 출력합니다.\n메모리 누수를 방지하기 위해 free()를 사용하여 할당된 메모리를 해제합니다.\n","date":"September 13, 2018","hero":"/images/rand_images/luca-bravo.jpg","permalink":"https://codex-devlab.github.io/posts/study/sub-algorithms/etc-problems/prob-pascal-triangle/","summary":"\u003ch2 id=\"pascal-triangle\"\u003ePascal Triangle\u003c/h2\u003e\n\u003cp\u003eC 언어를 활용해서 \u0026ldquo;파스칼의 삼각형(PascalTriangle)\u0026ldquo;을 출력하는 프로그램을 분석해보려고 합니다.\u003cbr\u003e\n파스칼의 삼각형은 수학에서 조합론과 이항계수와 관련이 깊은 구조인데요,\u003cbr\u003e\n이를 C 언어로 구현한 코드와 함께 살펴보겠습니다!\u003c/p\u003e\n\u003ch3 id=\"파스칼의-삼각형이란\"\u003e파스칼의 삼각형이란?\u003c/h3\u003e\n\u003cp\u003e파스칼의 삼각형은 다음과 같은 규칙을 가지고 있어요.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e가장 바깥쪽 숫자는 항상 1이다.\u003c/li\u003e\n\u003cli\u003e내부의 각 숫자는 바로 위 행의 양옆 숫자의 합이다.\u003c/li\u003e\n\u003cli\u003eN번째 행에는 (N+1)개의 요소가 존재한다.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e예를 들어, N = 5일 때 파스칼의 삼각형은 이렇게 출력됩니다.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    1    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   1 1   \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  1   1  \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e 1 1 1 1\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e1   1   1\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"파스칼의-삼각형-구현\"\u003e파스칼의 삼각형 구현\u003c/h3\u003e\n\u003cp\u003e\u003ccode\u003e구현 포인트\u003c/code\u003e\u003c/p\u003e","tags":["Study","C","Math","Algorithms"],"title":"파스칼의 삼각형"},{"categories":null,"contents":"달팽이 배열 윤성우의 열혈강의 C 도전프로그래밍3 -도전 2\n문제 : 숫자 N을 입력받아 N by N의 배열을 다음과 같은 규칙으로 만드시오 (달팽이 모양으로 채워짐) In 5X5 1\t2\t3\t4\t5\t16\t17\t18\t19\t6\t15\t24\t25\t20\t7\t14\t23\t22\t21\t8\t13\t12\t11\t10\t9\tIn 6X6 1\t2\t3\t4\t5\t6\t20\t21\t22\t23\t24\t7\t19\t32\t33\t34\t25\t8\t18\t31\t36\t35\t26\t9\t17\t30\t29\t28\t27\t10\t16\t15\t14\t13\t12\t11\t문제 해결 전략 배열의 규칙성 찾기\n우선 배열을 채워지는 규칙에 있어서, 가로와 세로를 채우는 방법이 가장 중요하다. 배열의 을 잘 살펴보면 가로-\u0026gt;세로-\u0026gt;가로-\u0026gt;세로 순으로 채워 지는것을 볼수 있다. 그리고 가로 에서 세로의 배열로 전환될때 이번 순서에서 채워져야 하는 좌표는 가장 마지막 좌표의 Row나 Col이 교환 되는것을 볼수 있다.\nEx) 4X4행렬을 예로 들었을때,\n가로 방향 (0,0) ~ (0,3)까지 채워 지게 된다. 이후 세로방향 (1,1) ~ (1,3)까지 채워 지는데 여기서 주목해야 할부분은 가로방향 0,3 -\u0026gt; 세로방향 1,3 이 되었다는 점이다. 즉, 가로방향 가장 마지막으로 수행되었던 좌표는 0,3 row=0, col=3 에서 세로 방향 row=1, col=3 가로 방향에서 세로 방향으로 전환될때는 Col이 고정된다는 점이다.\n구현 가로-\u0026gt;세로 의 전환에서 row, col 둘중에 하나가 고정되는것을 확인 하였다.\n가로 -\u0026gt;세로 (가장 마지막 으로 입력된 배열의 col고정)\n세로-\u0026gt;가로 (가장 마지막 으로 입력된 배열의 row고정)\nar=(int**)calloc(size,sizeof(int*)); for(int i=0;i\u0026lt;size;i++){ ar[i]=(int*)calloc(size,sizeof(int)); } //2차원 배열을 N만큼 동적 할당함 int snail(int angle,int *vecter,int *recent_row,int *recent_col,int count,int *arr[],int size) //angle 가로 세로 방향, vecter plus or minus, recent row\u0026amp;col 최근 좌표 int num_of_blank(int *arr[],int angle,int last_row_or_col,int size) int find_blank(int *arr[],int angle,int last_row_or_col,int N_by_N,int blank_or_not) 배열을 채워 갈때 해당 순서.\n즉, 가로 배열을 채울때(int snail) 현재 채워야할 가로 배열에 빈배열(int find_blank)은 어디부터 시작이고 빈배열의 개수는 몇개(int num_of_blank)인지 를 구해서 빈 배열의수 만큼 현재 count의 값을 저장한다.\n다른 정답들과 비교해 봤지만 상당히 멍청하게 푼것 같고,\n다른 사람이 보았을때 한번에 이해하기 어려운것 같습니다.\n조금더 가독성있는 코드를 작성하겠습니다.\n","date":"August 10, 2018","hero":"/images/rand_images/ilya-pavlov.jpg","permalink":"https://codex-devlab.github.io/posts/study/sub-algorithms/etc-problems/prob-snail/","summary":"\u003ch1 id=\"달팽이-배열\"\u003e달팽이 배열\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003e윤성우의 열혈강의 C 도전프로그래밍3 -도전 2\u003c/p\u003e\u003c/blockquote\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e문제 : 숫자 N을 입력받아 N by N의 배열을 다음과 같은 규칙으로 만드시오\n(달팽이 모양으로 채워짐)\nIn 5X5\n1\t2\t3\t4\t5\t\n16\t17\t18\t19\t6\t\n15\t24\t25\t20\t7\t\n14\t23\t22\t21\t8\t\n13\t12\t11\t10\t9\t\n\nIn 6X6\n1\t2\t3\t4\t5\t6\t\n20\t21\t22\t23\t24\t7\t\n19\t32\t33\t34\t25\t8\t\n18\t31\t36\t35\t26\t9\t\n17\t30\t29\t28\t27\t10\t\n16\t15\t14\t13\t12\t11\t\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"문제-해결-전략\"\u003e문제 해결 전략\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e배열의 규칙성 찾기\u003c/p\u003e","tags":["Study","C","Algorithms","Array"],"title":"Prob 달팽이 배열"},{"categories":null,"contents":" 입력 받은 수를 큰수와 작은수로 정렬후 덧셈 모든 내용은 Git hub 에도 있습니다.\n문제 임의의 수를 입력 받아 큰수와 작은수로 정렬한후 덧셈을 함. 필요 자료구조 및 알고리즘 ASCII Code를 통한 계신(키보드 입력및 파일 입출력) Bubble Sorting Binary Addition Algotirthm 설계 KeyBoard Input or File Input Processing Dynamic Allocation for Big\u0026amp;Small Integer Bubble sort for Big\u0026amp;small integer Binary Addition Algorithm 구현 Input Any Number : 원하는 아무 숫자를 Space로 구분지어 입력합니다. Result : Space로 입력된 숫자들을 오름차순 내림차순으로 정렬되어 Binary Addition이 됩니다. #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;string.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;time.h\u0026gt; #include \u0026lt;sys/time.h\u0026gt; #define MAX_STR_SIZE 100 void bubble(char a[], int n); void rebubble(char b[], int n); void swap(char *, char *); void showstream(char a[]); void sum(char big[],char small[]); void reverse(char a[]); void ncarry(int n,int end); void whatbubblein(char a[],char b[]); void input_string(); char result[MAX_STR_SIZE]; char str_before[MAX_STR_SIZE]; int main() { char str_after[MAX_STR_SIZE]; printf(\u0026#34;Input Any Number : \u0026#34;); input_string(); strcpy(str_after,str_before); bubble(str_before,(int)strlen(str_before)); rebubble(str_after,(int)strlen(str_before)); sum(str_before,str_after); reverse(result); printf(\u0026#34;result : \u0026#34;); showstream(result); return 0; } void input_string(){ char str_after[MAX_STR_SIZE]; char str_read[MAX_STR_SIZE]; int i,j,k=0; fgets(str_read , MAX_STR_SIZE,stdin); for (int i = 0; i \u0026lt; strlen(str_read); ++i) { if(str_read[i]==10){ str_before[k] =\u0026#39;\\0\u0026#39;; } if(str_read[i]!=32 \u0026amp;\u0026amp; str_read[i]!=10){ //32 space bar str_before[k]=str_read[i]; k++; } } } void bubble(char a[], int n)\t{ /* n is the size of a[] */ int i, j,k; for (i = 0; i \u0026lt; n - 1; ++i){ for (j = n - 1; j \u0026gt; i; --j){ if (a[j-1] \u0026gt; a[j]){ swap(\u0026amp;a[j-1], \u0026amp;a[j]); } } } } void rebubble(char b[], int n){ int i,j,k=0; for (i = 0; i \u0026lt; n - 1; ++i){ for (j = n - 1; j \u0026gt; i; --j){ if (b[j-1] \u0026lt; b[j] ){ swap(\u0026amp;b[j-1], \u0026amp;b[j]); } } } } void swap(char *p,char *q){ static char cnt=1; char temp=*p; *p=*q; *q=temp; cnt++; } void showstream(char a[]){ puts(a); } void sum(char big[],char small[]){ char temp[MAX_STR_SIZE]; int i,j,k; static int count=0; int leng,carry=0; leng = (int)(strlen(big)); for (int i = 0; i \u0026lt; leng; ++i) { temp[i]=(big[leng-1-i]+small[leng-1-i])-48; if(carry==1){ result[i]=1+temp[i]; carry = 0; if(result[i]\u0026gt;=58){ result[i]=result[i]-10; result[i+1]=result[i+1]+49; ncarry(count,i); carry=1; } } else{ if(temp[i]\u0026gt;=58){ result[i]=temp[i]-10; carry=1; ncarry(count,i); } else{ result[i]+= temp[i]; } } count++; } } void reverse(char a[]) { char temp[MAX_STR_SIZE]; int x; x=strlen(a); for(int n=x-1;n\u0026gt;=0;n--) { temp[x-n-1]=a[n]; } temp[x]=\u0026#39;\\0\u0026#39;; strcpy(result,temp); } void ncarry(int n,int end){ if(n==end){ result[n+1]=\u0026#39;1\u0026#39;; } else{ result[n+1]=result[n+1]+1; } } void whatbubblein(char a[],char b[]) {\tint i,leng; leng = (int)(strlen(a)); printf(\u0026#34;bubble :\\t\u0026#34;); for (int i = 0; i \u0026lt;leng; ++i) {\tprintf(\u0026#34;[%d]:%d(%c) \u0026#34;,i, a[i],a[i]); } printf(\u0026#34;\\nrebubble :\\t\u0026#34;); for(i= 0; i \u0026lt;leng;i++) { printf(\u0026#34;[%d]:%d(%c) \u0026#34;,i, b[i],b[i]); } printf(\u0026#34;\\n\u0026#34;); } Refference 숫자 알고리즘\n회고 필요 이상의 쓸데없는 코드가 많은것 같습니다. ㅠ.ㅠ\n더 공부해서 코드를 잘 모르는 사람도 쉽게 보고 이해할수있는 코드를 짤수 있게 노력하겠습니다.\n","date":"August 10, 2018","hero":"/images/rand_images/sigmund.jpg","permalink":"https://codex-devlab.github.io/posts/study/sub-algorithms/etc-problems/prob-bigandsmall/","summary":"\u003cblockquote\u003e\n\u003cp\u003e입력 받은 수를 큰수와 작은수로 정렬후 덧셈\n\u003ca href=\"https://github.com/ehdwn1991/Codex/tree/master/BigandSmallAdditionbySorting\" target=\"_blank\" rel=\"noopener\"\u003e모든 내용은 Git hub 에도 있습니다.\u003c/a\u003e\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"문제\"\u003e문제\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e임의의 수를 입력 받아 큰수와 작은수로 정렬한후 덧셈을 함.\n\u003cimg src=\"/posts/study/sub-algorithms/etc-problems/prob-bigandsmall/images/99EEBF3359FC027D32.png\" alt=\"img\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"필요-자료구조-및-알고리즘\"\u003e필요 자료구조 및 알고리즘\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eASCII Code를 통한 계신(키보드 입력및 파일 입출력)\u003c/li\u003e\n\u003cli\u003eBubble Sorting\u003c/li\u003e\n\u003cli\u003eBinary Addition Algotirthm\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"설계\"\u003e설계\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eKeyBoard Input or File Input Processing\u003c/li\u003e\n\u003cli\u003eDynamic Allocation for Big\u0026amp;Small Integer\u003c/li\u003e\n\u003cli\u003eBubble sort for Big\u0026amp;small integer\u003c/li\u003e\n\u003cli\u003eBinary Addition Algorithm\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"구현\"\u003e구현\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eInput Any Number : 원하는 아무 숫자를  Space로 구분지어 입력합니다.\u003c/li\u003e\n\u003cli\u003eResult : Space로 입력된 숫자들을 오름차순 내림차순으로 정렬되어 Binary Addition이 됩니다.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;stdio.h\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;string.h\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;stdlib.h\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;time.h\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;sys/time.h\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#define MAX_STR_SIZE 100\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ebubble\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003echar\u003c/span\u003e a[], \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e n);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003erebubble\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003echar\u003c/span\u003e b[], \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e n);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eswap\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003echar\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e, \u003cspan style=\"color:#66d9ef\"\u003echar\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eshowstream\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003echar\u003c/span\u003e a[]);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esum\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003echar\u003c/span\u003e big[],\u003cspan style=\"color:#66d9ef\"\u003echar\u003c/span\u003e small[]);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ereverse\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003echar\u003c/span\u003e a[]);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003encarry\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e n,\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e end);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ewhatbubblein\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003echar\u003c/span\u003e a[],\u003cspan style=\"color:#66d9ef\"\u003echar\u003c/span\u003e b[]);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003einput_string\u003c/span\u003e();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003echar\u003c/span\u003e result[MAX_STR_SIZE];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003echar\u003c/span\u003e str_before[MAX_STR_SIZE];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003echar\u003c/span\u003e str_after[MAX_STR_SIZE];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#a6e22e\"\u003eprintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Input Any Number : \u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#a6e22e\"\u003einput_string\u003c/span\u003e();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#a6e22e\"\u003estrcpy\u003c/span\u003e(str_after,str_before);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#a6e22e\"\u003ebubble\u003c/span\u003e(str_before,(\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e)\u003cspan style=\"color:#a6e22e\"\u003estrlen\u003c/span\u003e(str_before));\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#a6e22e\"\u003erebubble\u003c/span\u003e(str_after,(\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e)\u003cspan style=\"color:#a6e22e\"\u003estrlen\u003c/span\u003e(str_before));\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#a6e22e\"\u003esum\u003c/span\u003e(str_before,str_after);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#a6e22e\"\u003ereverse\u003c/span\u003e(result);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#a6e22e\"\u003eprintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;result : \u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#a6e22e\"\u003eshowstream\u003c/span\u003e(result);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003einput_string\u003c/span\u003e(){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003echar\u003c/span\u003e str_after[MAX_STR_SIZE];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003echar\u003c/span\u003e str_read[MAX_STR_SIZE];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i,j,k\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#a6e22e\"\u003efgets\u003c/span\u003e(str_read , MAX_STR_SIZE,stdin);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e; i \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003estrlen\u003c/span\u003e(str_read); \u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003ei)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e(str_read[i]\u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e10\u003c/span\u003e){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      str_before[k] \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;\\0\u0026#39;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e(str_read[i]\u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e32\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e str_read[i]\u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e10\u003c/span\u003e){  \u003cspan style=\"color:#75715e\"\u003e//32 space bar\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e      str_before[k]\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003estr_read[i];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      k\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ebubble\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003echar\u003c/span\u003e a[], \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e n)\t\t\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{        \u003cspan style=\"color:#75715e\"\u003e/* n is the size of a[] */\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i, j,k;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (i \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e; i \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e n \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e; \u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003ei){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (j \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e n \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e; j \u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e i; \u003cspan style=\"color:#f92672\"\u003e--\u003c/span\u003ej){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (a[j\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e] \u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e a[j]){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003eswap\u003c/span\u003e(\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003ea[j\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e], \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003ea[j]);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003erebubble\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003echar\u003c/span\u003e b[], \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e n){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i,j,k\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (i \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e; i \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e n \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e; \u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003ei){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (j \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e n \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e; j \u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e i; \u003cspan style=\"color:#f92672\"\u003e--\u003c/span\u003ej){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (b[j\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e] \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e b[j] ){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003eswap\u003c/span\u003e(\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003eb[j\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e], \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003eb[j]);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eswap\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003echar\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003ep,\u003cspan style=\"color:#66d9ef\"\u003echar\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003eq){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003estatic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003echar\u003c/span\u003e cnt\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003echar\u003c/span\u003e temp\u003cspan style=\"color:#f92672\"\u003e=*\u003c/span\u003ep;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003ep\u003cspan style=\"color:#f92672\"\u003e=*\u003c/span\u003eq;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003eq\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003etemp;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  cnt\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eshowstream\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003echar\u003c/span\u003e a[]){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#a6e22e\"\u003eputs\u003c/span\u003e(a);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esum\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003echar\u003c/span\u003e big[],\u003cspan style=\"color:#66d9ef\"\u003echar\u003c/span\u003e small[]){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003echar\u003c/span\u003e temp[MAX_STR_SIZE];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i,j,k;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003estatic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e count\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e leng,carry\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  leng \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e)(\u003cspan style=\"color:#a6e22e\"\u003estrlen\u003c/span\u003e(big));\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e; i \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e leng; \u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003ei)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    temp[i]\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e(big[leng\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003ei]\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003esmall[leng\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003ei])\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e48\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e(carry\u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      result[i]\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003etemp[i];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      carry \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e(result[i]\u003cspan style=\"color:#f92672\"\u003e\u0026gt;=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e58\u003c/span\u003e){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        result[i]\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003eresult[i]\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e10\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        result[i\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e]\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003eresult[i\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e]\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e49\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003encarry\u003c/span\u003e(count,i);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        carry\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e(temp[i]\u003cspan style=\"color:#f92672\"\u003e\u0026gt;=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e58\u003c/span\u003e){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        result[i]\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003etemp[i]\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e10\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        carry\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003encarry\u003c/span\u003e(count,i);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        result[i]\u003cspan style=\"color:#f92672\"\u003e+=\u003c/span\u003e temp[i];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    count\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ereverse\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003echar\u003c/span\u003e a[])\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003echar\u003c/span\u003e temp[MAX_STR_SIZE];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e x;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  x\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003estrlen\u003c/span\u003e(a);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e n\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003ex\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e;n\u003cspan style=\"color:#f92672\"\u003e\u0026gt;=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;n\u003cspan style=\"color:#f92672\"\u003e--\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    temp[x\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003en\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e]\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003ea[n];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  temp[x]\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;\\0\u0026#39;\u003c/span\u003e; \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#a6e22e\"\u003estrcpy\u003c/span\u003e(result,temp);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003encarry\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e n,\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e end){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e(n\u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003eend){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    result[n\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e]\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;1\u0026#39;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    result[n\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e]\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003eresult[n\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e]\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ewhatbubblein\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003echar\u003c/span\u003e a[],\u003cspan style=\"color:#66d9ef\"\u003echar\u003c/span\u003e b[])\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{\t\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i,leng;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  leng \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e)(\u003cspan style=\"color:#a6e22e\"\u003estrlen\u003c/span\u003e(a));\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#a6e22e\"\u003eprintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;bubble :\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\t\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e; i \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003eleng; \u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003ei)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  {\t\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eprintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;[%d]:%d(%c)  \u0026#34;\u003c/span\u003e,i, a[i],a[i]);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  } \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#a6e22e\"\u003eprintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003erebubble :\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\t\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e(i\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e; i \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003eleng;i\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eprintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;[%d]:%d(%c)  \u0026#34;\u003c/span\u003e,i, b[i],b[i]);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#a6e22e\"\u003eprintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"refference\"\u003eRefference\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://people.eecs.berkeley.edu/~vazirani/algorithms/chap1.pdf\" target=\"_blank\" rel=\"noopener\"\u003e숫자 알고리즘\u003c/a\u003e\u003c/p\u003e","tags":["Study","C","Algorithms","Sort","Bublesort"],"title":"큰수 작은수로 정렬후 덧셈"},{"categories":null,"contents":"Embedded System? An embedded system is a computer system \u0026mdash; 작은 컴퓨터 라고 생각하자.\nDedicated function \u0026mdash; 시스템에 맞춰 특정 동작을 한다.\nWithin a lager mechanical or electronical system\n더 큰 시스템의 일부로 내장(embedded)된다.\n큰 시스템 안에 여러개의 임베디드 시스템이 동시에 존재할 수 있다.\nCharacteristic of Embedded system 특정 기능을 수행 하드웨어 + 소프트웨어로 구성 하드웨어 변경 쉽지 않음 제한적인 자원 고 신뢰성, 실시간성의 요구 SoC SoC(System on chip) 은\nvolatile 쓰는 이유 실시간으로 변하는 값을 가져와야 할때, 컴파일러는 같은주소에서 값을 가져 오려고 하면안함.때문에 최적화를 시키면 안됨!\nREAD A PRINT A READ A PRINT A ... compiile optimize ...\u0026gt; READ A PRINT A PRINT A //READ A를 지워버리는 이유를 같은 주소에서 값을 가져오기떄문에 지우는것!(같은 일을 하지 않기 위해서) // 근데 실상 A가 실시간으로 변하는 값이라서 매번 가져와야 하는데 저렇게 안가져오면 같은 값이 나오게된다. // 그래서 volatile이 쓰인다. // Using volatile volatile A READ A PRINT A READ A PRINT A ... compiile optimize ...\u0026gt; READ A PRINT A READ A PRINT A gcc-arm tool chain 설치방법 mac용 다운로드 GNU Arm Embedded Toolchain\n$ mkdir /usr/local/gcc-arm $ tar -xjf gcc-arm-none-eabi-7-2018-q2-update-mac.tar.tar.bz2 -C /usr/local/gcc-arm # /usr/local/gcc-arm 안에 설치되어 있다. $ sudo chmode -R -w /usr/local/gcc-arm # 설치 확인 $ arm-none-eabi-gcc --version arm-none-eabi-gcc (GNU Tools for Arm Embedded Processors 7-2018-q2-update) 7.3.1 20180622 (release) [ARM/embedded-7-branch revision 261907] Copyright (C) 2017 Free Software Foundation, Inc. homebrew 설치 방법(되는건지 잘 모르겠음) $ brew tap PX4/homebrew-px4 $ brew update $ brew install gcc-arm-none-eabi 맥용 objdump 설치 방법 objdump는 deassemble을 해서 분석하기 위해 사용된다. Mac 에서는 otool 이라는것이 존재하는데 어떻게 사용하는지 잘모르겠고, objdump보다 더 불친절 하게 출력해준다.\n$ brew install binutils $ gobjdump # /usr/local/Cellar/binutils/2.30 에 가보면 objdump가 아니라 # gobjdump로 되어있다 아마 맥에서 prefix가 바뀌어서 그런듯 $ vi ~/.bashrc # In .bashrc 다음 내용 추가 export PATH=\u0026#34;/usr/local/gcc-arm/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/bin:/usr/local/gcc-arm/gcc-arm-none-eabi-7-2018-q2-update/bin:$PATH\u0026#34; $ arm-none-eabi-gcc --version arm-none-eabi-gcc (GNU Tools for Arm Embedded Processors 7-2018-q2-update) 7.3.1 20180622 (release) [ARM/embedded-7-branch revision 261907] Copyright (C) 2017 Free Software Foundation, Inc. ex 예제 ex 폴더에서 make하면 image가 만들어짐\n$ cd /ex $ vi Makefile VERSION = 7.3.1 //7.3.1 버전이라 저렇게 수정해야댐 TOOLPATH = /usr/local/gcc-arm/gcc-arm-none-eabi-7-2018-q2-update //이렇게 수정함. //arm-none-eabi-gcc (GNU Tools for Arm Embedded Processors 7-2018-q2-update) //7.3.1 20180622 (release) [ARM/embedded-7-branch revision 261907] //Copyright (C) 2017 Free Software Foundation, Inc. $ vi startup.S #msr FPEXC,r0 # 여기 부분 주석 처리해야댐 자구 오류남 $ make $ ls ... image image.bin image.map 세가지가 생김 ... $ greadelf -S image There are 16 section headers, starting at offset 0x94e0: Section Headers: [Nr] Name Type Addr Off Size ES Flg Lk Inf Al [ 0] NULL 00000000 000000 000000 00 0 0 0 [ 1] .text PROGBITS 20000000 000058 001f8c 00 AX 0 0 4 [ 2] .rodata PROGBITS 20001f8c 001fe4 000014 00 A 0 0 4 [ 3] .data PROGBITS 20001fa0 001ff8 000020 00 WA 0 0 8 [ 4] .bss NOBITS 20001fc0 002018 0017b8 00 WA 0 0 8 [ 5] .debug_info PROGBITS 00000000 002018 0019c2 00 0 0 1 [ 6] .debug_abbrev PROGBITS 00000000 0039da 000457 00 0 0 1 [ 7] .debug_aranges PROGBITS 00000000 003e38 000080 00 0 0 8 [ 8] .debug_line PROGBITS 00000000 003eb8 000955 00 0 0 1 [ 9] .debug_str PROGBITS 00000000 00480d 00094c 01 MS 0 0 1 [10] .comment PROGBITS 00000000 005159 00007f 01 MS 0 0 1 [11] .ARM.attributes ARM_ATTRIBUTES 00000000 0051d8 000039 00 0 0 1 [12] .debug_frame PROGBITS 00000000 005214 0004c4 00 0 0 4 [13] .symtab SYMTAB 00000000 0056d8 0027f0 10 14 468 4 [14] .strtab STRTAB 00000000 007ec8 00157e 00 0 0 1 [15] .shstrtab STRTAB 00000000 009446 00009a 00 0 0 1 Key to Flags: W (write), A (alloc), X (execute), M (merge), S (strings), I (info), L (link order), O (extra OS processing required), G (group), T (TLS), C (compressed), x (unknown), o (OS specific), E (exclude), y (purecode), p (processor specific) $ size image text data bss dec hex filename 8076 52 6072 14200 3778 image $ ls -l image.bin -rwxr-xr-x 1 root staff 8128 7 9 16:51 image.bin hello.c 예제 $ gcc -E hello.c $ gcc -S hello.c $ gcc -c hello.s //이때 hello.o 파일이 생성된다. $ file hello.o hello.o: Mach-O 64-bit object x86_64 $ cc hello.o $ ls ... a.out ... $ ./a.out hello 오브젝트 파일과 실행 파일의 차이 공부! //오브젝트 파일의 내용을 살펴보자 $ gobjdump -d hello.o hello.o: file format mach-o-x86-64 hello.o architecture: i386:x86-64, flags 0x00000011: HAS_RELOC, HAS_SYMS start address 0x0000000000000000 Sections: Idx Name Size VMA LMA File off Algn 0 .text 00000031 0000000000000000 0000000000000000 00000270 2**4 CONTENTS, ALLOC, LOAD, RELOC, CODE 1 .data 00000004 0000000000000034 0000000000000034 000002a4 2**2 CONTENTS, ALLOC, LOAD, DATA 2 .cstring 00000007 0000000000000038 0000000000000038 000002a8 2**0 CONTENTS, ALLOC, LOAD, READONLY, DATA 3 __LD.__compact_unwind 00000020 0000000000000040 0000000000000040 000002b0 2**3 CONTENTS, RELOC, DEBUGGING 4 .eh_frame 00000040 0000000000000060 0000000000000060 000002d0 2**3 CONTENTS, ALLOC, LOAD, READONLY, DATA SYMBOL TABLE: 0000000000000034 g 0f SECT 02 0000 [.data] _a 0000000000000000 g 0f SECT 01 0000 [.text] _main 0000000000000004 01 COM 00 0200 _b 0000000000000028 01 COM 00 0400 _c 0000000000000000 g 01 UND 00 0000 _printf RELOCATION RECORDS FOR [.text]: OFFSET TYPE VALUE 0000000000000020 BRANCH32 _printf 000000000000000b DISP32 .cstring-0x0000000000000038 RELOCATION RECORDS FOR [__LD.__compact_unwind]: OFFSET TYPE VALUE 0000000000000000 64 .text //이전의 오브젝트 파일과 실행 파일의 비교 $ gobjdump -d a.out a.out: file format mach-o-x86-64 a.out architecture: i386:x86-64, flags 0x00000012: EXEC_P, HAS_SYMS start address 0x0000000100000f50 Sections: Idx Name Size VMA LMA File off Algn 0 .text 00000031 0000000100000f50 0000000100000f50 00000f50 2**4 CONTENTS, ALLOC, LOAD, CODE 1 __TEXT.__stubs 00000006 0000000100000f82 0000000100000f82 00000f82 2**1 CONTENTS, ALLOC, LOAD, READONLY, CODE 2 __TEXT.__stub_helper 0000001a 0000000100000f88 0000000100000f88 00000f88 2**2 CONTENTS, ALLOC, LOAD, READONLY, CODE 3 .cstring 00000007 0000000100000fa2 0000000100000fa2 00000fa2 2**0 CONTENTS, ALLOC, LOAD, READONLY, DATA 4 __TEXT.__unwind_info 00000048 0000000100000fac 0000000100000fac 00000fac 2**2 CONTENTS, ALLOC, LOAD, READONLY, CODE 5 __DATA.__nl_symbol_ptr 00000010 0000000100001000 0000000100001000 00001000 2**3 CONTENTS, ALLOC, LOAD, DATA 6 __DATA.__la_symbol_ptr 00000008 0000000100001010 0000000100001010 00001010 2**3 CONTENTS, ALLOC, LOAD, DATA 7 .data 00000004 0000000100001018 0000000100001018 00001018 2**2 CONTENTS, ALLOC, LOAD, DATA 8 __DATA.__common 00000038 0000000100001020 0000000100001020 00000000 2**4 ALLOC SYMBOL TABLE: 0000000100000000 g 0f SECT 01 0010 [.text] __mh_execute_header 0000000100001018 g 0f SECT 08 0000 [.data] _a 0000000100001020 g 0f SECT 09 0000 [__DATA.__common] _b 0000000100001030 g 0f SECT 09 0000 [__DATA.__common] _c 0000000100000f50 g 0f SECT 01 0000 [.text] _main 0000000000000000 g 01 UND 00 0100 _printf 0000000000000000 g 01 UND 00 0100 dyld_stub_binder $ xxd hello.o =\u0026gt; 이진수 파일을 16진수로 출력해줌 -r을 주면 반대로 00000000: cffa edfe 0700 0001 0300 0000 0100 0000 ................ 00000010: 0400 0000 0002 0000 0020 0000 0000 0000 ......... ...... 00000020: 1900 0000 8801 0000 0000 0000 0000 0000 ................ 00000030: 0000 0000 0000 0000 0000 0000 0000 0000 ................ 00000040: 9800 0000 0000 0000 2002 0000 0000 0000 ........ ....... 00000050: 9800 0000 0000 0000 0700 0000 0700 0000 ................ 00000060: 0400 0000 0000 0000 5f5f 7465 7874 0000 ........__text.. 00000070: 0000 0000 0000 0000 5f5f 5445 5854 0000 ........__TEXT.. 00000080: 0000 0000 0000 0000 0000 0000 0000 0000 ................ 00000090: 2a00 0000 0000 0000 2002 0000 0400 0000 *....... ....... 000000a0: b802 0000 0200 0000 0004 0080 0000 0000 ................ 000000b0: 0000 0000 0000 0000 5f5f 6373 7472 696e ........__cstrin 000000c0: 6700 0000 0000 0000 5f5f 5445 5854 0000 g.......__TEXT.. 000000d0: 0000 0000 0000 0000 2a00 0000 0000 0000 ........*....... 000000e0: 0700 0000 0000 0000 4a02 0000 0000 0000 ........J....... 000000f0: 0000 0000 0000 0000 0200 0000 0000 0000 ................ 00000100: 0000 0000 0000 0000 5f5f 636f 6d70 6163 ........__compac 00000110: 745f 756e 7769 6e64 5f5f 4c44 0000 0000 t_unwind__LD.... 00000120: 0000 0000 0000 0000 3800 0000 0000 0000 ........8....... 00000130: 2000 0000 0000 0000 5802 0000 0300 0000 .......X....... 00000140: c802 0000 0100 0000 0000 0002 0000 0000 ................ 00000150: 0000 0000 0000 0000 5f5f 6568 5f66 7261 ........__eh_fra 00000160: 6d65 0000 0000 0000 5f5f 5445 5854 0000 me......__TEXT.. 00000170: 0000 0000 0000 0000 5800 0000 0000 0000 ........X....... 00000180: 4000 0000 0000 0000 7802 0000 0300 0000 @.......x....... 00000190: 0000 0000 0000 0000 0b00 0068 0000 0000 ...........h.... 000001a0: 0000 0000 0000 0000 2400 0000 1000 0000 ........$....... 000001b0: 000d 0a00 0000 0000 0200 0000 1800 0000 ................ 000001c0: d002 0000 0200 0000 f002 0000 1000 0000 ................ 000001d0: 0b00 0000 5000 0000 0000 0000 0000 0000 ....P........... 000001e0: 0000 0000 0100 0000 0100 0000 0100 0000 ................ 000001f0: 0000 0000 0000 0000 0000 0000 0000 0000 ................ 00000200: 0000 0000 0000 0000 0000 0000 0000 0000 ................ 00000210: 0000 0000 0000 0000 0000 0000 0000 0000 ................ 00000220: 5548 89e5 4883 ec10 488d 3d1b 0000 00c7 UH..H...H.=..... 00000230: 45fc 0000 0000 b000 e800 0000 0031 c989 E............1.. 00000240: 45f8 89c8 4883 c410 5dc3 6865 6c6c 6f0a E...H...].hello. 00000250: 0000 0000 0000 0000 0000 0000 0000 0000 ................ 00000260: 2a00 0000 0000 0001 0000 0000 0000 0000 *............... 00000270: 0000 0000 0000 0000 1400 0000 0000 0000 ................ 00000280: 017a 5200 0178 1001 100c 0708 9001 0000 .zR..x.......... 00000290: 2400 0000 1c00 0000 88ff ffff ffff ffff $............... 000002a0: 2a00 0000 0000 0000 0041 0e10 8602 430d *........A....C. 000002b0: 0600 0000 0000 0000 1900 0000 0100 002d ...............- 000002c0: 0b00 0000 0200 0015 0000 0000 0100 0006 ................ 000002d0: 0100 0000 0f01 0000 0000 0000 0000 0000 ................ 000002e0: 0700 0000 0100 0000 0000 0000 0000 0000 ................ 000002f0: 005f 6d61 696e 005f 7072 696e 7466 0000 ._main._printf.. objdump 사용법 $ gobjdump -D -x -s -h 실행파일 T32_simarm 예제 윈도우 에서 돌려야함. 맥에서 설치 가능 하긴 하나 아직은 필요 없는듯\nt32marm.exe 실행 나온창 다 닫고 밑으 콘솔에 B:: RES B:: D.L B:: R B:: D.DUMP 0X20000000 B:: D.LOAD .ELF * 창하나 뜨면 ex 폴더의 image 파일 열기 (반드시 image여야함 .bin 이런거 말고) F9 누르면 기계에 를 와따가따함 F3 누르면 다음 단계 진행 BL Main에 다다르면 F2해서 프로그램 실행이됨 Memory structure 여기를 보며 참고해보자\n//stored in memory .text 실행 가능한 명령어들이 저장된다. .rodata(rdata,const) =\u0026gt;rodata(read only data) constant, literal \u0026amp; symbolic constant 등이 저장된다. .data 초기화 전역 변수 .bss 초기화 되지 않은 전역 변수 .heap 사용자 동적 메모리 .stack 지역 변수 Texas instrument에 보면 각 section에 대해 이렇게 정의 되어 있다.\nInitialized sections: .text, .const, .cinit, and .switch\nUninitialized sections: .bss, .stack, and .sysmem\n• .text \u0026ndash; Used for program code.\n• .bss \u0026ndash; Used for uninitialized objects (global variables).\n• .data \u0026ndash; Used for initialized non-const objects (global variables).\n• .const \u0026ndash; Used for initialized const objects (string constants, variables declared const).\n• .cinit \u0026ndash; Used to initialize C global variables at startup.\n• .stack \u0026ndash; Used for the function call stack.\n• .sysmem - Used for the dynamic memory allocation pool.\nText Section The text section of the program contains the executable instructions of the program. Thus, the program instruction counter is a pointer into the text section. Constants, such as the string constants of a printf() statement are also stored in the text section of memory.\nData Section The data section of memory if for global and static data that is initialized when declared. Since, the initial value of initialized variables is known in advance, all global or static variables are saved together in the executable file and the data block is loaded into memory directly from the executable file just like the text section.\nBss Section The bss section, like the data section, is for storing global and static variables. The difference being that the bss section stores variables that were not initialized to a specific value when declared. Bss data is initialized to zero when the program starts.\nStack Section The stack stores various pointer values which are needed for the execution of the program and also is the default storage location for variables which are local to a function, i.e., declared within the body of the function. The stack data is created when program begins a function and is destroyed when that function exits. When the running function call another function, the new function’s data is pushed in front of the original function’s data.\nMemory section 프로그램이 run 할때까지의 memory section에 대한 이해를 해야한다.\n사실 프로그램이 실행될때의 memory 구조를 주의깊게 보자.\na.c a.c를 살펴 보면 code block 내에 존재하는 code들이 있다.\nint li = 0x123456789; int lni; //두 변수의 설명에 automatic variable 이라고 설명 되어 있다. Automatic variable 이란 특정 scope내에서 자동 생성 되어 stack에 저장되었다가\nscope 를 빠져 나가면 stackd에서 자동 삭제 된다.\n따라서 automatic variable들의 life time은 scope 를 벗어 날때 까지 이다.\nLoad view \u0026amp; Exec view Load and Exec view Load view : a.out이 실행되기 이전에 ROM에 저장되어 있는 상태이다.\nExec view : a.out이 실행되서 RAM에 올라가 있을때 이다.\nZero Initialization : 초기화 되지 안은 전역 변수, 배열을 초기화 해준다.\nMemory segment example Tips C언어 대입 연산자(=)는 반드시 일치 시키는것이 좋다.\nint 형에 소수를 저장하는 형태를 살펴보자.\nint a=3.5; printf(\u0026#34;%d\u0026#34;,a); //실행결과 3 데이터 누수가 발생한다. int형은 소수부분을 저장하지 않는다. 때문에 0.5의 소수부분이 날라가버린다.\n하지만 double형에 int형을 저장하는것은 가능하다.\n더 큰 자료형에 작은 형을 assign하는것은 문제가 없다 다만 자동 형변환이 일어난다.\n강제 형변환 vs 자동 형변환\n자동 형변환\n자동 형변환은 더 작은 자료형에서 더큰 자료형으로 assign할때 발생.\nint a=8,b=2; double b=a/b; printf(\u0026#34;%f\\n\u0026#34;,b); //실행결과 4.000000 우리가 원하는 값은 4였을 터이지만 실제 출력값은 4.000000이 나온다.\ndouble은 8바이트를 할당하고 지수부분에 11비트 소수부분이 52비트를 저장한다.\n때문에 지수부분 4와 소수부분 52비트 즉 6바이트 0.000000 이기 때문에\n소수점 밑으로 6자리를 표기한다.\n강제 형변환\n위와 같은 경우에서 원하는 값인 2로 표기할수도 있다.\nprintf(\u0026#34;%d\u0026#34;,(int)b); //실행결과 4 물론 강제 형변환은 포인터 에서도 많이 쓰인다.\n함수 포인터, byte access 를 참고.\n","date":"August 10, 2018","hero":"/images/rand_images/yancy-min.jpg","permalink":"https://codex-devlab.github.io/posts/study/sub-computer-science/embedded-system/","summary":"\u003ch2 id=\"embedded-system\"\u003eEmbedded System?\u003c/h2\u003e\n\u003cblockquote\u003e\n\u003cp\u003eAn embedded system is a computer system \u0026mdash; 작은 컴퓨터 라고 생각하자.\u003c/p\u003e\n\u003cp\u003eDedicated function \u0026mdash; 시스템에 맞춰 특정 동작을 한다.\u003c/p\u003e\n\u003cp\u003eWithin a lager mechanical or electronical system\u003c/p\u003e\n\u003cp\u003e더 큰 시스템의 일부로 내장(embedded)된다.\u003c/p\u003e\n\u003cp\u003e큰 시스템 안에 여러개의 임베디드 시스템이 동시에 존재할 수 있다.\u003c/p\u003e\u003c/blockquote\u003e\n\u003cul\u003e\n\u003cli\u003eCharacteristic of Embedded system\n\u003cul\u003e\n\u003cli\u003e특정 기능을 수행\u003c/li\u003e\n\u003cli\u003e하드웨어 + 소프트웨어로 구성\u003c/li\u003e\n\u003cli\u003e하드웨어 변경 쉽지 않음\u003c/li\u003e\n\u003cli\u003e제한적인 자원\u003c/li\u003e\n\u003cli\u003e고 신뢰성, 실시간성의 요구\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"soc\"\u003eSoC\u003c/h2\u003e\n\u003cblockquote\u003e\n\u003cp\u003eSoC(System on chip) 은\u003c/p\u003e","tags":["Study","Embeded-System","C"],"title":"시스템프로그래밍 FTW 구현"},{"categories":null,"contents":"FTW() 란? ftw함수는 해당 경로안의 모든 디렉토리들을 탐색하여 보여준다.\nSYNOPSIS #include \u0026lt;ftw.h\u0026gt;\nint ftw(const char *path, int (*fn)(const char *, const struct sta *ptr, int flag),int depth);\nint nftw(const char *path, int (*fn)(const char *, const struct stat *ptr, int flag, struct FTW *), int depth, int flags);\nftw는 path, fn, depth의 3가지 인자가 필요하다.\npath : 탐색될 대상이 되는 경로.\nfn : 탐색중 발견된 파일의 정보를 받는 콜백 포인터.\ndepth : 탐색중 몇개의 하위디렉토리를 탐색할것인지 설정.\nreturn : 성공하면 0, 실패하면 0이외의 값, 에러가 검출되면 -1리턴\n=\u0026gt;(C에서는 리턴값에 대한 정확한 이해가 필요합니다. 성공시 0을 리턴하며 실패시 0이외의 값을 리턴합니다.)\nDescription FTW_F A regular file.\nFTW_D A directory being visited in pre-order.\nFTW_DNR A directory which cannot be read. The directory will not be descended into.\nFTW_DP A directory being visited in post-order (nftw() only).\nFTW_NS A file for which no stat(2) information was available. The contents of the stat structure are undefined.\nFTW_SL A symbolic link.\nFTW_SLN A symbolic link with a non-existent target (nftw() only)\nSource Code /*authored by Edward Son * * 20161103 * */ #include \u0026lt;sys/types.h\u0026gt; #include \u0026lt;dirent.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;sys/stat.h\u0026gt; #include \u0026lt;string.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; void Myftw(char* path){ DIR *dirptr; //탐색할 경로를 담을 디렉토리포인터 struct dirent *dir; //디렉토리의 정보를 읽어올 포인터 struct stat file_att; //디렉토리와 파일의 정보를 읽어올 구조체 int i; //이것도 nuff해 보시지! char nuff[255]=\u0026#34; \u0026#34;; char space[]=\u0026#34;-----\u0026gt;\u0026#34;; static int num =0; //opendir 로 포인터 개방 if((dirptr = opendir(path))==NULL){ printf(\u0026#34;NO Such a directory\u0026#34;); return; // Base step for Recursive call } if(chdir(path)\u0026lt;0){ perror(\u0026#34;No such path\u0026#34;); exit(1); } while((dir=readdir(dirptr))!=NULL){ stat(dir -\u0026gt; d_name, \u0026amp;file_att); getcwd(nuff,1024); if(strcmp(\u0026#34;.\u0026#34;,dir-\u0026gt;d_name)==0||strcmp(\u0026#34;..\u0026#34;,dir-\u0026gt;d_name)==0) continue; //현재 경로안에 파일들 출력 if(S_ISREG(file_att.st_mode)){ printf(\u0026#34;Path : %s \\n\u0026#34;,nuff); if(num==1){ printf(\u0026#34;file : %s %s\\n\u0026#34;,space,dir-\u0026gt;d_name); } else{ printf(\u0026#34;file : %s\\n\u0026#34;,dir-\u0026gt;d_name); } } //하위 디렉토리가 있을때 해당 디렉토리로 이동 else if(S_ISDIR(file_att.st_mode)){ //디렉토리 인지 확인 printf(\u0026#34;Path : %s \\n\u0026#34;,nuff); if(dir-\u0026gt;d_ino !=0){ //디렉토리 안의 i_node #를 확인하여 순서대로 포인터 이동 printf(\u0026#34;directory : %s %s\\n\u0026#34;,space,dir-\u0026gt;d_name); } num++; Myftw(dir-\u0026gt;d_name); num=0; } } chdir(\u0026#34;..\u0026#34;); printf(\u0026#34;************************\\n\u0026#34;); } int main(int argc, char** argv){ if(argv[1]\u0026lt;0){ perror(\u0026#34;Not exist\u0026#34;); exit(1); } else Myftw(argv[1]); } Result 공부한지 얼마 안되어서 코딩실력이 많이 부족합니다. 어떤 의견이든 코드에 대해 수정할 부분이나 추가 의견 있으시면 댓글로 달아주세요~\n","date":"August 10, 2018","hero":"/images/rand_images/michael-dziedzic.jpg","permalink":"https://codex-devlab.github.io/posts/study/sub-computer-science/system-programming-ftw-implementation/","summary":"\u003ch2 id=\"ftw-란\"\u003eFTW() 란?\u003c/h2\u003e\n\u003cp\u003eftw함수는 해당 경로안의 모든 디렉토리들을 탐색하여 보여준다.\u003c/p\u003e\n\u003ch2 id=\"synopsis\"\u003eSYNOPSIS\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003e#include \u0026lt;ftw.h\u0026gt;\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eint ftw(const char *path, int (*fn)(const char *, const struct sta *ptr, int flag),int depth);\u003c/p\u003e\n\u003cp\u003eint nftw(const char *path, int (*fn)(const char *, const struct stat *ptr, int flag, struct FTW *), int depth, int flags);\u003c/p\u003e\n\u003cp\u003eftw는 path, fn, depth의 3가지 인자가 필요하다.\u003c/p\u003e\n\u003cp\u003epath : 탐색될 대상이 되는 경로.\u003c/p\u003e\n\u003cp\u003efn : 탐색중 발견된 파일의 정보를 받는 콜백 포인터.\u003c/p\u003e","tags":["Study","System-Programming","C"],"title":"시스템프로그래밍 FTW 구현"},{"categories":null,"contents":" OSX에서 autojump 설치 방법입니다.\nautojump git을 참고해 주세요\nautojump? 터미널에서 본인이 원하는 디렉토리로 이동하려고 할때, 디렉토리를 차례차례 건너가면서 이동하는 방법과 절대경로를 통해 한번에 이동하는 방법이 있다.\n하지만 이들 모두 사용자에게 상당한 불편을 줍니다 ㅠㅠ 저도 맥을 쓴지 얼마 안돼서 상당한 불편함이 있더라구요.\n이걸 바로 해결해 줄수있는게 autojump입니다.\n어떻게 동작하는건가요? 바로 실행 스샷 들어갑니다.\n요런식으로 바로 이동이 가능해요!! 절대 경로나 cd같은 시스템 함수를 쓰지 않아도 바로 해당 디렉토리로 이동가능!!!!\n일단 대충 어떻게 돌아가는건지 감은 잡았으니 설치부터 찬찬히 살펴보죵~~\nInfo NAME\n​ autojump - a faster way to navigate your filesystem\nDESCRIPTION\n​ autojump is a faster way to navigate your filesystem. It works by\n​ maintaining a database of the directories you use the most from the\n​ command line.\n​ Directories must be visited first before they can be jumped to.\n\u0026lt;autojump는 터미널상에서 한번 방문 했던 위치로만 jump할수 있어요!!\u0026gt;\nUSAGE\n​ j is a convenience wrapper function around autojump. Any option that\n​ can be used with autojump can be used with j and vice versa.\n​ o Jump To A Directory That Contains foo:\n​ j foo\n​ o Jump To A Child Directory:\n​ Sometimes it\u0026rsquo;s convenient to jump to a child directory (sub-directory\n​ of current directory) rather than typing out the full name.\n​ jc bar\n​ o Open File Manager To Directories (instead of jumping):\n​ Instead of jumping to a directory, you can open a file explorer win-\n​ dow (Mac Finder, Windows Explorer, GNOME Nautilus, etc.) to the di-\n​ rectory instead.\n​ jo music\n​ Opening a file manager to a child directory is also supported:\n​ jco images\n​ o Using Multiple Arguments:\n​ Let\u0026rsquo;s assume the following database:\n​ 30 /home/user/mail/inbox\n​ 10 /home/user/work/inbox\n​ j in would jump into /home/user/mail/inbox as the higher weighted en-\n​ try. However you can pass multiple arguments to autojump to prefer a\n​ different entry. In the above example, j w in would then change di-\n​ rectory to /home/user/work/inbox.\nHow to Installation 저는 OSX를 사용중이기 때문에 Home brew를 통해 간편하게 설치해 볼꺼에요 ㅎㅎ\n우선 터미널상에서 brew search autojump 를 해서 해당 패키지가 있는지 검색해 볼거에요\n검색해 보니 패키지 중에 autojump 가 존재 하네요 그럼 이제 설치만 해주면 됩니다!!\n그럼 이제 brew install autojump를 해주세요\n아니?!!! 에러가 뜨네요?\u0026hellip;.찝찝 합니다\u0026hellip;\n그냥 설치를 진행해도 되지만 저는 찝찝한걸 못참는 관계로 한번 해결을 해 보겠습니다.\n터미널 상에서 친절하게 brew를 update를 하라고 나오네요.\n하지만 우리에겐 구글이 있기때문에 유사한 사례가 있는지 검색해볼께요\n[출처 : http://developpeers.com/blogs/fix-for-homebrew-permission-denied-issues]\n다행히 비슷한 사례가 있었네요. 아무래도 권한 설정때문에 링크가 제대로 돼지 안는 문제가 있었나봐요.\n자그럼 차근차근 해결해 보죵.\n아쉽지만 autojump는 먼저 uninstall 하고 시작할께용\n$ brew uninstall autojump 이제 brew를 업데이트 해볼까요?\nbrew upgrade brew cleanup brew install autojump brew link --overwrite autojump sudo chown -R \u0026#39;whoami\u0026#39; /usr/local brew install autojump 고대로 입력해 줍니다~~\n오오오~~!!!에러 없이 잘 돌아가네용~~ 그럼 이제 설치가 완료 되었나 확인해봐야겠죠?\n터미널에 autojump를 쳐줍니다.\n아니?!!!!!!?!?!?!?!!!!\n\u0026ldquo;아니!! 니가 하라는데로 다 했는데 저건 뭐야?!!?!?!!!\u0026rdquo;\n하시는 분들 있을테지만 ㅎㅎ 아직 끝나지 안았습니다.\n출처 : https://github.com/wting/autojump\nautojump의 git페이지를 살펴보면 매뉴얼이 나와있네요~~ 한번 해봅시다.\n터미널에 autojump 디렉토리로 이동해서 install.py를 실행 시킬꺼에용!!\n뭔가 설치가 완료되어가는 느낌이 팍팍 듭니다.\n하지만 아직 끝나지 안았어요!!!\n왜냐면요, 현재 여러분이 사용하고 계시는 쉘에서 autojump를 사용하기 위해선\n쉘의 환경변수를 설정해줘야 해요.\n그래서 autojump를 설치할때 Please하면서 뭐라뭐라 하네용\n자세히 한번 봅시다.\nㅇㅇ\u0026hellip;.\nㅇㅋ\u0026hellip;\u0026hellip;\n뭘 profile에 추가하라고 하네요. 바로 환경변수에 autojump를 쉘상에서 바로 실행할수 있게 코드를 추가해주라는 내용이에요!!\n그럼 이제 추가해 볼까요?\n저는 Mac을 사용중이니까 .bash_profile에 등록 할꺼에요\n그럼 이제\nvi ~/.bash_profile\n을 해서 열어 볼까요?\n자그럼 위에 autojump 설치시에 나왔던 추가하라던 코드부분을 추가해주면 됩니다!!\n그리고 꼭 저장 잊지 마세요~\n자그럼 이제 실행이 되는건가 확인해 봐야겠죠?\n바로 터미널에 autojump 써봅시다!\n오~~?!!오오오~~!!!!! 잘되는듯 싶은데 또 사용법은 알고 가야하잔아요?\n그럼 예시 몇개 보고가시죠!!\nUsage 저는 현재 test -\u0026gt; foo, root 이런식으로 디렉토리를 구성해 봤어요\n현재 위치는 test이구요\n자 그럼 foo 로 이동해 볼까요?\n사용법은 j [디렉토리명]\n이런식으로 사용하면 돼요!!\n오~~~잘 작동하네용 그럼 root로 한번 이동해봐야겠죠?\n잉???!!!왜 안될까요? 이상하네요\u0026hellip;.가 아니라\nautojump는 자신이 한번 방문했던 디렉토리만 점프 가능하다는점!!!!\n때문에 저는 j -a /User/Edwardson/Desktop/test/root\n를 해줘서 경로를 입력해 줄꺼에요. 자그럼 이동 하나 확인해봐야겠죠?\n매우매우 잘 이동되네용 ㅎㅎ\nIssue autojump를 사용하면서 몇가지 문제점들을 발견했어요!!\n첫번째, 같은 이름을 갖는 디렉토리\n예제를 한번더 만들어 봤어요 stat을 보면 알겠지만 현재 디렉토리 안에 qwe라는 디렉토리는 3개가 있어요.\n각각이 weight도 전부 다르구요. 중복된 이름이 존재할때는 어떻게 이동해야 할까요?\n밑의 예제를 살펴보죠\n눈치 채셨나요?만약 test에 있는 qwe로 이동하기위해선\nj test/qwe\n이런식으로 입력해줘야 해요!!\n나머지 qwe들은 하위 디렉토리이므로\nj w in qwe\n를 해주면 하위 디렉토리들끼리 갖고있는 qwe 간의 이동이 되용\n뭔가 복잡하네요\u0026hellip;.\n두번째, 디렉도리의 경로가 저장될텐데 경로들이 너무 많이 저장되어서 복잡할때 해당 경로들을 지워야해요\nautojump의 데이터 베이스는 밑의 위치에 있어요.\n해당 txt파일을 오픈 하면\n이런식으로 제가 이동했던 경로들이 저장되어 있어요.\n만약 경로가 너무 많아 지거나 정리를 하고 싶을때 자유롭게 삭제하시면 됩니다~~\n혹시라도 다른 이슈에대에 궁금하시면\n여기를 참고해 주세요~\n그럼 저는 이만 autojump에 대한 글을 마칠께요!!!!\n다들 편리한 기능 사용해서 어려움 없으시길 바래용~~\n감사합니다~~~\n","date":"August 10, 2018","hero":"/images/rand_images/ben-kold.jpg","permalink":"https://codex-devlab.github.io/posts/os/sub-macos/mac-autojump/","summary":"\u003cblockquote\u003e\n\u003cp\u003eOSX에서 autojump 설치 방법입니다.\u003cbr\u003e\n\u003ca href=\"https://github.com/wting/autojump\" target=\"_blank\" rel=\"noopener\"\u003eautojump git을 참고해 주세요\u003c/a\u003e\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"autojump\"\u003eautojump?\u003c/h2\u003e\n\u003cp\u003e터미널에서 본인이 원하는 디렉토리로 이동하려고 할때, 디렉토리를 차례차례 건너가면서 이동하는 방법과 절대경로를 통해 한번에 이동하는 방법이 있다.\u003c/p\u003e\n\u003cp\u003e하지만 이들 모두 사용자에게 상당한 불편을 줍니다 ㅠㅠ 저도 맥을 쓴지 얼마 안돼서 상당한 불편함이 있더라구요.\u003c/p\u003e\n\u003cp\u003e이걸 바로 해결해 줄수있는게 autojump입니다.\u003c/p\u003e\n\u003ch2 id=\"어떻게-동작하는건가요\"\u003e어떻게 동작하는건가요?\u003c/h2\u003e\n\u003cp\u003e바로 실행 스샷 들어갑니다.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/posts/os/sub-macos/mac-autojump/images/27793D4158997ABD0B.png\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e요런식으로 바로 이동이 가능해요!! 절대 경로나 cd같은 시스템 함수를 쓰지 않아도 바로 해당 디렉토리로 이동가능!!!!\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/posts/os/sub-macos/mac-autojump/images/2753D64158997ABE2D.png\" alt=\"img\"\u003e\u003c/p\u003e","tags":["OS","MacOS","Autojump"],"title":"Mac Autojump 설치및 사용법"},{"categories":null,"contents":"gui 변경 사전에 맥에 vncviewer를 설치해 줬다.\n아마 대부분 유저들이 사용하는 팀뷰어 같은 앱이라고 생각하면 편하다.\n설치하면서 stackoverflow를 참고 하였다.\n# aws 우분투 서버 접속후 $ sudo apt-get update $ sudo apt-get install gnome-panel gnome-settings-daemon metacity nautilus gnome-terminal $ sudo apt-get install ubuntu-desktop $ sudo apt-get install vnc4server ubuntu@ip-172-31-19-48:~$ vncserver You will require a password to access your desktops. Password: Password must be at least 6 characters - try again Password: Password must be at least 6 characters - try again Password: Verify: xauth: file /home/ubuntu/.Xauthority does not exist New \u0026#39;ip-172-31-19-48:1 (ubuntu)\u0026#39; desktop is ip-172-31-19-48:1 Creating default startup script /home/ubuntu/.vnc/xstartup Starting applications specified in /home/ubuntu/.vnc/xstartup Log file is /home/ubuntu/.vnc/ip-172-31-19-48:1.log $ vncserver -kill :1 $ exit # 우분투 서버 재접속 cd /vnc sudo vi xstartup #insert this script-------------------------------------# export XKL_XMODMAP_DISABLE=1 unset SESSION_MANAGER unset DBUS_SESSION_BUS_ADDRESS [ -x /etc/vnc/xstartup ] \u0026amp;\u0026amp; exec /etc/vnc/xstartup [ -r $HOME/.Xresources ] \u0026amp;\u0026amp; xrdb $HOME/.Xresources xsetroot -solid grey vncconfig -iconic \u0026amp; gnome-panel \u0026amp; gnome-settings-daemon \u0026amp; metacity \u0026amp; nautilus \u0026amp; gnome-terminal \u0026amp; #-------------------------------------------------------# # 이후 서버에 접속 할때마다 연결 주소 확인 # 만약 aws에서 중지를 하거나 재부팅을 했을때 동적 ip를 사용 하기 때문에 # 매번 퍼블릭 DNS가 바뀌게 된다. 그래서 aws에서 연결 주소 확인!! # 5901은 vnc로 접속할 포트 번호이다. 다른 포트번호를 써봤지만 안됨. # 아직 이부분은 공부가 안되어 있어서 모르겠다. $ sudo ssh -L 5901:localhost:5901 -i \u0026#34;codex_aws.pem\u0026#34; ubuntu@ec2-13-209-3-217.ap-northeast-2.compute.amazonaws.com Welcome to Ubuntu 16.04.4 LTS (GNU/Linux 4.4.0-1060-aws x86_64) * Documentation: https://help.ubuntu.com * Management: https://landscape.canonical.com * Support: https://ubuntu.com/advantage Get cloud support with Ubuntu Advantage Cloud Guest: http://www.ubuntu.com/business/services/cloud 56 packages can be updated. 29 updates are security updates. $ vncserver -geometry 1920x1080 New \u0026#39;ip-172-31-19-48:1 (ubuntu)\u0026#39; desktop is ip-172-31-19-48:1 Starting applications specified in /home/ubuntu/.vnc/xstartup Log file is /home/ubuntu/.vnc/ip-172-31-19-48:1.log # vnc viewer 에서 다음 입력 localhost:5901 서버 접속 # AWS에서 연결 들어가서 주소 확인 # aws에 나오는 연결 부분 그대로 복사 $ ssh sudo ssh -L 5901:localhost:5901 -i \u0026#34;여러분꺼.pem\u0026#34; ubuntu@어쩌구 저쩌구 주소 # 접속 성공 우분투 서버에 파이썬 환경 설정 # pyenv 로 설치 -\u0026gt; https://github.com/pyenv/pyenv-installer $ curl -L https://github.com/pyenv/pyenv-installer/raw/master/bin/pyenv-installer | bash Update: $ pyenv update Uninstall: pyenv is installed within $PYENV_ROOT (default: ~/.pyenv). To uninstall, just remove it: $ rm -fr ~/.pyenv and remove these three lines from .bashrc: export PATH=\u0026#34;~/.pyenv/bin:$PATH\u0026#34; eval \u0026#34;$(pyenv init -)\u0026#34; eval \u0026#34;$(pyenv virtualenv-init -)\u0026#34; If you need, export USE_GIT_URI to use git:// instead of https:// for git clone. # 파이썬 확인 $ python --version Python 2.7.12 $ python3 --version Python 3.5.2 # 파이썬이 기본적으로 설치 되어 있음 # 이제 pip3 를 설치할 차례 $ sudo apt install python-pip # pip버전이 낮다고 나온다면 $ pip install --upgrade pip $ sudo apt install python3-pip pip 8.1.1 from /usr/lib/python3/dist-packages (python 3.5) # 만약 다음과 같은 에러가 나온다면 이 명령 실행 # You are using pip version 8.1.1, however version 18.0 is available. # You should consider upgrading via the \u0026#39;pip install --upgrade pip\u0026#39; command. $ sudo -H pip3 install --upgrade pip # 갑자기 에러 나오기 시작함 # pip, pip3 버전체크 하는데 둘다 똑같이 밑의 에러를 토해냄 Traceback (most recent call last): File \u0026#34;/usr/bin/pip\u0026#34;, line 9, in \u0026lt;module\u0026gt; from pip import main ImportError: cannot import name main # $ sudo python3 -m pip uninstall pip \u0026amp;\u0026amp; sudo apt install python3-pip --reinstall # 이제 ipython jupyter 설치 $ pip3 install ipython $ pip3 install jupyter # 파이썬 설치후 배포할때에 필요한 라이브러리에 대한 정보를 알리기 위해 $ pip freeze \u0026gt; requirements.txt Jupyter notebook execution Python Virtual environment installation AWS E2C에 설치 # 서버에 설치 $ sudo apt install virtualenv $ virtualenv myvenv # venv 설치 확인 $ source myvenv/bin/activate #venv 종료 (myvenv)~$ deactive $ python3 -m virtualenv myvenv $ virtualenv myvenv --python=python3 $ virtualenv myvenv --python=python3.5 Mac 에 설치 참고\n# pyenv 설치 $ brew install pyenv $ brew install pyenv-virtualenv $ pyenv versions * system (set by /Users/Edwardson/.pyenv/version) 3.6.5 #최신 버전설치 $ pyenv install --list ... 3.6.5 ... $ pyenv install 3.6.5 # 특정 버전으로 이동 $ pyenv shell X.X.X(바꾸고 싶은 버전) # pyenv 로 myenv virtualenv 생성 $ pyenv virtualenv 3.6.5 myenv # 확인 $ pyenv versions * system (set by /Users/Edwardson/.pyenv/version) 3.6.5 3.6.5/envs/myenv myenv =\u0026gt; 해당 폴더는 /Users/Edwardson/.pyenv/version 안에 존재함 # 근데 우리는 서버랑 같은 환경에서 만들고 싶기 때문에 # virtualenv 를 사용한다. $ virtualenv myenv $ ls ... myenv .. $ cd myenv $ source bin/activate (myenv)$ python --version Python 3.6.5 (myenv)$ pip --version pip 18.0 from /Users/Edwardson/Dropbox/Codex/Coding_in_Mac/aws_project/myenv/lib/python3.6/site-packages/pip (python 3.6) # pyen 설치시 ctype 에러 날떄 $ sudo apt-get install -y make build-essential libssl-dev zlib1g-dev libbz2-dev \\ libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev libncursesw5-dev xz-utils 병신 같은 에러 남 자꾸 터미널에서 인식을 못함 일단 https://github.com/pyenv/pyenv#installation 여기 참고하자 $ $ echo -e \u0026#39;if command -v pyenv 1\u0026gt;/dev/null 2\u0026gt;\u0026amp;1; then\\n eval \u0026#34;$(pyenv init -)\u0026#34;\\nfi\u0026#39; \u0026gt;\u0026gt; ~/.bash_profile Django 설치 AWS E2C $ cd myvenv $ source bin/activate (myvenv)$ pip install Django (myvenv)$ python3 \u0026gt;\u0026gt;import django \u0026gt;\u0026gt;django.VERSION (2, 0, 7, \u0026#39;final\u0026#39;, 0) Mac $ cd myenv $ source bin/activate (myenv)$ pip install Django (myenv)$ python3 \u0026gt;\u0026gt;import django \u0026gt;\u0026gt;django.VERSION (2, 0, 7, \u0026#39;final\u0026#39;, 0) OpenCV 설치 Mac $ cd myenv $ source bin/activate (myenv)$ pip install OpenCV-Python (myenv)$ python3 \u0026gt;\u0026gt;cv2.__version__ \u0026#39;3.4.2\u0026#39; Tensor-flow 설치 Mac $ cd myenv $ source bin/activate (myenv)$ pip3 install --upgrade tensorflow (myenv)$ python3 \u0026gt;\u0026gt;\u0026gt; import tensorflow \u0026gt;\u0026gt;\u0026gt; tensorflow.VERSION \u0026#39;1.9.0\u0026#39; SCP Usage pyenv 다시 설치 sudo apt-get install -y make build-essential libssl-dev zlib1g-dev libbz2-dev \\ libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev libncursesw5-dev \\ xz-utils tk-dev libffi-dev 참고 텐서플로우 번역 깃북 에 MNIST, Tensor-flow 에 대한 자세한 설명이 나온다 \u0026mdash; 감사합니다.\nDjango 번역 깃북\n","date":"July 31, 2018","hero":"/images/rand_images/kevin-bhagat.jpg","permalink":"https://codex-devlab.github.io/posts/dev/sub-projects/sub-text-recognizer-on-ec2/text-recognizer-on-ec2-dev-history/","summary":"\u003ch2 id=\"gui-변경\"\u003egui 변경\u003c/h2\u003e\n\u003cblockquote\u003e\n\u003cp\u003e사전에 맥에 vncviewer를 설치해 줬다.\u003c/p\u003e\n\u003cp\u003e아마 대부분 유저들이 사용하는 팀뷰어 같은 앱이라고 생각하면 편하다.\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e설치하면서 \u003ca href=\"https://stackoverflow.com/questions/25657596/how-to-set-up-gui-on-amazon-ec2-ubuntu-server\" target=\"_blank\" rel=\"noopener\"\u003estackoverflow\u003c/a\u003e를 참고 하였다.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# aws 우분투 서버 접속후\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e$ sudo apt-get update\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e$ sudo apt-get install gnome-panel gnome-settings-daemon metacity nautilus gnome-terminal\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e$ sudo apt-get install ubuntu-desktop\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e$ sudo apt-get install vnc4server\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eubuntu@ip-172-31-19-48:~$ vncserver\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eYou will require a password to access your desktops.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ePassword:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ePassword must be at least \u003cspan style=\"color:#ae81ff\"\u003e6\u003c/span\u003e characters - try again\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ePassword:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ePassword must be at least \u003cspan style=\"color:#ae81ff\"\u003e6\u003c/span\u003e characters - try again\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ePassword:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eVerify:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003exauth:  file /home/ubuntu/.Xauthority does not exist\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eNew \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;ip-172-31-19-48:1 (ubuntu)\u0026#39;\u003c/span\u003e desktop is ip-172-31-19-48:1\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eCreating default startup script /home/ubuntu/.vnc/xstartup\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eStarting applications specified in /home/ubuntu/.vnc/xstartup\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eLog file is /home/ubuntu/.vnc/ip-172-31-19-48:1.log\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e$ vncserver -kill :1\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e$ exit\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# 우분투 서버 재접속\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ecd /vnc\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esudo vi xstartup\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#insert this script-------------------------------------#\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eexport XKL_XMODMAP_DISABLE\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eunset SESSION_MANAGER\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eunset DBUS_SESSION_BUS_ADDRESS\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003e -x /etc/vnc/xstartup \u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e exec /etc/vnc/xstartup\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003e -r $HOME/.Xresources \u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e xrdb $HOME/.Xresources\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003exsetroot -solid grey\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003evncconfig -iconic \u0026amp;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003egnome-panel \u0026amp;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003egnome-settings-daemon \u0026amp;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003emetacity \u0026amp;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enautilus \u0026amp;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003egnome-terminal \u0026amp;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#-------------------------------------------------------#\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# 이후 서버에 접속 할때마다\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"연결-주소-확인\"\u003e연결 주소 확인\u003c/h3\u003e\n\u003cp\u003e\u003cimg src=\"../../assets/img/post/S_2018-07-27_10.46.24.png\" alt=\"img\"\u003e\u003c/p\u003e","tags":["Django","Python","AWS"],"title":"AWS project 진행 과정"},{"categories":null,"contents":"Django(Framework) Django(/dʒæŋɡoʊ/ jang-goh/쟁고/장고)는 파이썬으로 만들어진 무료 오픈소스 웹 애플리케이션 프레임워크(web application framework)입니다. 쉽고 빠르게 웹사이트를 개발할 수 있도록 돕는 구성요소로 이루어진 웹 프레임워크랍니다.\nInstallation $ pip3 install Django $ python3 \u0026gt;\u0026gt;import django \u0026gt;\u0026gt;django.VERSION \u0026gt;\u0026gt;(2.0.1) 가상환경을 프로젝트 폴더에 적용 pyenv 를 이용하여 가상환경을 적용해 줄겁니다.\npyenv-installer 를 이용해서 설치하면 다른 플러그인도 같이 설치 됩니다.\n$ curl -L https://github.com/pyenv/pyenv-installer/raw/master/bin/pyenv-installer | bash $ pyenv update # 현재 사용하고 있는 버전들 $ pyenv versions * system (set by /Users/Edwardson/.pyenv/version) 3.6.5 $ pyenv virtualenv 3.6.5 myenv $ pyenv versions * system (set by /Users/Edwardson/.pyenv/version) 3.6.5 3.6.5/envs/myenv myenv $ mkdir project # project 폴더로 이동후 $ pyenv local project (myenv)$ python3 --version Python 3.6.5 (myenv)$ pip --version pip 9.0.3 from /Users/Edwardson/.pyenv/versions/3.6.5/envs/myenv/lib/python3.6/site-packages (python 3.6) # 버전이 너무 낮아서 업글 해줘야댐 (myenv)$ pip install --upgrade pip (myenv)$ pip install Django django project 생성 (myenv)$ django-admin startproject project . └── project ├── project │ ├── __init__.py │ ├── __pycache__ │ │ ├── __init__.cpython-36.pyc │ │ ├── settings.cpython-36.pyc │ │ ├── urls.cpython-36.pyc │ │ └── wsgi.cpython-36.pyc │ ├── settings.py │ ├── urls.py │ └── wsgi.py ├── db.sqlite3 └── manage.py # 프로젝트 폴더 명도 project 이고 그안에 시작 폴더 이름도 project가 되버린다. # 때문에 프로젝트 폴더 안의 project를 config로 바꿀것이다. # 하지만 폴더 명을 바꿔 버리면 영향을 미치는 파일들이 있는데 # manage.py wsgi.py settings.py 이 세개의 파일이다. # 들어가서 project로 되어있는 부분들을 전부 config로 바꾸자 . └── project ├── config │ ├── __init__.py │ ├── __pycache__ │ │ ├── __init__.cpython-36.pyc │ │ ├── settings.cpython-36.pyc │ │ ├── urls.cpython-36.pyc │ │ └── wsgi.cpython-36.pyc │ ├── settings.py │ ├── urls.py │ └── wsgi.py ├── db.sqlite3 └── manage.py # 아마 이렇게 되어있을것이다. 실습-1 django 시작부터 글 모델 데이터 베이스 생성\n# django 시작 $ django-admin startproject mysite $ python manage.py migrate Operations to perform: Apply all migrations: admin, auth, contenttypes, sessions Running migrations: Applying contenttypes.0001_initial... OK Applying auth.0001_initial... OK Applying admin.0001_initial... OK Applying admin.0002_logentry_remove_auto_add... OK Applying contenttypes.0002_remove_content_type_name... OK Applying auth.0002_alter_permission_name_max_length... OK Applying auth.0003_alter_user_email_max_length... OK Applying auth.0004_alter_user_username_opts... OK Applying auth.0005_alter_user_last_login_null... OK Applying auth.0006_require_contenttypes_0002... OK Applying auth.0007_alter_validators_add_error_messages... OK Applying auth.0008_alter_user_username_max_length... OK Applying auth.0009_alter_user_last_name_max_length... OK Applying sessions.0001_initial... OK # 서버 실행 $ python3 manage.py runserver # 블로그 만들기 $ python manage.py startapp blog # mysite/settings.py 에 blog 추가 ### INSTALLED_APPS = [ \u0026#39;django.contrib.admin\u0026#39;, \u0026#39;django.contrib.auth\u0026#39;, \u0026#39;django.contrib.contenttypes\u0026#39;, \u0026#39;django.contrib.sessions\u0026#39;, \u0026#39;django.contrib.messages\u0026#39;, \u0026#39;django.contrib.staticfiles\u0026#39;, \u0026#39;blog\u0026#39;, ] ### # blog/model.py 에 다음 내용 추가(블로그 글 모델을 만드는것) # 글을 쓰기 위한 클래스를 만드는 것이다. 해당 클래스를 통해 글을 쓸수 있는 # 기능을 구현해줄수 있다. from django.db import models from django.utils import timezone class Post(models.Model): author = models.ForeignKey(\u0026#39;auth.User\u0026#39;, on_delete=models.CASCADE) title = models.CharField(max_length=200) text = models.TextField() created_date = models.DateTimeField( default=timezone.now) published_date = models.DateTimeField( blank=True, null=True) def publish(self): self.published_date = timezone.now() self.save() def __str__(self): return self.title # 블로그에 필요한 데이터베이스 만들기 $ python manage.py makemigrations blog Migrations for \u0026#39;blog\u0026#39;: blog/migrations/0001_initial.py - Create model Post # 데이터 베이스 모델을 위한 테이블 생성 # 아까 만들었던 글 모델이 데이터 베이스에 저장되었다. $ python manage.py migrate blog Operations to perform: Apply all migrations: blog Running migrations: Applying blog.0001_initial... OK 장고 관리자 # admin.py의 내용을 다음으로 바꿈 from django.contrib import admin from .models import Post admin.site.register(Post) # 잘 보면 아까 만들었던 글모델 Post를 import하고 있다. $ python3 manage.py runserver # http://127.0.0.1:8000/admin 으로 접속 하면 관리자 화면을볼수 있다 # 관리자를 활성화 해주기 위해 슈퍼 유저 계정을 만들어야 한다. $ python3 manage.py createsuperuser Username (leave blank to use \u0026#39;edwardson\u0026#39;): codex Email address: ehdwn1991@gmail.com Password: Password (again): Superuser created successfully. ","date":"July 31, 2018","hero":"/images/rand_images/sigmund-tax.jpg","permalink":"https://codex-devlab.github.io/posts/dev/sub-projects/sub-text-recognizer-on-ec2/text-recognizer-on-ec2-django/","summary":"\u003ch2 id=\"djangoframework\"\u003eDjango(Framework)\u003c/h2\u003e\n\u003cblockquote\u003e\n\u003cp\u003eDjango(\u003cem\u003e/dʒæŋɡoʊ/ jang-goh/쟁고/장고\u003c/em\u003e)는 파이썬으로 만들어진 무료 오픈소스 웹 애플리케이션 프레임워크(web application framework)입니다. 쉽고 빠르게 웹사이트를 개발할 수 있도록 돕는 구성요소로 이루어진 웹 프레임워크랍니다.\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch3 id=\"installation\"\u003eInstallation\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e$ pip3 install Django\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e$ python3\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026gt;\u0026gt;import django\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026gt;\u0026gt;django.VERSION\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026gt;\u0026gt;\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003e2.0.1\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"가상환경을-프로젝트-폴더에-적용\"\u003e가상환경을 프로젝트 폴더에 적용\u003c/h3\u003e\n\u003cp\u003epyenv 를 이용하여 가상환경을 적용해 줄겁니다.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/pyenv/pyenv-installer\" target=\"_blank\" rel=\"noopener\"\u003epyenv-installer\u003c/a\u003e 를 이용해서 설치하면 다른 플러그인도 같이 설치 됩니다.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e$ curl -L https://github.com/pyenv/pyenv-installer/raw/master/bin/pyenv-installer | bash\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e$ pyenv update\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# 현재 사용하고 있는 버전들\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e$ pyenv versions\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e* system \u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003eset by /Users/Edwardson/.pyenv/version\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  3.6.5\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e$ pyenv virtualenv 3.6.5 myenv\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e$ pyenv versions\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e* system \u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003eset by /Users/Edwardson/.pyenv/version\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  3.6.5\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  3.6.5/envs/myenv\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  myenv\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e$ mkdir project\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# project 폴더로 이동후\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e$ pyenv local project\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003emyenv\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e$ python3 --version\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ePython 3.6.5\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003emyenv\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e$ pip --version\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003epip 9.0.3 from /Users/Edwardson/.pyenv/versions/3.6.5/envs/myenv/lib/python3.6/site-packages \u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003epython 3.6\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# 버전이 너무 낮아서 업글 해줘야댐\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003emyenv\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e$ pip install --upgrade pip\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003emyenv\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e$ pip install Django\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"django-project-생성\"\u003edjango project 생성\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003emyenv\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e$ django-admin startproject project\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e└── project\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    ├── project\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    │   ├── __init__.py\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    │   ├── __pycache__\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    │   │   ├── __init__.cpython-36.pyc\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    │   │   ├── settings.cpython-36.pyc\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    │   │   ├── urls.cpython-36.pyc\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    │   │   └── wsgi.cpython-36.pyc\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    │   ├── settings.py\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    │   ├── urls.py\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    │   └── wsgi.py\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    ├── db.sqlite3\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    └── manage.py\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# 프로젝트 폴더 명도 project 이고 그안에 시작 폴더 이름도 project가 되버린다.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# 때문에 프로젝트 폴더 안의 project를 config로 바꿀것이다.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# 하지만 폴더 명을 바꿔 버리면 영향을 미치는 파일들이 있는데\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# manage.py wsgi.py settings.py 이 세개의 파일이다.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# 들어가서 project로 되어있는 부분들을 전부 config로 바꾸자\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e└── project\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    ├── config\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    │   ├── __init__.py\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    │   ├── __pycache__\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    │   │   ├── __init__.cpython-36.pyc\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    │   │   ├── settings.cpython-36.pyc\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    │   │   ├── urls.cpython-36.pyc\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    │   │   └── wsgi.cpython-36.pyc\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    │   ├── settings.py\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    │   ├── urls.py\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    │   └── wsgi.py\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    ├── db.sqlite3\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    └── manage.py\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# 아마 이렇게 되어있을것이다.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"실습-1\"\u003e실습-1\u003c/h3\u003e\n\u003cblockquote\u003e\n\u003cp\u003edjango 시작부터 글 모델 데이터 베이스 생성\u003c/p\u003e","tags":["Django","Python"],"title":"Django 따라해보기!!"},{"categories":null,"contents":" 모든 내용은 Github-AWS_text_recognizer 에 업로드 되어 있습니다.\nHandwritten Text Recognition Tensorflow 를 이용하여, 사진속의 글자(Alphabet) 인식후 추출\nIntro Deep learning Project의 일환으로 정적 이미지 처리에 대한 이해도를 높이는데 주안점을 두었습니다.\n프로젝트를 진행하면서 Tensorflow, Deep learning, Image processing, Open CV,\nText Classification, AWS 등을 대한 활용합니다.\n이미지속에 있는 문자를 하나의 객체로 추출해내는것이 목표입니다.\n해당 프로젝트는 Full Stack Development 를 어느정도 체험해 보고 한발짝 다가가는 계기로써 진행하려 합니다.\nGoal Build AWS E2C Sever\nAWS의 E2C를 활용하여, linux 서버를 구축합니다.\nImage processing with tensorflow, Open CV in Python\n서버 상에서 Text image processing을 위해 약 3천 장의 Image를 learning시킵니다.\nBasical Web app for Client side\n사용자로 하여금 글자가 있는 사진 파일을 서버로 전송후,\n이미지에서 추출된 글자를 사용자가 볼수 있는 Web app에서 확인 합니다.\nRequirement \u0026amp; Environment OS : OSX, Ubuntu 16.04 LTS\nServer side : AWS E2C(Ubuntu server), Tomcat, Docker\nEditor : Sublime text\nLanguage : Python 3.6\nTool : Jupyter notebook,\nFramework : Django\nSCM : Git\n참고 프로젝트 주소\nDjango 파일 업로드\n이미지 추출 python project\nDjango Git book 한글 번역\nTensor-flow 한글 번역\nMNIST 문자인식-숫자 MNIST 공홈\nText data set - git hub\nOpenCV guide\n네이버 랩 사진속 글자 검출\n","date":"July 30, 2018","hero":"/images/rand_images/markus-spiske.jpg","permalink":"https://codex-devlab.github.io/posts/dev/sub-projects/sub-text-recognizer-on-ec2/text-recognizer-on-ec2-main/","summary":"\u003cblockquote\u003e\n\u003cp\u003e모든 내용은 \u003ca href=\"https://github.com/ehdwn1991/AWS_text_recognizer\" target=\"_blank\" rel=\"noopener\"\u003eGithub-AWS_text_recognizer\u003c/a\u003e 에 업로드 되어 있습니다.\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch1 id=\"handwritten-text-recognition\"\u003eHandwritten Text Recognition\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003eTensorflow 를 이용하여, 사진속의 글자(Alphabet) 인식후 추출\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e\u003cimg src=\"/posts/dev/sub-projects/sub-text-recognizer-on-ec2/text-recognizer-on-ec2-main/images/1*6cEKOYqHG27tYwhQVvJqPQ.png\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/posts/dev/sub-projects/sub-text-recognizer-on-ec2/text-recognizer-on-ec2-main/images/1*P4UW-wqOMSpi82KIcq11Pw.png\" alt=\"img\"\u003e\u003c/p\u003e\n\u003ch2 id=\"intro\"\u003eIntro\u003c/h2\u003e\n\u003cp\u003eDeep learning Project의 일환으로 정적 이미지 처리에 대한 이해도를 높이는데 주안점을 두었습니다.\u003c/p\u003e\n\u003cp\u003e프로젝트를 진행하면서 Tensorflow, Deep learning, Image processing, Open CV,\u003c/p\u003e\n\u003cp\u003eText Classification, AWS 등을 대한 활용합니다.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/posts/dev/sub-projects/sub-text-recognizer-on-ec2/text-recognizer-on-ec2-main/images/image-20180730011739242.png\" alt=\"image-20180730011739242\"\u003e\u003c/p\u003e\n\u003cp\u003e이미지속에 있는 문자를 하나의 객체로 추출해내는것이 목표입니다.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e해당 프로젝트는 Full Stack Development 를 어느정도 체험해 보고 한발짝 다가가는 계기로써 진행하려 합니다.\u003c/p\u003e","tags":["Django","Python","AWS","Tensor-flow","Deep-learning","OpenCV"],"title":"AWS 이미지속 글자 추출"},{"categories":null,"contents":"1Byte access 강제 캐스팅에 의한 1byte 단위 접근 방법\n다음과 같이 출력되도록 코드를 짜시오. temp : 0x12345678 temp : 0x78563412 // 강제 캐스팅에 의한 1byte 접근법 #include \u0026lt;stdio.h\u0026gt; int main(){ char *s; char swap_char; int temp=0x12345678; s=(char*)\u0026amp;temp; //4byte의 값을 1byte씩 접근 // a=(char)\u0026amp;temp; 변수 자료형의 형변환 printf(\u0026#34;temp : 0x%x\\n\u0026#34;,temp ); swap_char=*s; *s=*(s+3); *(s+3)=swap_char; swap_char=*(s+1); *(s+1)=*(s+2); *(s+2)=swap_char; printf(\u0026#34;temp : 0x%x\\n\u0026#34;,temp ); } 이런 방법론은 Endian 문제에 적용시킬수 있다. Little Endian 과 Big Endian 과의 데이터 불일치가\n발생할때 1byte접급으로 값을 뒤집어 주면 된다.\nPointer swapping within address 2중 포인터를 사용한 포인터 교환\nint a=5,b=8; int *q=\u0026amp;a,*p=\u0026amp;b; ... swap(\u0026amp;q,\u0026amp;p); printf(\u0026#34;a:%d b:%d\\n\u0026#34;,*q,*p); printf(\u0026#34;a:%d b:%d \\n\u0026#34;,a,b ); //출력 *p:8 *q:5 a:5 b:8 원래 대로라면 q와 p는 각각 a와 b의 값을 pointer addres로 가리키고 있다.\n기존에 하던 swap의 함수를 사용하면 q와 p가 가리키고 있는 a와 b의 값이 서로 맞바뀌어야한다.\n하지만 swap함수 호출수 a와 b의 값은 그대로 지만, q와 p의 값은 바뀌었다.\n이유가 뭘까?\n아마 각자의 뇌피셜로는 q와 p가 a와 b의 주소값을 담고 있었지만,\nswap함수를 지나면서 q와 p가 서로가 갖고 있는 주소 값을 맞바꾸면 된다.\n물론 그렇게 하는게 맞다. 좀더 자세하게 들여다 보자.\n#include \u0026lt;stdio.h\u0026gt; void best_reverse(); void reverse(); int main(){ int temp=5; int val=8; int *pt=\u0026amp;temp; int *pv=\u0026amp;val; printf(\u0026#34;before swap =\u0026gt; temp(%p) has : %d val(%p) has : %d\\n\u0026#34;,\u0026amp;temp,temp,\u0026amp;val,val ); printf(\u0026#34;before swap =\u0026gt; *pt(%p)-\u0026gt;[0x%x] has : %d *pv(%p)-\u0026gt;[0x%x] has : %d\\n\u0026#34;,\u0026amp;pt,pt,*pt,\u0026amp;pv,pv,*pv ); //reverse(\u0026amp;pt,\u0026amp;pv); best_reverse(\u0026amp;pt,\u0026amp;pv); printf(\u0026#34;\\n================================\\n\\n\u0026#34;); printf(\u0026#34;after swap =\u0026gt; temp(%p) has : %d val(%p) has : %d\\n\u0026#34;,\u0026amp;temp,temp,\u0026amp;val,val ); printf(\u0026#34;after swap =\u0026gt; *pt(%p)-\u0026gt;[0x%x] has : %d *pv(%p)-\u0026gt;[0x%x] has : %d\\n\u0026#34;,\u0026amp;pt,pt,*pt,\u0026amp;pv,pv,*pv ); } //두개의 차이점 공부! void reverse(int *a,int *b){ // 이랗게 해도 돌아가긴 하는데 사실상 부적절한 부분이다. // 왜냐하면 현재 주소를 받아오지만 reverse 함수에서 temp 는 // 정수형 변수이고 만약 주소 값이 정수형 범위를 초과하는 주소 값이라면 // 오류가 발생할수도 있다. int temp; temp=*a; *a=*b; *b=temp; } void best_reverse(int **a,int **b){ int *temp=*a; printf(\u0026#34;add_pt:%p add_pv:%p\\n\u0026#34;,*a,*b ); printf(\u0026#34;add_pt:%p add_pv:%p\\n\u0026#34;,a,b ); printf(\u0026#34;add_pt:%p add_pv:%p\\n\u0026#34;,\u0026amp;a,\u0026amp;b ); *a=*b; *b=temp; } Substraction of max and min 임의의 무작위 배열값에서 최대값과 최소값의 차를 구하시오\n배열의 값은 임의로 무작위로 들어있다.\n여기에서 최대값과 최소값의 차를 구하려면, Sort알고리즘을 통해서 오름차순으로 정렬하면 편하다.\n해당 문제에서는 buble sort를 사용했다.\n// 최대값 최소값의 차 #include \u0026lt;stdio.h\u0026gt; int MaxMin_Arr(); void Input_Arr(); void buble(); int main(void) { int ArrValue[5]; int result = 0; int len=sizeof(ArrValue)/sizeof(int); Input_Arr(ArrValue); result = MaxMin_Arr(ArrValue,len); printf(\u0026#34;최대값 과 최소값의 차이 : %d\\n\\n\u0026#34;, result); return 0; } void buble(int *a,int size){ int temp=0; for (int i = 0; i \u0026lt; size; ++i) { for (int j = size-1; j \u0026gt;i; --j) { if(a[j-1]\u0026gt;a[j]){ temp=a[j-1]; a[j-1]=a[j]; a[j]=temp; } } } } int MaxMin_Arr(int* pA,int size) { buble(pA,size); return pA[size-1]-pA[0]; } void Input_Arr(int* pV) { int N; scanf(\u0026#34;%d\u0026#34;,\u0026amp;N); for (int i = 0; i \u0026lt; N; ++i) { scanf(\u0026#34;%d\u0026#34;,\u0026amp;pV[i]); } } Find specific alphabet 배열에서 특정 문자 찾기\n//특정 문자 찾기 #include \u0026lt;stdio.h\u0026gt; int find_ch(char* pS); int main(void) { char buf[30] = \u0026#34;Hello Embedded\u0026#34;; int num = 0; num = find_ch( buf ); printf(\u0026#34; d 문자의 개수 : %d\\n\u0026#34;, num); return 0; } int find_ch(char* pS) { int count=0; while(*pS++!=\u0026#39;\\0\u0026#39;){ if(*pS==\u0026#39;d\u0026#39;) count++; } return count; } 해당 문제는 d의 위치를 찾는 것이다.\nImplementation of Strcpy Strcpy구현\n// strcpy 구현 #include \u0026lt;stdio.h\u0026gt; void my_strcpy(char* pS, char* pD ); int main(void) { char src[100] = \u0026#34;Hello Embedded\u0026#34;; char dest[100]; my_strcpy( src, dest); printf (\u0026#34;dest: %s\\n\\n\u0026#34;,dest ); // Hello Embedded 출력 return 0; } void my_strcpy(char* pS, char* pD ) { while(*pS!=\u0026#39;\\0\u0026#39;){ *pD=*pS; pD++; pS++; } } Implementation of Strcat Strcat 구현\n// 두번째 문자열을 첫번째 배열 뒤에 붙이는 함수는 구현 하시요. // 첫번째 문자열과 두번째 문자열 구별하기 위해 \u0026#39;#\u0026#39; 문자를 사이에 추가 #include \u0026lt;stdio.h\u0026gt; void my_strcat(char* pF, char* pS); int main(void) { char Fir_str[100] = \u0026#34;embedded\u0026#34;; char Sec_str[30] = \u0026#34; Programmer\u0026#34;; my_strcat(Fir_str, Sec_str); printf(\u0026#34;Fir_str : %s\\n\\n\u0026#34;, Fir_str); // embedded # Programmer 출력 return 0; } void my_strcat(char* pF, char* pS) { int idx=0,count=0; while(pF[idx++]!=\u0026#39;\\0\u0026#39;); while(pS[count]!=\u0026#39;\\0\u0026#39;){ // printf(\u0026#34;ps: %c\\n\u0026#34;,pS[count] ); pF[idx-1+count]=pS[count]; count++; } } Implementation of Stack Stack 구현\nPush, Pop, Isempty 만 구현\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #define expand 5 void Push(int* pStk, int* pT); int Pop(int* pStk, int* pT); void DataDisplay(int *pStk, int* pT); void clearbuff(); void isEmpty(); int expand_stack(); int main() { // int Stack[5]; int top = 0; int nMenu = 0; int delVal = 0; int max_element=0; int *Stack=(int*)malloc(sizeof(int)*expand); max_element=expand; while (1) { printf(\u0026#34;============== 스택 구조 삽입/삭제 프로그램 ==============\\n\u0026#34;); printf(\u0026#34;1. 데이터 삽입 2. 데이터 삭제 3. isEmpty? 4. 종료\\n\u0026#34;); printf(\u0026#34;메뉴 선택 : \u0026#34;); scanf(\u0026#34;%d\u0026#34;, \u0026amp;nMenu); clearbuff(); switch (nMenu) { case 1: if (top == max_element) { printf(\u0026#34;스택 메모리 Overflow !!\\n\\n\u0026#34;); DataDisplay(Stack, \u0026amp;top); printf(\u0026#34;Memory increse %d byte\\n\\n\u0026#34;,expand_stack(Stack,top,\u0026amp;max_element)); break; } Push(Stack, \u0026amp;top); DataDisplay(Stack, \u0026amp;top); break; case 2: if (top == 0) { printf(\u0026#34;스택 메모리 Underflow !!\\n\\n\u0026#34;); DataDisplay(Stack, \u0026amp;top); break; } delVal = Pop(Stack, \u0026amp;top); printf(\u0026#34;삭제된 데이터 : %d\\n\\n\u0026#34;, delVal); DataDisplay(Stack, \u0026amp;top); break; case 3: isEmpty(); break; case 4: printf(\u0026#34;프로그램 종료\\n\u0026#34;); break; } if (nMenu == 3) break; } return 0; } int expand_stack(int *before_stack,int pT,int *limit_elements){ int resize=0; printf(\u0026#34;\\nresize:%d\\n\u0026#34;,pT); before_stack=(int*)realloc(before_stack,sizeof(int)*pT); *limit_elements+=(sizeof(int)*pT)+pT; return (sizeof(int)*pT)+pT; } void isEmpty(int *pStk,int *top){ if(pStk[0]==\u0026#39;\\0\u0026#39;){ printf(\u0026#34;Stack is empty\\n\u0026#34;); } else{ printf(\u0026#34;Stack is not empty\\n\u0026#34;); printf(\u0026#34;Top elements is %d\\n\u0026#34;,*(top-1) ); } } void Push(int* pStk, int* pT) {\tint input=0; scanf(\u0026#34;%d\u0026#34;,\u0026amp;input); if(*pT==0){ pStk[*pT]=input; *pT+=1; } else{ pStk[*pT]=input; *pT+=1; } clearbuff(); } int Pop(int* pStk, int* pT) {\tint out=0; out=pStk[*pT-1]; pStk[*pT-1]=\u0026#39;\\0\u0026#39;; *pT-=1; return out; } void DataDisplay(int *pStk, int* pT) { for (int i = 0; i \u0026lt; *pT; ++i) { if(i==0){ printf(\u0026#34;bottom=\u0026gt; %d \u0026#34;,pStk[i] ); } else{ printf(\u0026#34;| %d \u0026#34;,pStk[i]); } if(i==*pT-1)printf(\u0026#34;\u0026lt;=top\u0026#34;); } printf(\u0026#34;\\nElements : %d\\n\u0026#34;,*pT); } void clearbuff(){ while(getchar()!=10); } ","date":"June 15, 2018","hero":"/images/rand_images/vackground-com.jpg","permalink":"https://codex-devlab.github.io/posts/study/sub-programming-language/1-byte-unit-access-by-forced-casting/","summary":"\u003ch2 id=\"1byte-access\"\u003e\u003ca href=\"https://github.com/ehdwn1991/Embeded.study/blob/master/C_programing/0615/address_swap.c\" target=\"_blank\" rel=\"noopener\"\u003e1Byte access\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003e강제 캐스팅에 의한 1byte 단위 접근 방법\u003c/code\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e다음과\u003c/span\u003e \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e같이\u003c/span\u003e \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e출력되도록\u003c/span\u003e \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e코드를\u003c/span\u003e \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e짜시오\u003c/span\u003e.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003etemp : \u003cspan style=\"color:#ae81ff\"\u003e0x12345678\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003etemp : \u003cspan style=\"color:#ae81ff\"\u003e0x78563412\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// 강제 캐스팅에 의한 1byte 접근법\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;stdio.h\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e(){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003echar\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003es;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003echar\u003c/span\u003e swap_char;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e temp\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0x12345678\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\ts\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003echar\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e)\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003etemp; \u003cspan style=\"color:#75715e\"\u003e//4byte의 값을 1byte씩 접근\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// a=(char)\u0026amp;temp; 변수 자료형의 형변환\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eprintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;temp : 0x%x\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e,temp );\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tswap_char\u003cspan style=\"color:#f92672\"\u003e=*\u003c/span\u003es;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003es\u003cspan style=\"color:#f92672\"\u003e=*\u003c/span\u003e(s\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e(s\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e)\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003eswap_char;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tswap_char\u003cspan style=\"color:#f92672\"\u003e=*\u003c/span\u003e(s\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e(s\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e)\u003cspan style=\"color:#f92672\"\u003e=*\u003c/span\u003e(s\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e(s\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e)\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003eswap_char;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eprintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;temp : 0x%x\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e,temp );\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e이런 방법론은 Endian 문제에 적용시킬수 있다. Little Endian 과 Big Endian 과의 데이터 불일치가\u003c/p\u003e","tags":["Study","C","Theory","Embeded"],"title":"강제 캐스팅에 의한 1byte 단위 접근 방법"},{"categories":null,"contents":"Find the prime number 에라토스테네스의 체 소수 찾기\nint N,count=1; printf(\u0026#34;에라토스테네스의 체 소수 찾기\\nN까지의 소수를 찾습니다.\\ninsert: \u0026#34;); scanf(\u0026#34;%d\u0026#34;,\u0026amp;N); char *arr=(char*)malloc(sizeof(char)*N); memset(arr,1,sizeof(char)*N); puts(arr); for (int i = 2; (i*i)\u0026lt;= N; ++i) //루트 N까지만 체크 { if(arr[i]==1){ for (int j = i*i; j \u0026lt; N; j+=i) { arr[j]=0;//1 is prime 0 is not prime } } } for (int i = 2; i \u0026lt; N; ++i) { if(arr[i]==1){ printf(\u0026#34;%d \u0026#34;,i); if(count%10==0) puts(\u0026#34;\u0026#34;); count++; } } free(arr); puts(\u0026#34;\u0026#34;); Buble sort Buble 정렬\nint buff[5] = { 7, 2, 9, 3, 8 }; int idx = 0; int cnt = 0; int temp = 0; int len = 0; len = sizeof(buff) / sizeof(int); printf(\u0026#34;----정렬 전 데이터 출력----\\n\u0026#34;); for (idx = 0; idx \u0026lt; len; idx++) { printf(\u0026#34;%3d \u0026#34;, buff[idx]); } printf(\u0026#34;\\n\\n\u0026#34;); for (int i = 0; i \u0026lt; len; ++i) { for (int j = len-1; j \u0026gt;i; --j) { if(buff[j-1]\u0026gt;buff[j]){ temp=buff[j-1]; buff[j-1]=buff[j]; buff[j]=temp; } } } printf(\u0026#34;----정렬 후 데이터 출력----\\n\u0026#34;); for (idx = 0; idx \u0026lt; len; idx++) { printf(\u0026#34;%3d \u0026#34;, buff[idx]); } printf(\u0026#34;\\n\u0026#34;); Area of ​​circle double radius=0; printf(\u0026#34;원의 반지름 입력 : \u0026#34;); scanf(\u0026#34;%lf\u0026#34;, \u0026amp;radius); printf(\u0026#34;반지름에 따른 원의 넓이 : %.3lf\\n\u0026#34;, radian(radius)); clearbuff(); Calculator int a=0,b=0; char operater; printf(\u0026#34;x(operater)y 순으로 입력해주세요.\\n\u0026#34;); scanf(\u0026#34;%d%c%d\u0026#34;,\u0026amp;a,\u0026amp;operater,\u0026amp;b); switch(operater){ case \u0026#39;+\u0026#39;: printf(\u0026#34;%d%c%d=%d\\n\u0026#34;,a,operater,b,add(a,b) ); break; case \u0026#39;-\u0026#39;: printf(\u0026#34;%d%c%d=%d\\n\u0026#34;,a,operater,b,sub(a,b) ); break; case \u0026#39;*\u0026#39;: printf(\u0026#34;%d%c%d=%d\\n\u0026#34;,a,operater,b,mutiple(a,b) ); break; case \u0026#39;/\u0026#39;: printf(\u0026#34;%d%c%d=%.1f\\n\u0026#34;,a,operater,b,div_my(a,b) ); break; } ... int add(int a,int b){ return a+b; } int sub(int a,int b){ return a-b; } int mutiple(int a,int b){ return a*b; } double div_my(int a,int b){ return (double)a/b; } ","date":"June 14, 2018","hero":"/images/rand_images/sigmund.jpg","permalink":"https://codex-devlab.github.io/posts/study/sub-algorithms/etc-problems/basic-problem/","summary":"\u003ch2 id=\"find-the-prime-number\"\u003eFind the prime number\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003e에라토스테네스의 체 소수 찾기\u003c/code\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e N,count\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eprintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;에라토스테네스의 체 소수 찾기\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003eN까지의 소수를 찾습니다.\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003einsert: \u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003escanf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;%d\u0026#34;\u003c/span\u003e,\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003eN);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003echar\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003earr\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003echar\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e)\u003cspan style=\"color:#a6e22e\"\u003emalloc\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003esizeof\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003echar\u003c/span\u003e)\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003eN);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ememset\u003c/span\u003e(arr,\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e,\u003cspan style=\"color:#66d9ef\"\u003esizeof\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003echar\u003c/span\u003e)\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003eN);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eputs\u003c/span\u003e(arr);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e;  (i\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003ei)\u003cspan style=\"color:#f92672\"\u003e\u0026lt;=\u003c/span\u003e N; \u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003ei) \u003cspan style=\"color:#75715e\"\u003e//루트 N까지만 체크\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e(arr[i]\u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e j \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e i\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003ei; j \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e N; j\u003cspan style=\"color:#f92672\"\u003e+=\u003c/span\u003ei)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                arr[j]\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\u003cspan style=\"color:#75715e\"\u003e//1 is prime 0 is not prime\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e            }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e; i \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e N; \u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003ei)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e(arr[i]\u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003eprintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;%d \u0026#34;\u003c/span\u003e,i);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e(count\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e10\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#a6e22e\"\u003eputs\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            count\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efree\u003c/span\u003e(arr);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eputs\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"buble-sort\"\u003eBuble sort\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003eBuble 정렬\u003c/code\u003e\u003c/p\u003e","tags":["Study","C","Algorithms","Prime Number","Sort"],"title":"기초 문제"},{"categories":null,"contents":"Variety of star 다양한 삼각형 출력\nregular triangle * *** ***** ******* ********* right align of regular triangle * ** *** **** ***** right align of regular triangle * ** *** **** ***** Inverted triangle ********* ******* ***** *** * Left align of inverted triangle ***** **** *** ** * Right align of inverted triangle ***** **** *** ** * int input; int space=0; int state_num=0; scanf(\u0026#34;%d\u0026#34;,\u0026amp;input); printf(\u0026#34;\\nregular triangle\\n\u0026#34;); space=input; for(int i=0;i\u0026lt;input;i++){ for(int k=0;k\u0026lt;space-1;k++) printf(\u0026#34; \u0026#34;); for(int j=0;j\u0026lt;2*i+1;j++){ printf(\u0026#34;*\u0026#34;); } space--; printf(\u0026#34;\\n\u0026#34;); } space=0; printf(\u0026#34;\\nright align of regular triangle\\n\u0026#34;); space=input-1; for (int i = 0; i \u0026lt; input; ++i) { for (int k = 0; k \u0026lt; space; ++k) { printf(\u0026#34; \u0026#34;); } for (int j = 0; j \u0026lt; input-space; ++j) { printf(\u0026#34;*\u0026#34;); } printf(\u0026#34;\\n\u0026#34;); space--; } printf(\u0026#34;\\nright align of regular triangle\\n\u0026#34;); space=input-1; for (int i = 0; i \u0026lt; input; ++i) { for (int j = 0; j \u0026lt; input-space; ++j) { printf(\u0026#34;*\u0026#34;); } printf(\u0026#34;\\n\u0026#34;); space--; } printf(\u0026#34;\\nInverted triangle\\n\u0026#34;); for (int i = 0; i \u0026lt; input; ++i) { for (int j = 0; j \u0026lt; i; ++j) { printf(\u0026#34; \u0026#34;); } for (int k = (2*i)+1; k \u0026lt;=(input*2-1) ; ++k) { printf(\u0026#34;*\u0026#34;); } puts(\u0026#34;\u0026#34;); } space=0; //inverted triangle left printf(\u0026#34;\\nLeft align of inverted triangle\\n\u0026#34;); for (int i = 0; i \u0026lt; input; ++i) { for (int k = 0; k \u0026lt; input-space; ++k) { printf(\u0026#34;*\u0026#34;); } space++; printf(\u0026#34;\\n\u0026#34;); } space=0; printf(\u0026#34;\\nRight align of inverted triangle\\n\\n\u0026#34;); //inverted triangle right for (int i = 0; i \u0026lt; input; ++i) { for (int j =0 ; j \u0026lt; space; ++j) { printf(\u0026#34; \u0026#34;); } for (int k = 0; k \u0026lt; input-space; ++k) { printf(\u0026#34;*\u0026#34;); } space++; printf(\u0026#34;\\n\u0026#34;); } Applied multiplication 구구단 이쁘게 출력\n2*1=2\t3*1=3\t4*1=4\t5*1=5\t2*2=4\t3*2=6\t4*2=8\t5*2=10\t2*3=6\t3*3=9\t4*3=12\t5*3=15\t2*4=8\t3*4=12\t4*4=16\t5*4=20\t2*5=10\t3*5=15\t4*5=20\t5*5=25\t2*6=12\t3*6=18\t4*6=24\t5*6=30\t2*7=14\t3*7=21\t4*7=28\t5*7=35\t2*8=16\t3*8=24\t4*8=32\t5*8=40\t2*9=18\t3*9=27\t4*9=36\t5*9=45\t6*1=6\t7*1=7\t8*1=8\t9*1=9\t6*2=12\t7*2=14\t8*2=16\t9*2=18\t6*3=18\t7*3=21\t8*3=24\t9*3=27\t6*4=24\t7*4=28\t8*4=32\t9*4=36\t6*5=30\t7*5=35\t8*5=40\t9*5=45\t6*6=36\t7*6=42\t8*6=48\t9*6=54\t6*7=42\t7*7=49\t8*7=56\t9*7=63\t6*8=48\t7*8=56\t8*8=64\t9*8=72\t6*9=54\t7*9=63\t8*9=72\t9*9=81 int tens,unit; int count=0; count=2; for (int i = 2; i \u0026lt; 10; ++i) { for (int j = 1; j \u0026lt; 10; ++j) { for (int k = 0; k \u0026lt; 4; ++k) { printf(\u0026#34;%d*%d=%d\\t\u0026#34;,i+k,j,(i+k)*j ); } puts(\u0026#34;\u0026#34;); } i+=3; } Serial of alphabet N번째 부터 연속된 알파벳 출력\ninsert one word: t t tu tuv tuvw tuvwx tuvwxy tuvwxyz char input; char point_en; printf(\u0026#34;insert one word: \u0026#34;); scanf(\u0026#34;%c\u0026#34;,\u0026amp;input); point_en=input; while((input)\u0026lt;=\u0026#39;z\u0026#39;){ for (int i = 0; point_en+i \u0026lt;= input; ++i) { printf(\u0026#34;%c\u0026#34;,point_en+i ); } input++; printf(\u0026#34;\\n\u0026#34;); } ","date":"June 12, 2018","hero":"/images/rand_images/emile-perron.jpg","permalink":"https://codex-devlab.github.io/posts/study/sub-algorithms/etc-problems/various-pattern-output/","summary":"\u003ch2 id=\"variety-of-star\"\u003eVariety of star\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003e다양한 삼각형 출력\u003c/code\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eregular triangle\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   \u003cspan style=\"color:#f92672\"\u003e***\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#f92672\"\u003e*****\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e \u003cspan style=\"color:#f92672\"\u003e*******\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e*********\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eright align of regular triangle\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   \u003cspan style=\"color:#f92672\"\u003e**\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#f92672\"\u003e***\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e \u003cspan style=\"color:#f92672\"\u003e****\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e*****\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eright align of regular triangle\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e**\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e***\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e****\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e*****\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInverted triangle\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e*********\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e \u003cspan style=\"color:#f92672\"\u003e*******\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#f92672\"\u003e*****\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   \u003cspan style=\"color:#f92672\"\u003e***\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eLeft align of inverted triangle\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e*****\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e****\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e***\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e**\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eRight align of inverted triangle\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e*****\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e \u003cspan style=\"color:#f92672\"\u003e****\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#f92672\"\u003e***\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   \u003cspan style=\"color:#f92672\"\u003e**\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e input;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e space\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e state_num\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003escanf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;%d\u0026#34;\u003c/span\u003e,\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003einput);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eprintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003eregular triangle\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tspace\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003einput;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;i\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003einput;i\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e k\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;k\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003espace\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e;k\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e) \u003cspan style=\"color:#a6e22e\"\u003eprintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34; \u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e j\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;j\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003ei\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e;j\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t\u003cspan style=\"color:#a6e22e\"\u003eprintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;*\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\tspace\u003cspan style=\"color:#f92672\"\u003e--\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#a6e22e\"\u003eprintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\tspace\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003eprintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003eright align of regular triangle\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\tspace\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003einput\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e; i \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e input; \u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003ei)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e k \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e; k \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e space; \u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003ek)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t\u003cspan style=\"color:#a6e22e\"\u003eprintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34; \u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e j \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e; j \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e input\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003espace; \u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003ej)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t\u003cspan style=\"color:#a6e22e\"\u003eprintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;*\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#a6e22e\"\u003eprintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\tspace\u003cspan style=\"color:#f92672\"\u003e--\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003eprintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003eright align of regular triangle\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\tspace\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003einput\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e; i \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e input; \u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003ei)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e j \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e; j \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e input\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003espace; \u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003ej)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t\u003cspan style=\"color:#a6e22e\"\u003eprintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;*\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#a6e22e\"\u003eprintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\tspace\u003cspan style=\"color:#f92672\"\u003e--\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003eprintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003eInverted triangle\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e; i \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e input; \u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003ei)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e j \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e; j \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e i; \u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003ej)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t\u003cspan style=\"color:#a6e22e\"\u003eprintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34; \u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e k \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e (\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003ei)\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e; k \u003cspan style=\"color:#f92672\"\u003e\u0026lt;=\u003c/span\u003e(input\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e) ; \u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003ek)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t\u003cspan style=\"color:#a6e22e\"\u003eprintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;*\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#a6e22e\"\u003eputs\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\tspace\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#75715e\"\u003e//inverted triangle left\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003eprintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003eLeft align of inverted triangle\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e; i \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e input; \u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003ei)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e k \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e; k \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e input\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003espace; \u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003ek)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t\u003cspan style=\"color:#a6e22e\"\u003eprintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;*\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\tspace\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#a6e22e\"\u003eprintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\tspace\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003eprintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003eRight align of inverted triangle\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\n\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#75715e\"\u003e//inverted triangle right\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e; i \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e input; \u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003ei)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e j \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e ; j \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e space; \u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003ej)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t\u003cspan style=\"color:#a6e22e\"\u003eprintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34; \u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e k \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e; k \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e input\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003espace; \u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003ek)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t\u003cspan style=\"color:#a6e22e\"\u003eprintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;*\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\tspace\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#a6e22e\"\u003eprintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"applied-multiplication\"\u003eApplied multiplication\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003e구구단 이쁘게 출력\u003c/code\u003e\u003c/p\u003e","tags":["Study","C","Algorithms","Loop","Pattern"],"title":"다양한 패턴 출력"},{"categories":null,"contents":" 사실 이제는 WSL이 너무 잘되어 있어서 굳이 쓸 필요는 없어요! 하지만, 간혹 제한적인 환경에서는 가볍고 사용하기 편한 Git Bash 추천드립니다!\nWindow 환경에서의 설정이에요. MinGW를 쓰는 Git bash를 사용했습니다. Git for Window\n다들 Git-Hub를 사용해보려 하는데 힘든 부분들이 많죠?ㅠㅠ\n저도 처음 접할때는 어떻게 동작하는지도 모르고 무작정 맨땅에 헤딩\u0026hellip;\n아무튼 지금쯤 검색하셔서 들어오신거면, 깃허브에 가입은 완료 했고\n아마 repository 까지는 생성 하셨을거 같아요.\n이제 본격적으로 로컬에서 깃허브에 파일을 업로드 하는 방법을 포스팅 하려고 합니다.\n제가 Mac os를 쓸때는 바로 터미널에서 깃을 설치하여서 사용했는데요.\nWindow에서 저는 Git Bash를 사용했습니다. 아무래도 터미널 사용에 적응이 되서 Bash가 편하드라구요.\nGit Bash 설치 Bash 설치는 https://git-for-windows.github.io/ 에서 설치할수 있어요.\n설치시에 따로 설정하는건 없으니 우선 가볍게 설치먼저 해주시구요.\nSSH Key생성 및 등록 우선 본인의 깃허브에 로그인해서 오른쪽 상단에 집 모양 아이콘이 있어요.\n그리고 Settings에 들어가고 나면 SSh and GPG KEY 라는 칸이 보일꺼에요\n저는 맥 에어도 등록 했고 윈도우에서도 등록을 해놔서 두개의 SSH 키가 있네요.\nSSH 키는 자동 로그인 같은 기능이라고 생각하시면 되요.\n작업하는 컴퓨터에서 깃에 업로드 할때마다 불필요한 로그인을 할필요가 없어요.\nGit Bash 초기 설정 이제 여러분들이 설치한 Git Bash를 실행해서 로그인 정보를 등록할꺼에요.\n$ git config --global user.name \u0026lt;이름\u0026gt; ex)git config --global user.name Codex $ git config --global user.email \u0026lt;이메일\u0026gt; ex)git config --global user.email Codex@gmail.com 이런식으로 bash에서 등록을 해줍니다.\nSSH KEY 생성 Git-Hub에 제 SSH Key를 등록 할꺼에요.\n그전에 SSH Key를 생성해야겠죠?\nbash에 ssh-keygen 을 입력해 주세요.\n$ssh-keygen 그럼 요렇게 생성이 될꺼에요.\nKey를 생성하면 .ssh 라는 숨김 폴더가 생성되고\n그안에 두가지 파일이 생성될꺼에요.\nid_rsa, id_rsa.pub\n자 그럼 생성이 제대로 되었는지 확인해 볼까요?\nbash에서 ssh key가 있는 디렉토리로 이동을 해야해요.\n$ cd C:/users/user/.ssh 보통 위치가 C:\\Users\\사용자계정.ssh 이곳에 있어욤.\n자 그럼 위치도 확인 했으니 id_rsa.pub 의 내용은 복사해서 Git의 SSH Key에 등록해줘야 해요.\n간단하게 Bash상에서 vi id_rsa.pub 을 해주셔서 내용을 복사하셔도 되구요.\n$ cat id_rsa.pub 을 해주셔도 됩니다. 아무튼 id_rsa.pub에 나오는 모든 내용을 복사해 주세요.\nssh-rsa 부터 맨 마지막에 본인의 이메일 주소가 나온곳까지 복사해 주세요.\nSSH KEY 등록 Git-Hub등록을 해줄 차례에요.\n저번처럼 Setting에 들어오셔서 ssh key를 추가하시면\n요롷게 간단하게 추가해주시면 됩니다.\n마지막으로 Add SSH key를 눌러주시면 완료!!!\n그럼 다음 포스팅에서 본격적으로 Git에 업로드 하는법을 올려볼께요~~\n읽어주셔서 감사하고, 언제나 화이팅 하세요~~\n궁금하신것은 언제든 댓글로 물어봐주세요~~\n","date":"June 11, 2018","hero":"/images/rand_images/christian-wiediger.jpg","permalink":"https://codex-devlab.github.io/posts/os/sub-window/window-git-setting/","summary":"\u003cblockquote\u003e\n\u003cp\u003e사실 이제는 WSL이 너무 잘되어 있어서 굳이 쓸 필요는 없어요!\n하지만, 간혹 제한적인 환경에서는 가볍고 사용하기 편한 Git Bash 추천드립니다!\u003c/p\u003e\u003c/blockquote\u003e\n\u003cblockquote\u003e\n\u003cp\u003eWindow 환경에서의 설정이에요. MinGW를 쓰는 Git bash를 사용했습니다.\n\u003ca href=\"https://gitforwindows.org/\" target=\"_blank\" rel=\"noopener\"\u003eGit for Window\u003c/a\u003e\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e다들 Git-Hub를 사용해보려 하는데 힘든 부분들이 많죠?ㅠㅠ\u003c/p\u003e\n\u003cp\u003e저도 처음 접할때는 어떻게 동작하는지도 모르고 무작정 맨땅에 헤딩\u0026hellip;\u003c/p\u003e\n\u003cp\u003e아무튼 지금쯤 검색하셔서 들어오신거면, 깃허브에 가입은 완료 했고\u003c/p\u003e\n\u003cp\u003e아마 repository 까지는 생성 하셨을거 같아요.\u003c/p\u003e\n\u003cp\u003e이제 본격적으로 로컬에서 깃허브에 파일을 업로드 하는 방법을 포스팅 하려고 합니다.\u003c/p\u003e","tags":["Window","Git","Git Bash","MinGW"],"title":"Git 설치 및 초기설정"},{"categories":null,"contents":"Working in Hydejack _config.yml, Gemfile 의 초기 설정\njekyll을 시작하기 전에 필요한플러그 인이나 기본 설정을 완료해야한다.\n_config.yml\n블로그의 URL, Name, DIsqus, Collection, Markdown Converter\u0026hellip;등\njekyll이 동작하고 블로그에 필요한 초기 정보를 담고 있다.\n주로 플러그인과 블로그의 설정.\nGemfile\n주로 해당 블로그에 적용되는 플러그인이 gem으로 동작할수있게 명시해줌\n테마에 대한 remote나 jekyll의 버전 에 대한 정보를 담고있음\n루트 폴더에서 index.md를 찾아서 가장 먼저 보여준다\nindex.md에 있는 Fornt matter의 layout에 해당 하는 html문서를 템플릿처럼\n사용해서 동작함\n_layout 에 있는 layout 문서들은 _Include안에 문서들과 연동\n_include 안에는 head.html, body.html\u0026hellip; 등 다양한 기본 문서가 존재함\n여기 있는 문서들은 전부 웹페이지의 한 부분을 보여주기 위해 필요한 요소 들이다.\n만약 html만으로 웹페이지를 만들었다면 _include 안에 있는 문서들이 한곳에\n통합 되어 있을것이다. 하지만 효율적으로 캡슐화 하여 필요한곳에 쓰이게\n각 용도 별로 나눠져있다.\n웹페이지가 돌아가기 이전에 _js폴더에서 자바 스크립트가 동작\n웹알못이기 떄문에 이부분은 좀더 공부한 후에 작성\njekyll 에서 다양한 Collection이 있지만 기본적으로 구성된 Collection은 _post이다\n만약 다른 Collection이 없다면 jekyll 은 _post에 있는 Markdown문서들은 나열할것이다.\n하지만, _config.yml에 다른 Collection이 명시되어 있다면 해당 Collection은\n_post Collection을 먼저 rendering 하여 보여준다.\njekyll directory structure 지킬 기본 디렉토리 구조는 이런식입니다. 기본 구조를 알아두고 적용하고 싶은 테마에 구조와 비교해보면서 알아가는게 이해가 빠를것 같습니다.\n. ├── _config.yml (지킬 환경설정 정보) ├── _drafts (아직 게시하지 않은 초안으로 파일명 형식에 날짜가 없음) | ├── begin-with-the-crazy-ideas.textile | └── on-simplicity-in-technology.markdown ├── _includes (포스트 레이아웃이 들어 있는 폴더, 레이아웃의 헤더파일 같은것) | ├── footer.html | └── header.html ├── _layouts (실제 레이아웃이 존재하는 폴더, Liquid 태그를 사용함) | ├── default.html | └── post.html ├── _posts (게시한 포스트를 저장하는곳,날짜 명칭 형식을 반드시 맞춰야함) | ├── 2007-10-29-why-every-programmer-should-play-nethack.textile | └── 2009-04-26-barcamp-boston-4-roundup.textile ├── _data (사이트에 사용될 데이터가 저장되어 있는곳) | └── members.yml (site.data.members 라고 입력하면 해당 데이터 사용가능) ├── _site (지킬이 변환작업을 마친 포스트가 저장되는곳) ├── .jekyll-metadata (지킬이 동작하면서 빌드내역등에 대한 정보를 저장) └── index.html (yaml 머리말을 세션을 가진 모든 파일을 찾아 변환작업함) hydejack 구조\n지킬도 분명 index.html을 우선으로 보여줄것이다. 근데 지킬은 index.md를 우선시한다.\n기본구조에서 index.md 가 존재하는곳이 어딘지 보면 알기 쉽다.\n├──_data ├──_featured_categories ├──_featured_tags ├──_includes ├──_js ├──_layouts ├──_posts ├──_sass ├──assets (이미지 문서등 자원폴더) ├──_config.yml ├──404.md ├──about.md └──index.html Config _config.yml\nGithub page 깃허브 페이지에 호스팅 할때 url형식은 http://.github.io 의기본형식을 따른다. (따로 도메인을 설정하지 안았을때) baseurl 은 당신이 호스팅한 페이지에 따라 달라진다.\nPlugin _config 에서 다양한 플러그인과 현재 페이지의 각종 정보를 담고 있다.\n예를 들어 disqus의 기능을 추가하려고 할때 여기에 명시해 주어야한다.\n물론 font에 관한 내용도 여기에 들어가야한다. 일단은 그렇게만 알고 있고\n블로그를 만들어 가면서 파악하면될듯.\nPost _post\njekyll 는 다양한 collection을 생성할수 있다.\n하지만 기본적으로 post라는 collection을 가지고 있고, _post폴더에 있는 post 들을 보여준다.\nIssues\n포스트에 mycollection의 태그명을 추가해야함 Page 거의 모든 웹환경의 설정은 루트폴더에서 index.html 인 파일을 찾아 홈페이지로 보여줌 물론 지킬도 이런 관례를 따름\n페이지의 위치 html을 생성하는 위치에 따라 두가지 방법있음.\n사이트의 루트 폴더에 각 페이지병 HTML을 만든다. 사이트의 루트 폴더에 각 페이지 별 폴더를 만들고, 각 폴더에 index.html 파일을 만든다.(이게 좋아 보임) HTML파일에 이름쓰기\n루트 디렉토리에 생성하고자 하는 페이지 이름을 가진 HTML파일을 추가하는것\n. |-- _config.yml |-- _includes/ |-- _layouts/ |-- _posts/ |-- _site/ |-- about.html # =\u0026gt; http://yoursite.com/about.html |-- index.html # =\u0026gt; http://yoursite.com/ └── contact.html # =\u0026gt; http://yoursite.com/contact.html 디렉토리에 이름을 짓고 인덱스 HTML파일 넣기\n루트 폴더에 페이지마다 폴더를 만들고 그안에 index.html을 넣어주는것이 단순해 지고 관리가 쉬워짐\n. ├── _config.yml ├── _includes/ ├── _layouts/ ├── _posts/ ├── _site/ ├── about/ | └── index.html # =\u0026gt; http://yoursite.com/about/ ├── contact/ | └── index.html # =\u0026gt; http://yoursite.com/contact/ └── index.html # =\u0026gt; http://yoursite.com/ Collection Jekyll 에서 제공하는 Collection 정의 참고\nCollection은 티스토리 같은 블로그의 tag와 category기능이랑 비슷하다고 보면됩니다.\n물론 Jekyll 에서는 그런 기능들을 만들어줘야 할뿐입니다.\nHydejack에서 제공하는 Collections은 tag, category 이다.\n하지만 사용자에 의해서 따로 Collection을 설정하여 사용할수도있다.\n# 다음은 jekyll 루트 폴더의 Collection구조입니다. ./ ... ├── _featured_categories ├── _featured_tags ├── _my_collection ... # Hydejack이 제공하는 tag와 categry가 있지만 # 추가적으로 _my_collection을 만들었습니다. my collection을 tag나 category같은 기능 으로 사용하면서\nmy collection안에 작성된 post들을 새로운 분류로 나열 하려고함.\n_config.yml 에 collection 추가 # _config.yml # Collections collections: featured_categories: permalink: /category/:name/ output: true featured_tags: permalink: /tag/:name/ output: true my_collection: permalink: /my_collection/:name/ output: true 루트 폴더에 카테고리명으로 폴더 생성 ./ ... ├── _featured_categories ├── _featured_tags ├── _my_collection -\u0026gt; 반드시 폴더명은 collection이름 앞에 `_`를 붙여줘야합니다. ... _my_collection 폴더 안에 index.md생성 ./ ... ├── _my_collection ├── index.md ├── samplecollection.md ├── samplepost.md ... # index.md --- layout: default title: my collection list description: \u0026gt; my collection의 새로운 분류에 따른 카테고리 리스트를 보여주려 합니다. menu: true order: 1 --- # samplecollection.md --- layout: list title: 새로 분류할 collection 입니다. description: \u0026gt; slug: test -\u0026gt; tag나 category의 slug같은것 --- # samplepost.md --- layout: post title: sample post 입니다. description: \u0026gt; my_collection: [test] categories: [category_test] tags: [tag_test] --- 이제 기본 골격은 다 갖췄습니다.\nmy collection에서 보이고 싶은 포스트나 내용을 입맛에 맞게 바꾸면 됩니다.\nIssues\n콜렉션에서 새로 분류한 카테고리별로 리스팅 새로운 카테고리에서 해당 분류로 모아진 post listing 기존에 있던 list에서 my collection에 있는포스트를 못불러옴 Adding Sidebar in jekyll --- layout: page =\u0026gt;page 와 list중에 어울리는걸로 하면될듯 title: test_page =\u0026gt;사이드바에 표시될 이름 description: \u0026gt; =\u0026gt; 해당 사이드바에 대한 설명 test sidebar =\u0026gt; 여기부분부터 쓸때 반드시 스페이스바로 두칸 띄고 써야됨. 절대 탭이나 적거나 많게 띄면 에러남 menu: true =\u0026gt;이 속성을 넣어줘야 사이드바에 나타남 order: 7 =\u0026gt; 사이드 바에서 표시될 순서임 --- #사이드바에 추가하고 싶으면 폴더 이름은 아무거나 상관없음 #폴더 안에 index.md가 있어야 하고 위의 yaml 헤더가 있어야함. _featured_tags anytitle.md 를 만들고 위의 내용 넣어주면됨.\n폴더에 index.md 만들기 anytitle.md 만들고 위의 내용 넣어주면됨.\nSidebar\u0026amp;page\u0026amp;list example #먼저 testfolder를 사이드바에 추가하기 위해 #루트 위치에 같은 폴더 명을 만들어줬습니다. 물론 폴더명을 동일하게 만든것은 #그냥 보기 이쁘고 관리 하기 편할것 같아서 그런거지 굳이 일치 시킬필요는 없습니다. $ tree -L 2 . ... ├── testfolder ├──index.md ├── _post ├──... ├──2018-05-05-testpost.md ├──2018-05-05-testpage.md ├──... └── ... #저는 사이드바에 추가된 testfolder에 testpost로 태그된 목록들을 보여주려합니다. #물론 _post폴더 안의 testpost 와 testpage도 testpost로 태그되어 있습니다. 그럼 이제 밑의 사진 처럼 구성이 되어 있을것입니다.\n이제 각 폴더와 파일들을 상세하게 살펴보면 될것같습니다.\ntestfolder 테스트 폴더 안에는 index.md가 있습니다. 테마의 내부설정에 의해서 index.md를 우선으로\n읽어 오고 yaml헤더에 따라 용도와 방법이 구분됩니다. # index.md --- layout: list title: testfolder slug: testpost description: \u0026gt; test sidebar menu: true order: 1 --- 테스트 리스트 입니다. 현재 리스트는 testpost가 태그되어 있는 포스트들만 보여주고 있습니다. layout : list로 설정 하셔야 해당 태그로 연결된 포스트들을 보여줍니다. slug : 슬러그에 설정된 이름으로 관련된 태그를 가져옵니다. menu : sidebar에 추가 하기 위해선 true로 해줘야 합니다. order : 사이드바에서 보여질 순위입니다. 위의 그림에서 보면 첫번째로 위치함. 태그된 포스트들\n현재는 두가지의 다른 포스트를 준비했습니다.\n# 2018-05-05-testpost.md --- layout: post title: test_post date: 2018-05-10 16:06:59 +0900 tag: [testpost] --- 테스트 포스트입니다. 현재 태그는 testpost입니다. # 2018-05-05-testpage.md --- layout: page title: test_page date: 2018-05-10 16:06:59 +0900 tag: [testpost] --- 테스트 페이지입니다. 현재 태그는 testpost입니다. Authors about 페이지나 각 포스트들의 footer에 사용자의 사진과 정보가 표시될수있게함.\n_layout/about.html\nabout 페이지를 만들때 쓰임.\n{% raw %} # _layout/about.html {% assign plugins = site.plugins | default:site.gems %} \u0026lt;article class=\u0026#34;page\u0026#34; role=\u0026#34;article\u0026#34;\u0026gt; {% assign author = site.data.authors[page.author] | default:site.data.authors.first[1] | default:site.author %} 이부분이 _data안에 있는 authors.yml문서의 값을 불러옴 {% if author.picture %} {% include srcset-img.html class=\u0026#34;avatar\u0026#34; img=author.picture alt=author.name %} {% elsif plugins contains \u0026#39;jekyll-avatar\u0026#39; %} {% assign avatar = author.social.github | default:author.github.username | default:author.github %} {% include avatar-tag.html user=avatar %} {% endif %} \u0026lt;h1 class=\u0026#34;page-title hr\u0026#34;\u0026gt;{{ page.title }}\u0026lt;/h1\u0026gt; {{ author.about | markdownify }} {% include message.html text=page.description hide=page.hide_description alt=\u0026#34;\u0026#34; %} {{ content }} \u0026lt;/article\u0026gt; {% endraw %} _include/about.html\n_date/authors.yml\n여기 안에서 author1, author2 등으로 사용자의 이름, 주소, 사진, github 등을 정의함\nIssues\nabout페이지와 footer에 사진이 제대로 안나옴 Issue Github page defendency Problem Gemfile 에 다음 내용 추가\nrequire \u0026#39;json\u0026#39; require \u0026#39;open-uri\u0026#39; versions = JSON.parse(open(\u0026#39;https://pages.github.com/versions.json\u0026#39;).read) gem \u0026#39;github-pages\u0026#39;, versions[\u0026#39;github-pages\u0026#39;] $ bundle update $ bundle install Github Defendency version\nHeader tag by korean is not working 이부분에서 삽질 많이 했습니다. 웹알못이라 아무리 검색하고 찾아봐도\n이유를 알수가 없었습니다. 그리고 결국 해결했지만 완벽한 방법은 아닙니다.\n혹시라도 방법을 알고 계시다면 댓글에 써주세요 ㅠㅠ\n우선 문제의 내용을 보여 드릴꼐요.\n// 2018-01-01-test.md ... ## 내부링크 테스트 ... // 2018-01-01-test.html -\u0026gt;jekyll를 통해 html 변환후 ... \u0026lt;\u0026gt; ... ... 문제 해결을 위해 시도했던 방법들입니다.\nFont 교체(실패)\n혹시나 font의 문제 때문에 그런줄알고 google font 에서\n한글지원이 되는 폰트로 교체하였습니다. 하지만 실패\u0026hellip;\nNew collection listing 콜렉션에서 새로 분류한 카테고리별로 리스팅\n_my_collection폴더 안에 index.md의 기능 추가하고,\n새로운 레이아웃에 해당 기능을 추가하고 index.md에서 mycategory를 적용하여 해결.\nmy collection에 존재하는 class들의 리스트를 만들어줘야 한다.\n{% raw %} # _layout/mycategory.html \u0026lt;article class=\u0026#34;page\u0026#34; role=\u0026#34;article\u0026#34;\u0026gt; \u0026lt;header\u0026gt; \u0026lt;h1 class=\u0026#34;page-title\u0026#34;\u0026gt;{{ page.title }}\u0026lt;/h1\u0026gt; {% include message.html text=page.description hide=page.hide_description %} \u0026lt;/header\u0026gt; {{ content }} {% for test in site.my_collection %} {% if test.title != page.title %} {% if test.layout == \u0026#34;study_post\u0026#34; %} {% assign studycoll = test.title | join:\u0026#39;|\u0026#39; | append:\u0026#39;|\u0026#39; %} {% assign scoll = scoll | append:studycoll %} \u0026lt;h2\u0026gt;\u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;{{ test.url | prepend: site.baseurl }}\u0026#34;\u0026gt; {{ test.title }} \u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt;\u0026lt;/h2\u0026gt; {% endif %} {% endif%} {% endfor %} \u0026lt;/article\u0026gt; {% endraw %} # _my_collection/index.md --- layout: mycategory title: Study description: \u0026gt; menu: true order: 2 --- New collection classifying post 새로운 카테고리에서 해당 분류로 모아진 post listing\n새로 분류된 class에서 _my_collection 안에서 작성된 포스트들을 보여줘야한다.\n레이 아웃에 mylist.html 을 만들어서 해당 기능 넣고 해결.\n{% raw %} # _layout/mylist.html {% for post in site.my_collection %} {% if post.my_collection contains page.slug%} \u0026lt;li\u0026gt; \u0026lt;a href=\u0026#34;{{ post.url | relative_url }}\u0026#34; class=\u0026#34;h4 flip-title\u0026#34;\u0026gt; \u0026lt;span\u0026gt;{{ post.title }}\u0026lt;/span\u0026gt; \u0026lt;/a\u0026gt; \u0026lt;time class=\u0026#34;heading faded fine\u0026#34; datetime=\u0026#34;{{ post.date | date_to_xmlschema }}\u0026#34;\u0026gt; {{ post.date | date:list_entry }}\u0026lt;/time\u0026gt; \u0026lt;/li\u0026gt; {% endif%} {% endfor %} {% endraw %} # _my_collection/index.md --- layout: mylist title: 새로 분류할 collection 입니다. description: \u0026gt; slug: test -\u0026gt; tag나 category의 slug같은것 --- List layout can\u0026rsquo;t listing post in mycollection 기존에 있던 list에서 my collection에 있는포스트를 못불러옴\nHydejack에서 제공하는 list layout에서 mycollection에 있는 포스트중\ntag와 category 로 분류 되있는 포스트를 못불러옴.\nlist layout에 my collection에 있는 tag와 category를 가진 포스트를 불러오게끔 해서 해결\n{% raw %} # _layout/list.html ... {% assign category = site.featured_categories | where: \u0026#34;slug\u0026#34;, page.slug | first %} {% if category %} {% assign posts = site.categories[page.slug] %} {% assign s_category = site.my_collection | where:\u0026#34;categories\u0026#34;, page.slug%} {% assign posts = posts | concat: s_category %} {% else %} {% assign tag = site.featured_tags | where: \u0026#34;slug\u0026#34;, page.slug | first %} {% if tag %} {% assign posts = site.tags[page.slug] %} {% assign s_tag = site.my_collection | where:\u0026#34;tags\u0026#34;, page.slug%} {% assign posts = posts | concat: s_tag %} {% else %} {% assign posts = site.posts %} {% endif %} {% endif %} {% if posts%} {% assign posts = posts | sort: \u0026#39;date,title\u0026#39; | reverse %} {% endif%} ... {% endraw %} home Layout can\u0026rsquo;t show the post in mycollection _layout/default.html 에 mycollection내용도 보여지게 추가\n{% raw %} \u0026lt;!--fix--\u0026gt; {% assign allpost= site.posts %} {% assign study_post = site.study | where:\u0026#34;layout\u0026#34;, \u0026#34;post\u0026#34;%} {% assign allpost = allpost | concat: study_post %} {% if site.posts.size \u0026gt; 0 %} \u0026lt;h2 class=\u0026#34;hr\u0026#34;\u0026gt;{{ strings.posts | default:\u0026#34;Posts\u0026#34; }}\u0026lt;/h2\u0026gt; \u0026lt;ul class=\u0026#34;related-posts\u0026#34;\u0026gt; {% for post in allpost limit:10 %} {% include post-list-item.html post=post %} {% endfor %} \u0026lt;/ul\u0026gt; {% endif %} \u0026lt;!--fix--\u0026gt; {% endraw%} Can\u0026rsquo;t show picture in about page and footer about페이지와 footer에 사진이 안나옴\n./_date/author.yml 에서 srcset부분 삭제 해서 해결\n... srcset: 1x: https://placehold.it/128x128 2x: https://placehold.it/256x256 ... show the mycollection slug in any post 모든 포스트에서 mycollection의 slug표시\n_include/post.html에서 mycollection의 slug를 표시하도록 수정\n{% raw %} ... {% assign study_start = site.data.strings.study_start | default:\u0026#34;at \u0026#34; %} {% assign study_separator = site.data.strings.study_separator | default:\u0026#34;, \u0026#34; %} ... {% include tag-list.html tags=post.study meta=site.study start_with=study_start separator=study_separator %} ... {% endraw %} _data/strings.ymll에서 mycollection의 slug 표시방법 추가\n{% raw %} ... #Seperators study_start: \u0026#39;at \u0026#39; study_separator: \u0026#39;, \u0026#39; ... {% endraw %} 카테고리 페이지 나누기\nindex.md of location . ├── _data ├── _featured_tags ├── _includes ├── _js ├── _layouts ├── _posts ├── _sass ├── _site ├── assets ├── docs │ └── 7.5.1 │ └── index.md ├── index.md └── licenses Whole structure . ├── Gemfile ├── Gemfile.lock ├── LICENSE.md ├── NOTICE.md ├── _config.yml ├── _data ├── _featured_tags ├── _includes ├── _js ├── _layouts ├── _posts ├── _projects ├── _sass ├── _site ├── about.md ├── assets ├── docs ├── index.html ├── index.md ├── licenses └── posts.md Jekyll installation Ruby installation Refernce 참고해주세요.\nRVM\u0026amp;Ruby install 만약 OSX사용자시면, ruby가 깔려있습니다. 혹 모르니 brew install ruby 해주세요.\n$ gpg --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3 7D2BAF1CF37B13E2069D6956105BD0E739499BDB $ cd /tmp $ curl -sSL https://get.rvm.io -o rvm.sh $ less /tmp/rvm.sh $ cat /tmp/rvm.sh | bash -s stable --rails #여기서 에러 발생 #NOTE: GPG version 2.1.17 have a bug which cause failures during fetching keys from remote server. Please downgrade or upgrade to newer version (if available) or use the second method described above. #GPG signature verification failed for \u0026#39;/home/codex/.rvm/archives/rvm-1.29.3.tgz\u0026#39; - \u0026#39;https://github.com/rvm/rvm/releases/download/1.29.3/1.29.3.tar.gz.asc\u0026#39;! Try to install GPG v2 and then fetch the public key: # gpg2 --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3 #or if it fails: # command curl -sSL https://rvm.io/mpapis.asc | gpg2 --import - $ command curl -sSL https://rvm.io/mpapis.asc | gpg2 --import - $ cat /tmp/rvm.sh | bash -s stable --rails #반드시 username에 사용자명으로 바꿔서 넣어주세요. $ source /home/username/.rvm/scripts/rvm #RVM 설치 확인 $ rvm version rvm 1.29.3 (latest) by Michal Papis, Piotr Kuczynski, Wayne E. Seguin [https://rvm.io] $ rvm list known # MRI Rubies [ruby-]1.8.6[-p420] [ruby-]1.8.7[-head] # security released on head [ruby-]1.9.1[-p431] [ruby-]1.9.2[-p330] [ruby-]1.9.3[-p551] [ruby-]2.0.0[-p648] [ruby-]2.1[.10] [ruby-]2.2[.7] [ruby-]2.3[.4] [ruby-]2.4[.1] ruby-head ... # 여기서 주목해야 하는 부분은 시스템에서 제공하는 최신 루비 버전은 2.4.1이다 # 밑의 방식으로 설치하면 2.4.1의 버전이 설치되버림. $ rvm install ruby_version $ rvm list $ rvm use ruby_version http://jekyllrb-ko.github.io/docs/installation/ 에서 루비 설치홈에 가보면 최신버전은 ruby 2.5.1이다.\n루비 최신 버전 정보 개개인의 선택이겠지만 저는 맥에서 최신 버전을 설치 했기때문에\n다시 최신버전으로 재설치를 했어야 했습니다. ㅠㅠ\nosx와 우분투에서 각기 다른 버전의 ruby 때문에 문제 발생[해결]\n절대 우분투 환경에서 apt-get으로 ruby를 설치하시면 안됩니다. 옛날버전의 루비여서 jekyll를 사용하려고 하면 환경설정부터 각종 오류를 토해냅니다.\njekyll install $ gem install jekyll #다른 블로그에서는 bundler도 같이 설치하라는데 왜쓰는지 모르겠다. Using jekyll $ jekyll new [any_title] #처음 설정하는데 좀 오래걸려요. 끝날때 까지 절대 중단하지 말고 기다려주세요. $ cd [any_name] $ jekyll serve --watch #웹에서 http://127.0.0.1:4000/에 접속하면 로컬환경에서 돌아가는것을 확인가능. Git page publishing Git respository생성시 유저네임으로\n#유저네임.github.io 로 만들어줘야함 #생성후에 설정에서 깃 페이지로 만들어 주면끝. #이제 아까 jekyll 로 만들었던 폴더 통채로 #유저네임.github.io에 복사해서 업로드 시켜주면됨. $ cp -r [any_name]/. ./username.github.io $ cd username.github.io $ git add -all $ git commit -m test $ git push 이제 깃에 다시 들어서 셋팅에서 페이지 생성부분에 보면 내 깃 페이지 주소가 나올것이다. https://username.github.io 이런식으로 나올것이다 여기에 들어가서 Welcome 뜨면 성공\njekyll Usage 새로운 플러그인이나 환경 설정이 변경 되었을때 반드시\n추가된 내용이 적용되도록 번들을 이용해야 합니다.\n$ bundle install $ bundle update 로컬에서 실시간으로 웹페이지를 보고 싶다면\n$ jekyll serve --livereload #실시간으로 적용된 부분을 다시 보여줌 Google search 구글 웹마스터\n블로그 참고\n각 포털 검색등록\ngoogle analytics를 적용하기 위해서\n_include/ga.html을 작성하고\n_include/body.html에 ga.html을 Include 하도록 추가\nissue problem1 apt-get 으로 ruby 설치 했을때 에러\napt-get으로 ruby를 설치했더니 jekyll new할때\n#이런 에러를 토해냄 $ Bundler: ruby: No such file or directory -- /usr/lib/ruby/gems/2.3.0/gems/bundler-1.16.1/exe/bundle (LoadError) #확인해봤더니 #/usr/lib/ruby/gems/2.3.0/gems 에는 bundler가 없고 #/var/lib/gems/2.3.0/gems에 bundler가 존재 command curl -sSL https://rvm.io/mpapis.asc | gpg2 --import - problem2 osx와 우분투에서 각기 다른 버전의 ruby 때문에 문제 발생\n우분투에 ruby 2.5.1 최신 버전을 설치해야 했습니다.\n앞에서 rvm을 설치 했기 때문에 rvm 으로 설치 진행 하겠습니다.\n$ rvm remove ruby-2.4.1 $ rvm install ruby 2.5.1 $ ruby -v $ ruby 2.5.1p57 (2018-03-29 revision 63029) [x86_64-linux] $ gem install jekyll bundle osx에서 개발할때와 우분투에서 개발할때 루비 버젼이 달라서 에러를 토해냄. 맥은 기본적으로 루비가 설치되어 있고 brew를통해 최신 루비 설치가 가능함. 물론 rvm 으로 설치하는것이 이상적이지만 맥에서는 필요 없다고 판단이됨.\n맥 설치과정 자세(영어)\njekyll설치시 참고 블로그\n놀부님 블로그\nJekyll공식 페이지(한글)\n깔끔하게 정리\n시작부터 끝까지 조금 자세하게 설명되어있음\njekyll 추천 플러그인\njekyll 추천 테마 리스트1\njekyll 추천 테마 리스트2\n반응형 깔끔 선형 반응형 깔끔 메뉴 누르기 편함 가장 기본적임\n테마 적용법\njekyll 자세한 설명들\ngitpage 공식 설명 콩로그님 블로그 플러그인 자세함\n","date":"June 11, 2018","hero":"/images/rand_images/yancy-min.jpg","permalink":"https://codex-devlab.github.io/posts/blog-migration/sub-jekyll/","summary":"\u003ch1 id=\"working-in-hydejack\"\u003eWorking in Hydejack\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e_config.yml, Gemfile 의 초기 설정\u003c/p\u003e\n\u003cp\u003ejekyll을 시작하기 전에 필요한플러그 인이나 기본 설정을 완료해야한다.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e_config.yml\u003c/p\u003e\n\u003cp\u003e블로그의 URL, Name, DIsqus, Collection, Markdown Converter\u0026hellip;등\u003c/p\u003e\n\u003cp\u003ejekyll이 동작하고 블로그에 필요한 초기 정보를 담고 있다.\u003c/p\u003e\n\u003cp\u003e주로 플러그인과 블로그의 설정.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eGemfile\u003c/p\u003e\n\u003cp\u003e주로 해당 블로그에 적용되는 플러그인이 gem으로 동작할수있게 명시해줌\u003c/p\u003e\n\u003cp\u003e테마에 대한 remote나 jekyll의 버전 에 대한 정보를 담고있음\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e루트 폴더에서 index.md를 찾아서 가장 먼저 보여준다\u003c/p\u003e\n\u003cp\u003eindex.md에 있는 Fornt matter의 layout에 해당 하는 html문서를 템플릿처럼\u003c/p\u003e","tags":["Jekyll","Hydejack Theme","Manual"],"title":"Jekyll"},{"categories":null,"contents":"C언어 프로그램이란? 컴퓨터에서 실행될때 특정 작업을 수행 하는 일련의 명령어들의 모음이다.\n소프트웨어 공학 요구사항 분석 자료형 정의 등등 Flow chart 설계 및 구현(pseudo code) 코드 구현 실행 테스트 유지보수 CPU 구조 Control unit\u0026lt;-\u0026gt;ALU\u0026lt;-\u0026gt;Processor resister(R1,R2,R3\u0026hellip;) 위의 3가지 장치들이 Internal bus로 연결되어 통신한다.\nALU(Arithmetic logic unit )\n산술 논리 장치 : 실질적으로 산술, 논리 계산을 수행함.\nResister\nCPU의 자체적인 메모리저장 기능.\nMemory buffer register(MBR)\n​\tI/O로 보내지거나 메모리에 저장될 Word 혹은 I/O나 메모리로 부터 Word를 받는 것.\nMemory address register(MAR)\nInstruction register(IR)\nInstruction buffer register(IBR)\nProgram counter(PC)\nAccumulator (AC) and mutiplier quotient (MQ)\nControl unit\nCPU의 명령어를 제어한다.\n폰노이만 구조(최초의 컴퓨터 구조를 만듬) 폰노이만의 구조는 CPU, 메모리, 프로그램 구조를 갖는 프로그램 내장 방식 컴퓨터를 뜻한다.\n{: .center-image}\n폰노이만 구조(출처: 위키 백과사전) C 메모리 구조 {: width=\u0026ldquo;50%\u0026rdquo; height=\u0026ldquo;50%\u0026rdquo;}(출처 : https://bitsofcomputer.blogspot.com/)\nc언어에서의 메모리 구조를 알고 있다는것은 상당히 중요하다.\n주로 동적 할당 할때나 임베디드 시스템을 다룰때 메모리 구조와 영역을 알고 있으면 편하다.\nlocal variables can be stored either on the stack or in a data segment depending on whether they are auto or static. (if neither auto or static is explicitly specified, auto is assumed)\nglobal variables are stored in a data segment (unless the compiler can optimize them away, see const) and have visibility from the point of declaration to the end of the compilation unit.\nstatic variables are stored in a data segment (again, unless the compiler can optimize them away) and have visibility from the point of declaration to the end of the enclosing scope. Global variables which are not static are also visible in other compilation units (see extern).\nauto variables are always local and are stored on the stack.\nthe register modifier tells the compiler to do its best to keep the variable in a register if at all possible. Otherwise it is stored on the stack.\nextern variables are stored in the data segment. The extern modifier tells the compiler that a different compilation unit is actually declaring the variable, so don\u0026rsquo;t create another instance of it or there will be a name collision at link time.\nconst variables can be stored either on the stack or a readonly data segment depending on whether they are auto or static. However, if the compiler can determine that they cannot be referenced from a different compilation unit, or that your code is not using the address of the const variable, it is free to optimize it away (each reference can be replaced by the constant value). In that case it\u0026rsquo;s not stored anywhere.\nthe volatile modifier tells the compiler that the value of a variable may change at anytime from external influences (usually hardware) so it should not try to optimize away any reloads from memory into a register when that variable is referenced. This implies static storage.\ngeeks를 참고 하면서 공부해보자\nStorage class in C\n컴파일 과정 gcc compiler\nsource.c \u0026mdash;\u0026mdash;-\u0026gt; source.i \u0026mdash;\u0026mdash;-\u0026gt; source.s \u0026mdash;\u0026mdash;-\u0026gt; source.o \u0026mdash;\u0026mdash;-\u0026gt; source\n​ (precompile) (compiler) (assembler) (linker)\ngcc compile 과정 (출처: 제타위키) $ gcc test.c $ ls a.out 실행 파일 생성 $ gcc -c test.c test.o 오브젝트 파일 생성 $ gcc -o test.out test.o test.out 실행 파일이 생성됨 $ gcc -v --save-temps -o test.out test.c 컴파일 전체 과정을 보여주고 파일을 저장해줌 test.c test.i test.s test.o test.out C Concept 일단 이부분은 ISO/IEC 9899:TC3 의 표준을 보고 작성하였다.\nscope scope에 자세히 들어가기 전에 먼저 선행되야 하는 개념이있다.\nint i=0; 선언자 식별자 코딩을 하면서 int i 정수형 변수 선언은 그냥 자연스레 넘어갔었다.\n하지만 scope를 이해하기 위해서 더욱 자세하게 파고들어 보자.\n두가지 개념을 살펴보자.\nDeclarator 선언자 라고 하며, Type declarator라고도 한다.\n선언자의 역할은 변수의 형을 지정 하는것이다.\n위의 예제에 적용해 보자면 int 는 정수형 선언자 이다.\nIdentifier 식별자 라고하며, 형선언자로 인해 특정 데이터 형을 가질수 있는 변수가 된다.\nint 는 Type sepcifier(형식 지정자) 라고 한다.\n즉, i 는 int 형 변수에 대한 식별자이다.\n하지만 식별자는 반드시 변수에만 해당하는 것은 아니다.\n예를 들어 void main main은 void형 함수에 대한 식별자 이며,\nprintf() 는 printf 함수에 대한 식별자 이다.\nVisible 식별자는 오직 자신이 존재 하는 scope안에서만 사용될수 있다.\nInner Scope , Outer Scope의 개념을 이해 하는게 편할것 같다.\n예제를 살펴 보자.\n#include \u0026lt;stdio.h\u0026gt; int glo=10; void main(){ //scope 1 int a=3; { //scope 2 int b=4; { //scope 3 int c=8; printf(\u0026#34;a: %d b: %d c: %d glo: %d\\n\u0026#34;,a,b,c,glo ); } printf(\u0026#34;a: %d b: %d c: %d glo: %d\\n\u0026#34;,a,b,c,glo ); } printf(\u0026#34;a: %d b: %d c: %d glo: %d\\n\u0026#34;,a,b,c,glo ); } 이제 결과를 예상해 보자. 여태 배운 대로 라면 Inner scope 에서 선언된 식별자는\nouter scope에서 사용할수 없다. 그렇다면 scope 2 에서는 scope3 의 정수형 식별자\nc를 사용할수 없고, scope 1 에서는 정수형 식별자 b,c를 사용할수 없다.\n그럼 결과를 보자.\ntest.c:12:48: error: use of undeclared identifier \u0026#39;c\u0026#39; printf(\u0026#34;a: %d b: %d c: %d glo: %d\\n\u0026#34;,a,b,c,glo ); ^ test.c:14:42: error: use of undeclared identifier \u0026#39;b\u0026#39; printf(\u0026#34;a: %d b: %d c: %d glo: %d\\n\u0026#34;,a,b,c,glo ); ^ test.c:14:44: error: use of undeclared identifier \u0026#39;c\u0026#39; printf(\u0026#34;a: %d b: %d c: %d glo: %d\\n\u0026#34;,a,b,c,glo ); 당연히 outer scope에서 inner scope의 식별자를 사용하는것은 불가능하다.\n때문에 scope 2 에서는 scope 3 의 식별자를 사용할수 없고,\nscope 1 에서는 scope 2, scope 3 의 식별자를 사용할수 없다.\nC99 표준에 서는 Scope 에 대해 다음과 같이 정의하고 있다.\nIf so, the scope of one entity (the inner scope) will be a strict subset of the scope of the other entity (the outer scope).\nWithin the inner scope, the identifier designates the entity declared in the inner scope; the entity declared in the outer scope is hidden (and not visible) within the inner scope.\nValid scope 같은 이름과 형식(Same entities)의 식별자 들은 다른 scope에서 사용되거나,\n다른 파일(Different name space)에서 사용되어야 한다.\nVariety of Identifier 각 종류의 식별자는 그 자체의 scope를 가진다.\nfunction : 함수 내부에서의 식별자 function은 자체의 code block {} 안에서 선언된 식별자는\n해당 scope안에서만 사용될수 있으며, global, static 의 속성이 없으면,\n해당 scope 밖의 식별자를 사용할수 없다.\nfunction prototype : 함수 선언 parameter에서의 식별자 예를 들어 fuction을 선언 하고 사용 하기 위해선\n전처리 부분에 function에 대한 정보를 알려줘야 한다.\n예제를 보자\n#include \u0026lt;stdio.h\u0026gt; int add(int a,int b); // Function prototype int main(){ int a=1; printf(\u0026#34;%d\\n\u0026#34;,add(a,a)); } int add(int a, int b){ return a+b; } function prototype 안에서의 int a와 main함수 scope안의 int a 는\n중복 되지만 문제 되지 않는 이유는, 서로 다른 inner scope이기 때문에\n서로 영향을 주지 않는다.\nfile : 서로 다른 파일내부의 식별자 block : code block내의 식별자 file scope 와 block 은 다음 예제를 보고 이해해 보자.\n//In add.c #include \u0026lt;stdio.h\u0026gt; extern int test; int add(int a,int b); // Function prototype void main() //main도 main함수의 식별자 이다. { int i=1; //main 함수 code block안에 있는 정수형 식별자 i이다. // 즉 main function 안에 존재 하는 정수형 식별자 이다. int result=0; { // code block int b=10; printf(\u0026#34;i+b: %d\\n\u0026#34;,i+b); } result = add(i,i); //add도 add함수의 식별자 이름이다. printf(\u0026#34;%d\u0026#34;,result); //printf 도 printf함수의 식별자 printf(\u0026#34;%d\u0026#34;,test); } int add(int a, int b){ // add function내부에서 사용하는 함수 a,b 이다. return a+b; } //In sub.c //sub.c로 건너 오면 같은 이름의 식별자도 다른 name space에 존재하기 때문에 // 서로 영향을 주지 안는다. #include \u0026lt;stdio.h\u0026gt; static int result =0; //여기에 왜 static을 붙였을까? int test=100; int sub(int a,int b); void main() { int i=1; // add.c를 벗어난 다른 name space에서 사용된 같은 이름의 식별자이다. result = sub(i,i); printf(\u0026#34;%d\u0026#34;,result); } int add(int a, int b){ return a-b; } 위의 코드를 살펴 보면 특이 부분이 있다.\nstatic add.c 와 sub.c의 전역 변수중에 이름이 같은게 있다.\n두변수의 이름은 모두 result 이다. 하지만 해당 코드들은 실행시 에러가 발생하지 않는다.\n왜일까?\n예상 대로 라면 같은 이름의 전역변수는 data segment에서 충돌될것이다.\n하지만 전역변수에 staitc을 붙여 주면, 해당 전역 변수는\n해당 파일의 file scope를 벗어나지 못한다.\n때문에 sub.c의 result 는 sub file의 file scope 가 끝남과 동시에\n메모리에서 해제 된다.\nextern add.c 를 보면 extern int test 를 하고 있다.\n뭘까? test 식별자는 add.c file scope 내에는 존재하지 않는다.\n하지만 sub.c 를 보면 전역 변수로 int test=100 이 존재 한다.\n그럼 이제 어느정도 감이 왔을겄이다.\nextern은 file scope를 벗어나서 다른 file scope내에 있는\n전역 변수를 사용하고자 할때 쓰는것.\nextren 은 다른 file scope 의 전역 변수의 사용을 가능케 한다.\n그럼 이제 예시를 살펴보자.\n//t1.c #include \u0026lt;stdio.h\u0026gt; #include \u0026#34;t.h\u0026#34; extern int test; int main(){ printf(\u0026#34;%d\\n\u0026#34;,test ); test+=1; printf(\u0026#34;%d\\n\u0026#34;,test ); add(); } //t2.c #include \u0026lt;stdio.h\u0026gt; #include \u0026#34;t.h\u0026#34; int test=100; void add(int i){ printf(\u0026#34;%d\\n\u0026#34;,test ); } //t.h void add(); t1.c 는 t2.c 의 test를 가져 와서 출력후 1증가 한후 다시 출력해준다.\n그리고 add 함수를 호출하는데, 이 함수는 t2.c에 있다.\n그럼 t1.c에서 1을 증가 시켰던 test값이 t2.c에서 그대로 적용되는지 확인해 보는 예제이다.\n그럼 결과를 살펴 보자\n100 101 101 물론 t1.c에서 증가 시켰던 test의 값이 t2.c에서도 그대로 적용되었다.\n이러한 현상을 linkage 라고 한다.\n메모리에는 어떻게 저장되어 있을까?\ndata segment 에 저장되어 있다.\nextern으로 선언자를 지정해도 결국 초기화된 전역 변수 이므로 data segment에 저장된다.\n이제 scope에 대해 어느정도 이해를 했을 것이다.\n추후 내용에 Parameter 와 Argument 에 대한 내용이 나온다.\n이둘의 관계처럼 선언자와 식별자의 관계는 중요하다.\n상수, 변수 변수(Variable) : 정수, 실수, 문자, 문자열 등의 형태를 갖춘 가변 데이터.\n변수는 두가지 특징을 갖는다.\nScope - 특정 code block 안에서 실행, 참조된다.\nLife time - 특정 code block안에서 존재하고 벗어나면 소멸 한다\n일반 변수\n일반적으로 사용하는 자료형에 해당하는 대입 변수이다.\n//일반 변수 = 데이터 int a=4; double b=3.2; char p=\u0026#39;a\u0026#39;; 포인터 변수\nint temp_int=4; double temp_d=3.4; //포인터 변수 = 주소 int *a=\u0026amp;temp_int; int *c=\u0026amp;3; double *b=\u0026amp;temp_d; char *p=\u0026#34;abc\u0026#34;; 상수(Constant) : 값이 바뀌지 않는 데이터를 상수라 한다.\n변수 상수화\n변수 앞에 const를 붙여주면 상수가 된다.\nconst int a; =\u0026gt; 상수로 정해진 변수는 값을 바꾸는것이 불가\n매크로를 통한 상수화\n# define 을 통해서 상수를 만들수 있다. 매크로는 전처리기에 의해 변환 되고\n전역변수 처럼 사용 가능 하다. 위치는 헤더 파일 제일 밑에 사용해주면된다.\n#include \u0026lt;stdio.h\u0026gt; #define pi 3.14 #define poweroftwo 2 ex) 정수 상수 =\u0026gt; -2,-1,0,1,2,3\u0026hellip;.\n​ 실수 상수 =\u0026gt; -1.2, -0.2231, 3.14\u0026hellip;\n​ 문자 상수 =\u0026gt; \u0026lsquo;1\u0026rsquo;, \u0026lsquo;2\u0026rsquo; ,\u0026lsquo;ㄱ\u0026rsquo;,\u0026lsquo;A\u0026rsquo;,\u0026lsquo;a\u0026rsquo;\u0026hellip;\n​ 문자열 상수 =\u0026gt; \u0026ldquo;abc\u0026rdquo;, \u0026ldquo;ABC\u0026rdquo;\u0026hellip;\n정수형 상수의 컴파일후의 비트 형태\n정수형 상수는 컴파일되면 4바이트 크기의 2진수 형태로 변환 된다.\n예를 들어 정수 13이 컴파일 되면, 나머지 비트는 0으로 채워 지게 됩니다.\n0000 0000 0000 0000 0000 0000 0000 1101 \u0026lt;--MSB LSB--\u0026gt; 여기서 중요한 개념이 나옵니다. MSB와 LSB가 무었인가\nMSB는 Most significant bit 라 하며 가장 왼쪽의 비트는 전체 값에서 가장 큰 비중을 차지한다.\nLSB는 Least significant bit 라 하며 가장 오른쪽의 비트는 전체 값에서 가장 작은 비중을 차지한다.\n예를 들어,\n1000 0000(128) \u0026gt; 0111 1111(127) 극단 적인 예로 128과 127의 차이를 보면된다. 뇌피셜로는 비트가 1인 비트가 많을수록 숫자가 크다. 물론 맞는 말이지만 모든경우에 해당되지는 안는다. 위의 예처럼 오른쪽 7비트가 전부 1인 값보다 가장 왼쪽 1비트가 1인 값이 크다. 그렇다면, 비트가 큰값으로 움직일때는 MSB의 움직임을 보면될것이다. 만약 작은 단위로\n비트가 움직여야 한다면, LSB를 보면 되는데 이때 한가지 예를 살펴봐야 한다.\n(0x8E)1000 1101(141) --\u0026gt; (0x8D)1000 1110(142) 1가장 왼쪽 LSB의 1비트 움직임을 보일때 Niddle단위로 비트가 이동한다고 한다. 실수형 상수의 컴파일후의 비트 형태\nsingle, double, quad 세가지 형태가 있고, 그중에서 double형태를 살펴본다.\n0 00000000000 00000... 부호비트(1) 지수 저장 비트(11)\t소수 저장 비트(52) =\u0026gt; 8byte(64bit) //소소부 1 1 1 ... 2^-1 2^-2 2^-3 ... 위의 예시처럼 소수부는 2의 -n제곱의 형태를 띈다. 때문에 소수르 사용한 계산은 정확하지 안을수 있다. 2^-1 =\u0026gt; 1/2 이고 0.5이다. 2^-2 =\u0026gt; 1/4 이고 0.25이다 2^-3 =\u0026gt; 1/8 이고 0.125이다. 소수부분이 5의 나머지 연산으로 처리 되는점을 보면, 0.3 같은 표현은 다루기 힘들다. 강제 형변환 vs 자동 형변환 자동 형변환\n자동 형변환은 더 작은 자료형에서 더큰 자료형으로 assign할때 발생.\nint a=8,b=2; double b=a/b; printf(\u0026#34;%f\\n\u0026#34;,b); //실행결과 4.000000 우리가 원하는 값은 4였을 터이지만 실제 출력값은 4.000000이 나온다.\ndouble은 8바이트를 할당하고 지수부분에 11비트 소수부분이 52비트를 저장한다.\n때문에 지수부분 4와 소수부분 52비트 즉 6바이트 0.000000 이기 때문에\n소수점 밑으로 6자리를 표기한다.\n강제 형변환\n위와 같은 경우에서 원하는 값인 2로 표기할수도 있다.\nprintf(\u0026#34;%d\u0026#34;,(int)b); //실행결과 4 물론 강제 형변환은 포인터 에서도 많이 쓰인다.\n함수 포인터, byte access 를 참고.\n전달 인자(Argument)와 매개변수(Parapeter) int *a = \u0026amp;temp; 매개변수 전달인자 int add(int *a){} 매개변수 add(\u0026amp;temp); 전달인자 LIttle and Big Endian int a=1; =\u0026gt; 0x 00 00 00 01 Little Big |___01___|___00___| 0x7fff2ab9 |___00___|___00___| |___00___|___00___| |___00___|___01___| |________|________| 시스템마다 little endian, big endian 두가지 방법중 하나를 채택한다.\n하지만 다양한 종류의 컴퓨터들끼리 통신을 해야 하는데, 이때 데이터를 읽어서 저장하는 방법이\n다르다면 문제가 생긴다 때문에, 한가지로 통일해 줘야 한다.\n이떄 사용 되는 방법이 Byte Access이다\nDigital logic circuit(DLD) Bitwise 특정 비트 on/off\n예를들어 Led의 한부분을 껏다 켯다 하는 동작이 발생할수도 있다.\nLED와 연결되어 있는 특정 주소의 값에 한 비트를 on/off해야 동작 할때\n다음과 같은 비트 연산으로 수행 가능하다.\nres =\u0026gt; 0x 1111 0111 res\u0026amp;=~(0x01 \u0026lt;\u0026lt; 7); 0111 1111 (~res) \u0026amp; 1111 0111 (res) _____________ 0111 0111 =\u0026gt; 가장 오른쪽 1비트만 off가 되었다 이처럼 특정 비트를 on/off할때에 ~(not)과 \u0026amp;(and)연산이 필요하다. Basic of Loop 프로그래밍중에 실수와 의도에 의해서 무한 루프가 발생하거나 써야 하는 일이 있다.\n의도치 않은 무한 루프\n대부분 세미 콜론이나, 조건식을 잘못 써서 발생한다.\n//case1 int val=0; while(val\u0026lt;5); =\u0026gt; while문의 내용이 시작하기 전에 세미콜론을 사용하였다. { printf(\u0026#34;a\\n\u0026#34;); } 결과는 물론 무한 루프이다. while 문의 조건식을 잘못 적용 하였고 루프에 빠지게 될텐데, while 문의 내용이 시작하기 전에 세미 콜론으로 마무리 했다. 때문에 printf 는 while 문의 무한 루프 때문에 출력이 되질 않는다. //case2 int val=0; for(val=0;val\u0026lt;5;val++); =\u0026gt; for문의 내용이 시작도 전에 세미콜론이 찍혔다. { printf(\u0026#34;aa\\n\u0026#34;); } 이번엔 어떨까? aa가 5번 찍히는가? 아니다. for문의 내용이 시작도전에 세미콜론이 있기 때문에, for문만 5번 돌아가고나서 printf 는 한번만 사용된다. 즉 aa는 한번만 출력되는것!! 그럼 중괄호(\u0026#39;{}\u0026#39;)의 역할은 뭘까? 보통 중괄호는 코드의 영역을 나타낸다. 의도한 루프\nFirmware 등의 기본 동작에 필요한 경우가 있다. 혹은 지연 시간을 위해 고의적으로 넣는 경우도\n있는데, 지금은 펌웨어에서 필요로 하는 Polling 방식에 대해 기술해 보려 한다.\nPolling\n폴링방식은 하나의 프로그램에서 상태를 주기적으로 체크하여, 조건에 해당될때 송수신하는 목적이다.\n예를 들어 보자, 세탁기 같은 내장프로그램을 봤을때, 시작과 종료 후에 다시 시작을 눌러도\n기계는 작동한다. 이는 폴링 방식에 의해서 주기적으로 루프를 돌고 있기 때문이다.\nwhile(1){ 조건1 조건2 조건3 ... } 프로그램은 계속해서 주기적으로 조건이 만족한 명령을 수행후 다시 while 문 의 처음으로 돌아와서 처리한다. Interrupt\n인터럽트 방식은 특정 이벤트가 발생했을때 동작을 멈추고 해당 이벤트를 처리하는것\n주로 OS를 대표적인 예로 들수 있다. 만약 종료라는 이벤트가 발생한다면, cpu는 그즉시\n모든 연산을 멈추고 종료를 처리한다.\n물론 인터럽트 방식은 예기치 못한 상황에 대비할때 좋은 방법이다.\nArray 배열은 자료형의 집합이라고 생각할수 있다. 배열은 메모리 Stack 에 할당되며, main부분에 사용된\n배열은 프로그램 시작에 생성되고 종료시 삭제 된다. 하지만 함수 부분에서 사용한 배열은 함수 종료와 함께 사라진다. 때문에 동적할당의 필요성이 대두 될때가있다.\nint arr[5]; 여기서 int 는 배열의 자료형이고 arr은 배열명이다. 이제는 배열을 활용하는법을 알아야 한다.\n배열에 접근해서 직접 자료를 처리해서 프로그래밍을 해야한다.\n때문에 배열에 접근 하는 방법을 알필요가 있다.\n직접 접근(Direct access)\n배열에 직접적으로 접근하는 방법이다.\narr[0]=5; printf(\u0026#34;%d\\n\u0026#34;,arr[1]); 간접 접근(Indirect access)\n*(Asteric)에 관한 표현이 나오는데 이는 포인터의 개념이다.\n해당 주소의 값을 가져 온다고 생각 하면 된다.\n*arr=5; printf(\u0026#34;%d\\n\u0026#34;,*(arr+1)) 이제 배열을 사용하면서 주의해야 할사항들이 있다.\nint arr[5]; arr != arr[0] 배열의 시작 주소 배열의 0번째 값 *arr == \u0026amp;arr[0] 배열의 시작 주소 배열의 0번째 주소 배열의 시작 주소는 배열의 0번째 주소화 일치한다 arr이라는 배열명은 수정 불가능한 포인터 상수이다.\n만약 inr arr[5]; 선언후, arr의 주소가 0x2000번지 일때 0x3000번지로 수정하는것 불가!\n배열은 한번 스택에 할당 되면 고정된다.\n배열의 각 요소 들간의 차이는 배열의 자료형의 크기에 달려 있다.\narr[0] -\u0026gt; arr[1] -\u0026gt; arr[2] 0x0200 4byte 0x0204 4byte 0x0208 Shallow copy(얕은 복사) vs Deep copy(깊은 복사) Shallow copy(얕은 복사) Deep copy(깊은 복사) Function 함수는 3가지 단계이자 요소가 필요하다.\n함수의 원형\nmain문 시작전에 전저리 부분 다음에 기술해줘야 한다.\n#include \u0026lt;stdio.h\u0026gt; void display(); int add(int a,int b); 위의 예시처럼 원형을 기술할 때에는 매개변수부분은 써줘도되고 안써줘도 된다.\n함수의 호출\nint main(){ int res=0; int a=3,b=10; display(); res=add(10,20); printf(\u0026#34;%d\u0026#34;,add(a,b)); } 함수의 정의\nvoid display(int *ptr,int idx){ for(int i=0;i\u0026lt;idx;i++) printf(\u0026#34;%d has %d\\n\u0026#34;,i,*(ptr+i)); } Pointer 포인터라 하면 c언어의 포기하는 break point일지도 모른다. 하지만 포인터를 활용 하지못한다면\n다양항 프로그래밍이 불가능 하다 포인터 부분은 자다가도 벌떡 일어나서 정의할수 있어야한다.\n주소 연산자(\u0026amp;)\n\u0026amp;(Ampersand) 엔드 연산자, 주소연산자 등등으로 불린다. 정확한 명칭은 Ampersand이다.\n주소 연산자는 해당 변수, 함수 등의 주소를 확인할수 있게 합니다.\n주소에 대해 생소할수 있습니다. 프로그램 실행시에 컴파일러에 의해 메모리에 각 영역에 따른 변수나 함수 등이 할당됩니다. 첫번째 예는 변수 입니다.\nLocal \u0026amp; Gloal Variable\nLocal Variable은 지역 변수라고도 하며, 해당 함수 범위 내에서만 사용할수 있는 변수입니다.\nGlobal Variable은 전역 변수 라고도 하며, 코드 내의 그 어떤 부분에서도 사용할수 있습니다.\n이제 두변수의 사용 예를 살펴보려 합니다.\nint global_b=10; int main(){ int local_a=10; static int global_a=20; printf(\u0026#34;In main funtion local variable local_a has %d\\n\u0026#34;,local_a ); printf(\u0026#34;In main funtion local variable local_a address %p\\n\u0026#34;,\u0026amp;local_a ); printf(\u0026#34;In main funtion static global_a has %d\\n\u0026#34;,global_a ); printf(\u0026#34;In main funtion static global_a address %p\\n\u0026#34;,\u0026amp;global_a ); printf(\u0026#34;In main funtion global variable global_b has %d\\n\u0026#34;,global_b ); printf(\u0026#34;In main funtion global variable global_b address %p\\n\u0026#34;,\u0026amp;global_b ); local_func(local_a,global_a); point_func(\u0026amp;local_a); printf(\u0026#34;%d\\n\u0026#34;,local_a); } void local_func(int a,int b){ printf(\u0026#34;In local funtion printf local_a has: %d address: %p\\n\\n\u0026#34;,a,\u0026amp;a); printf(\u0026#34;In local funtion printf global_a has: %d address: %p\\n\\n\u0026#34;,b,\u0026amp;b); printf(\u0026#34;In local funtion printf global_b has: %d address: %p\\nbut not using parameter\\n\u0026#34;,global_b,\u0026amp;global_b); a=10; printf(\u0026#34;a=10;\\nlocal_a change 10 to 20 not using poiter\\n\u0026#34;); } void point_func(int *p){ *p=100; } 메인 함수에서 local_a와 global_a를 선합니다. 하지만 global_a는 앞에 static이 붙습니다.\n왜일까요? 바로 전역 변수 처럼 사용하기 위합입니다. 변수 앞에 static을 붙이면 전역 변수 저장 영역인 data영역에 할당됩니다. 마치 전역변수 처럼요.\nIn main funtion local variable local_a has 10 In main funtion local variable local_a address 0x7ffeed43898c In main funtion static global_a has 20 In main funtion static global_a address 0x1027c801c In main funtion global variable global_b has 10 In main funtion global variable global_b address 0x1027c8018 //into local_fun In local funtion printf local_a has: 10 address: 0x7ffeed43894c In local funtion printf global_a has: 20 address: 0x7ffeed438948 In local funtion printf global_b has: 10 address: 0x1027c8018 but not using parameter a=20; local_a change 10 to 20 not using pointer //end local_func after local_func, a has 10 local_a passing by point_func //into point_func In point_func change local_a 10 to 100 //end point_func after point_func, Now local_a has 100 local_func에서 local_a의 값을 변화 시키려 했지만 메인 함수에서 local_a의 값을 출력해보니 그대로 입니다. 왜일까요?\nlocal_fun는 전달 인자를 int a로 받았습니다. 이러한 매개변수는 값의 복사가 발생합니다.\n바로 call by value 의 상황이죠. 즉, 메모리에 변수의 복사가 발생하고, 이 변수는 함수의 종료와\n동시에 바로 삭제 됩니다.\ncall by value int main(){ int local_a=10; static int global_a=20; local_func(local_a,global_a); } void local_func(int a,int b){ =\u0026gt; 변수의 값을 함수의 변수로 복사하는것입니다. a=20; =\u0026gt;함수 내부의 변수는 함수의 시작과 동시에 생성되고 종료와 함께 반환됩니다. b=400; } Call by value는 매개변수로 값을 받아와 함수의 메모리로 복사해오는것 입니다.\n그래서 함수내부에서 아무리 값을 바꿔도, 실상은 함수로 복사된 값을 변환하는 것이므로,\n본래의 전달인자로 들어온 변수는 그대로입니다.\n그럼 본래 변수의 값을 바꾸려면 어떻게 해야할까요?\ncall by reference(call by address) 사실 C에서는 Call by reference 가 완벽하게 작동하지는 않습니다.\n아이라 폴과 알켈리의 A Book on C 에서 P.252 의 call by reference 를 언급하자면,\nHow the used of addresses of variables as arguments to functions can produce\nthe effect of \u0026ldquo;call by reference\u0026rdquo;.\n라고 명시되어 있습니다.\n다른 언어에서는 call by reference의 mechanism이 존재 하지만 C에서는 존재 하지 않습니다.\n하지만 비슷한 동작을 할수 있게끔 만들어줄수는 있습니다. 일단 예제를 보죠.\nint main(){ int a=3, b=7; printf(\u0026#34;a: %d b: %d\\n\u0026#34;,a,b); swap(\u0026amp;a,\u0026amp;b); printf(\u0026#34;a: %d b: %d\\n\u0026#34;,a,b); } void swap(int *a, int *b){ int temp; temp=*a; *a=*b; *b=temp; } 이전의 call by value에서는 함수에서의 값의 복사 때문에 본래의 변수의 값은 변하지 안았습니다.\n근데 이번 함수 swap은 매개변수(int *a)가 포인터이며, 전달인자(\u0026amp;a)를 변수의 주소를 받고있습니다.\n결과는 어떨까요?\na: 3 b: 7 a: 7 b: 3 값의 변화가 있습니다. 뭘까요?\n바로 call by reference의 효과 입니다. 변수의 주소를 전달 받아 직접 값을 바꾸는 것이죠.\n하지만 A Book on C에서 언급했던 완벽한 call by reference가 아닌 이유가 여기있습니다.\n사실상 주소를 전달받아 값을 바꾼 다는 것은, 주소의 값을 call by value한다는 것이죠.\n잘 이해가 안가는데 다음 예제를 살펴보죠.\n//출처 : 나무위키 void testFunc(int* fptr) { fptr = NULL; } int main(void) { int num = 12; int* ptr = \u0026amp;num; printf(\u0026#34;%d\\n\u0026#34;,*ptr ); testFunc(ptr); printf(\u0026#34;%d\\n\u0026#34;,*ptr ); return 0; } testFunc라는 함수는 포인터를 인자로 받아 포인터의 값을 NULL로 바꿉니다.\n자 그러면 코드를 어떻게 동작을 할까요?\n메인 함수에서 ptr은 num 의 주소를 갖고 있습니다. 그리고 그 주소에 대한 값을 testFunc에\n전달 하고 있습니다. 그럼 testFunc를 완료 하고 나면 ptr에는 NULL이 저장 될테고,\n더이상 num을 가르킬수 없습니다. 과연 결과도 그럴까요?\n12 12 예상과는 다르게 num의 값은 변하지 안았습니다.\n이게 뭘 뜻하는 걸까요?\nC에서는 주소값을 전달 받아 해당 주소로 이동후 값을 변화 할수 있지만, 그 과정에서 정확히는\n전달 인자로 포인터 변수를 전달한다. 즉, 포인터 변수 ptr을 전달 하므로 이는 call by value\n라고 할수 있다. 그러므로 C에서는 call by reference는 없다고 정의 할수 있다.\n다시 말해 함수에 인자를 받아 인자값 자체를 변화 시키는 것은 불가능 하다, 하지만 인자값의 주소로 건너가 그 값을 바꾸는 것은 가능하다, 하지만 이것은 값의 의한 복사 call by value 이다.\n하지만 call by value 로 전달하는 value 가 주소값이 이기 때문에 call by value 라고 부는것!!\n결론은 call by reference가 아니라 call by address or call by pointer\n라고 불러야 한다.\n그럼 진정한 call by reference는 어디에 존재하는 것이가?\n바로 c++부터 그 개념이 등장한다.\ncall by reference c++ 에서는 참조 변수 라는 것이 존재한다.\nint a=10; int \u0026amp;b=a; c에서는 \u0026amp;(ampersand)는 주소 값의 반화을 의미했다. 하지만 c++에서는 참조 매개변수가 존재 하며\n값을 복사 하는 call by value 가 아닌 주소 값을 받아와 참조에 의한 접근이 가능하다.\n다음 c++ 예시를 살펴보자.\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;iostream\u0026gt; void func1(int *q); void func2(int *q); void func3(int \u0026amp;q); int main(){ int a=10; int *point=\u0026amp;a; printf(\u0026#34;a address: %p value: %d \\n\\n\u0026#34;,\u0026amp;a,a); func1(\u0026amp;a); printf(\u0026#34;After func1 a value: %d\\n\u0026#34;,a); printf(\u0026#34;\\n===================================\\n\u0026#34;); printf(\u0026#34;point address:%p point has : %p value: %d \\n\u0026#34;,\u0026amp;point,point,*point ); func2(point); printf(\u0026#34;After func2 a value: %d\\n\u0026#34;,a); printf(\u0026#34;\\n===================================\\n\u0026#34;); printf(\u0026#34;Now we declaration int \u0026amp;ref_point=a\\n\u0026#34;); int \u0026amp;ref_point=a; printf(\u0026#34;point address:%p point has : %p value: %d \\n\u0026#34;,\u0026amp;point,point,*point ); func3(ref_point); printf(\u0026#34;After func3 a value: %d\\n\u0026#34;,a); } void func1(int *q){ printf(\u0026#34;In Func1\\nNow we change value of a to 100\\nSo q=20;\\nif you think change the value?\\n\u0026#34;); //q=20; printf(\u0026#34;q=20; is error occured\\n\u0026#34;); printf(\u0026#34;q address: %p value: %d \\n\u0026#34;,\u0026amp;q,*q); printf(\u0026#34;a address: %p value: %d \\n\u0026#34;,q,*q); } void func2(int *q){ printf(\u0026#34;In Func2\\nNow we change value of a to 100\\nSo *q=100;\\nif you think change the value?\\n\u0026#34;); *q=100; printf(\u0026#34;q address: %p value: %d \\n\u0026#34;,\u0026amp;q,*q); printf(\u0026#34;a address: %p value: %d \\n\u0026#34;,q,*q); } void func3(int \u0026amp;q){ printf(\u0026#34;In Func3\\nNow we change value of a to 100\\nSo *q=3000;\\nif you think change the value?\\n\u0026#34;); q=3000; printf(\u0026#34;q address: %p value: %d \\n\u0026#34;,\u0026amp;q,q); } 내용이 복잡하다. 우선 각 함수들이 뭘하는 지를 살펴보자.\nfun1~3까지의 함수가 존재하는데,\nfunc1\n//일반 적인 c에서의 call by address의 예시이다. void func1(int *q){ printf(\u0026#34;In Func1\\nNow we change value of a to 100\\nSo q=20;\\nif you think change the value?\\n\u0026#34;); //q=20; =\u0026gt; 진정한 call by reference가 되려면 주소로 받아온 값을 바꿀수 있어야한다. printf(\u0026#34;q=20; is error occured\\n\u0026#34;); printf(\u0026#34;q address: %p value: %d \\n\u0026#34;,\u0026amp;q,*q); printf(\u0026#34;a address: %p value: %d \\n\u0026#34;,q,*q); } func1은 매개변수로 포인터 변수 를 사용 하며, 전달 인자로 주소를받는다.\n만약 q=20을 하면 어떻게 될까?\n사실상 main함수에서 int *point=\u0026amp;a; 라고 선언했다는 것은\n//예를 들어 변수 q는 0x2000에 존재 하며 a변수는 0x1000에 있다고 치자. point == \u0026amp;a ==0x1000 \u0026amp;point == 0x2000(address of q q변수의 주소) *point == a(a의 값 10) 이제 위의 내용을 머리속에 넣고 정신 단디 차리고 하나씩 해석해 보자.\n먼저 func1에에서 전달 인자로 \u0026amp;a를 전달 했고 *q 포인터 변수로 받았다.\n이때 무슨일이 생길까?\n//In func1 //메인 함수에서 a의 주소를 전달 했다. //그러면 func1함수에서는 함수 시작과 동시에 int *q에 대한 변수 공간을 생성한다. //위에서 a변수의 주소는 0x1000이였다. 그렇다면 함수로 a의 주소를 전달하고 나서도 //그래도 a의 변수를 참조하여 접근이 가능할까? //진정한 call by reference 라면 받아온 주소로 바로 접근이 가능해야할것이다. //===============컴파일 결과============== a address: 0x7ffee1f8173c value: 10 In Func1 Now we change value of a to 100 So q=20; if you think change the value? q=20; is error occured q address: 0x7ffee1f816e8 value: 10 a address: 0x7ffee1f8173c value: 10 After func1 a value: 10 결과를 살펴 보자.\n우리가 원하는 결과는 받아온 a의 주소와 매개변수 q의 주소가 같아야한다.\n근데 보아하니 주소값은 두개가 존재한다. 이건 뭘 뜻할까?\nfunc1이 실행되는 순간 int *q 에 대한 변수 공간이 마련된다.\n이곳은 주소는 0x7ffee1f816e8 이다. 그리고 해당 주소한에 들어있는 값이 0x7ffee1f8173c(a의 주소)이다.\n즉 값에 의한 복사인 call by value 로 인해 a의 주소 값을 받아와 접근한다는것이다.\n때문에 q안에는 a의 주소값인 0x7ffee1f8173c 이 들어 있고 ,\nq=20; 이라는 재할당을 한다는 것은 q가 갖고는 있는 값을 20 으로 바꾼 다는 것이고,\nq는 포인터 변수 이기 때문에 20의 주소에 있는 값을 가져와야 한다고 해석한다.\n하지만 마음대로 메모리를 접근할수는 없다 컴파일 단계에서\n이런 위험한 코드는 막아 버리기때문에 에러를 토해낸다.\n결국 func1은 call by value 에 의한 함수 내부의 포인터 변수 공간에\n전달 인자로 받아온 a의 주소를 저장 하여 a의 값에 접근 한다는것이다.\n진정한 call by reference 는 실패 했다.\n그럼 이제 두번째 함수 func2 를 살펴보자.\nfunc2\nvoid func2(int *q){ printf(\u0026#34;In Func2\\nNow we change value of a to 100\\nSo *q=100;\\nif you think change the value?\\n\u0026#34;); *q=100; printf(\u0026#34;q address: %p value: %d \\n\u0026#34;,\u0026amp;q,*q); printf(\u0026#34;a address: %p value: %d \\n\u0026#34;,q,*q); } 사실상 func1과 별 차이가 없다. 하지만 func2에서는 a의 변수를 포인터로 접근하여\n값을 변경하기 때문에 a값의 변화가 생긴다.\n하지만 위에서 봤듯이 이는 call by value 에 의한 call by reference 를 흉내 낸것이다.\n우리는 이러한 과정을 call by address or call by pointer 라고 부른다.\n그럼 진정한 call by reference 는 어떻게 해야 볼수 있을까?\n위에서 데니스 리치 의 말을 언급 하면 C에서는 call by reference 는 없다 .\n하지만 C++에서는 참조 변수라는것이 존재한다.\n이제 func3를 살펴 보자.\nfunc3\nint main(){ int a=10; ... int \u0026amp;ref_point=a; func3(ref_point); } void func3(int \u0026amp;q){ printf(\u0026#34;In Func3\\nNow we change value of a to 100\\nSo *q=3000;\\nif you think change the value?\\n\u0026#34;); q=3000; printf(\u0026#34;q address: %p value: %d \\n\u0026#34;,\u0026amp;q,q); } 우리가 알던 C의 문법에서는 볼수 없는 변수 선언이 있다. 이게 뭘까 싶다.\n일단 실행 결과를 살펴 보자.\n=================================== Now we declaration int \u0026amp;ref_point=a ref_point address:0x7ffeee79373c ref_point has : 100 In Func3 Now we change value of a to 3000 So q=3000; if you think change the value? q address: 0x7ffeee79373c value: 3000 After func3 a value: 3000 정말 신박함의 극을 달린다 할수 있다. int \u0026amp;ref_point=a 참조 변수에 a의 주소 값도 아닌\na를 할당 하고 있다. 그리고 ref_point의 주소를 출력해보니 ref_point의 별도의 변수 공간이 아닌\na의 주소를 출력하고 있다.\n그럼 함수 안에서는 어떨까?\n물론 q 변수에 대해서도 별도의 변수 공간을 할당하지 않는다.\n함수내에서도 a의 주소 를 출력하고 있으며, q로 값을 3000으로 재할당한후,\n함수가 종료되고 나서 a의 값을 출력해 보니 3000으로 바뀌어 있다.\n진정한 call by reference 란 값에 의한 복사를 통해 변수에 접근하는 것이 아닌\n값의 복사 없이 변수 자체에 접근 할수 있어야 한다는 것\n그래서 데니스 리치는 call by reference 에 대해\n\u0026hellip;\u0026ldquo;call by reference\u0026rdquo;\u0026hellip;, in which the called routine has access to the original argument, not a local copy.\n\u0026ldquo;호출 과정 내에서 지역 값의 복사 없이 원본 인자에 접근 할수 있어여하 한다\u0026rdquo; 라고 말한 것이다.\n","date":"June 11, 2018","hero":"/images/rand_images/michael-dziedzic.jpg","permalink":"https://codex-devlab.github.io/posts/study/sub-programming-language/study-c-language/","summary":"\u003ch1 id=\"c언어\"\u003eC언어\u003c/h1\u003e\n\u003cp\u003e프로그램이란? 컴퓨터에서 실행될때 특정 작업을 수행 하는 일련의 명령어들의 모음이다.\u003c/p\u003e\n\u003ch2 id=\"소프트웨어-공학\"\u003e소프트웨어 공학\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e요구사항 분석\n자료형 정의 등등\u003c/li\u003e\n\u003cli\u003eFlow chart 설계 및 구현(pseudo code)\u003c/li\u003e\n\u003cli\u003e코드 구현\u003c/li\u003e\n\u003cli\u003e실행\u003c/li\u003e\n\u003cli\u003e테스트\u003c/li\u003e\n\u003cli\u003e유지보수\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"cpu-구조\"\u003eCPU 구조\u003c/h2\u003e\n\u003cp\u003eControl unit\u0026lt;-\u0026gt;ALU\u0026lt;-\u0026gt;Processor resister(R1,R2,R3\u0026hellip;)\n위의 3가지 장치들이 Internal bus로 연결되어 통신한다.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eALU(Arithmetic logic unit )\u003c/p\u003e\n\u003cp\u003e산술 논리 장치 : 실질적으로 산술, 논리 계산을 수행함.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eResister\u003c/p\u003e\n\u003cp\u003eCPU의 자체적인 메모리저장 기능.\u003c/p\u003e\n\u003cp\u003eMemory buffer register(MBR)\u003c/p\u003e\n\u003cp\u003e​\tI/O로 보내지거나 메모리에 저장될 Word 혹은 I/O나 메모리로 부터 Word를 받는 것.\u003c/p\u003e","tags":["Study","C","Theory"],"title":"C언어 스터디"},{"categories":null,"contents":"파이썬 basic 플랫폼 독립적이며 인터프리터식, 객체지향적, 동적 타이핑(Dynamically typed) 대화형 언어 이다.\n파이썬이 유지보수가 쉬운 이유는 가독성이 좋아서 이다.\n파이썬으로 프로그래밍시 주의할 점은 Name Space 이다.\n이미 존재하는 라이브러리와 같은 이름으로 저장시 overiiding의 문제가 발생할수도 있다.\n다중 패러다임(함수형, 명령형, 객체지향- 클래스 기반) 프로그래밍 언어 이다.\n언어의 종류\nC - python\nJava - jython\n.net - Iron python\npython - pypi(속도 향상을 위해 파이썬 기반으로 제작)\n주의 사항\nName space 주의\n이미 존재하는 라이브러리와 같은 이름으로 저장시 Overriding 문제 발생.\n들여 쓰기 주의\n파이썬은 Code Block({} 중괄호)이 없기 때문에 구획을 들여쓰기로 구분한다.\n변수 대입시에도 1칸 이상 띄어쓰는것은 주의해야 한다.\n새로운 블록의 시작은 조건문, 반복문, 함수 부분에서 끝에 : 을 붙여준다.\n변수\n입력에 따라 알아서 데이터 타입이 정해진다. 즉, 정수, 실수, 음의정수, 문자열등 대입시에\n자동으로 결정된다.\n가능한 변수명\n3.6\t버전 부터는 한글 변수명도 가능하며, 첫글자는 영문 혹은_ 로 시작해야 한다.\n불가능한 변수명\n숫자로 시작하거나 특수문자로 사용되는변수명\n특정 예약어를 사용한 변수명\n예약어는 True False 같은 언어 내부에서 통용되는 단어 이다. 대부분의 예약어는 다른 언어를\n공부해봤다면 충분히 비슷한것이 많기 때문에 걱정할필요 없다.\n하지만 예약어가 뭐가 있는지 확인해볼 필요는 있다.\nimport keyword print(keyword.kwlist) [\u0026#39;False\u0026#39;, \u0026#39;None\u0026#39;, \u0026#39;True\u0026#39;, \u0026#39;and\u0026#39;, \u0026#39;as\u0026#39;, \u0026#39;assert\u0026#39;, \u0026#39;break\u0026#39;, \u0026#39;class\u0026#39;, \u0026#39;continue\u0026#39;, \u0026#39;def\u0026#39;, \u0026#39;del\u0026#39;, \u0026#39;elif\u0026#39;, \u0026#39;else\u0026#39;, \u0026#39;except\u0026#39;, \u0026#39;finally\u0026#39;, \u0026#39;for\u0026#39;, \u0026#39;from\u0026#39;, \u0026#39;global\u0026#39;, \u0026#39;if\u0026#39;, \u0026#39;import\u0026#39;, \u0026#39;in\u0026#39;, \u0026#39;is\u0026#39;, \u0026#39;lambda\u0026#39;, \u0026#39;nonlocal\u0026#39;, \u0026#39;not\u0026#39;, \u0026#39;or\u0026#39;, \u0026#39;pass\u0026#39;, \u0026#39;raise\u0026#39;, \u0026#39;return\u0026#39;, \u0026#39;try\u0026#39;, \u0026#39;while\u0026#39;, \u0026#39;with\u0026#39;, \u0026#39;yield\u0026#39;] Casting\n숫자형 casting\n정수형, 실수형으로 casting이 가능하다.\n\u0026gt;\u0026gt;int(3.4) 3 \u0026gt;\u0026gt;float(8/2) 4.0 문자형 casting\n두가지의 casting이 가능하다. str , repr 두가지가 있는데 예제로 살펴보자.\nstr()\n비공식적인 문자열을 출력하며, 단지 문자열로만 바꿔줄 뿐이다.\nrepr\n공식적인 문자열을 출력하며, 새로운 문자열 객체로 만들어준다.\n위키독스의 점프투 파이썬을 참고해 보자.\n#str 예제 \u0026gt;\u0026gt;\u0026gt; a = \u0026#34;Life is too short\u0026#34; \u0026gt;\u0026gt;\u0026gt; b = str(a) \u0026gt;\u0026gt;\u0026gt; eval(b) Traceback (most recent call last): File \u0026#34;\u0026lt;stdin\u0026gt;\u0026#34;, line 1, in \u0026lt;module\u0026gt; File \u0026#34;\u0026lt;string\u0026gt;\u0026#34;, line 1 Life is too short ^ SyntaxError: unexpected EOF while parsing #repr 예제 \u0026gt;\u0026gt;\u0026gt; a = datetime.datetime(2017, 9, 27) \u0026gt;\u0026gt;\u0026gt; b = repr(a) \u0026gt;\u0026gt;\u0026gt; eval(b) datetime.datetime(2017, 9, 27, 0, 0) \u0026gt;\u0026gt;\u0026gt; a = \u0026#34;Life is too short\u0026#34; \u0026gt;\u0026gt;\u0026gt; b = repr(a) \u0026gt;\u0026gt;\u0026gt; eval(b) \u0026#39;Life is too short\u0026#39; 위의 코드처럼 repr은 새로운 객체로 만들어서 eval로 실행할때 새로운 문자열 객체를 실행한다.\n문자열 다루기\n\u0026gt;\u0026gt;\u0026gt;x= \u0026#39;a\u0026#39; \u0026gt;\u0026gt;\u0026gt;word = \u0026#34;hello\u0026#34; + x \u0026gt;\u0026gt;\u0026gt;print(word) helloa \u0026gt;\u0026gt;\u0026gt;print(word+\u0026#39;b\u0026#39;) helloab \u0026gt;\u0026gt;\u0026gt;print(word) helloa \u0026gt;\u0026gt;\u0026gt;print(\u0026#39;He\u0026#39; \u0026#39;she\u0026#39;) Heshe \u0026gt;\u0026gt;\u0026gt;print(word[-1],word[-2]) a o 부분 문자열을 -1로 indexing하면 가장 오른쪽의 문자가 출력된다.\n그럼 특정 문자를 바꾸는것은 가능할까? 결론은 불가능이다.\n\u0026gt;\u0026gt;\u0026gt;word[-1]=\u0026#39;w\u0026#39; TypeError: \u0026#39;str\u0026#39; object does not support item assignment 문자열은 불가변성(immutable) 이기 때문에 수정이 불가능하다. 하지만 문자를 추가하여 새로운\n문자열로 assign하는것은 가능하다.\n% 문자열 연산자 사용법\n%문자열 연산자를 사용하면, 문자열이 아닌것도 문자열 형태로 변환해서 출력하는것이 가능하다.\n\u0026gt;\u0026gt;\u0026gt;print(\u0026#34;%s qwe %d\u0026#34;%(\u0026#34;abc\u0026#34;,100)) abc qwe 100 결합연산자 와 결합\n#결합 연산자 사용 \u0026gt;\u0026gt;\u0026gt;print(\u0026#34;a\u0026#34;+\u0026#34;b\u0026#34;) ab #이어 붙이기 \u0026gt;\u0026gt;\u0026gt;print(\u0026#34;a\u0026#34;\u0026#34;b\u0026#34;) ab # 쉼표(,)로 결합하면 자동으로 공백이 들어간다. \u0026gt;\u0026gt;\u0026gt;print(\u0026#34;a\u0026#34;,\u0026#34;b\u0026#34;) a b 연산자 우선 순위\n다음 표는 위에서 부터 밑으로 우선순위를 나타낸 것이다.\nOperator\tDescription **\t지수 (전원으로 인상) ~ + -\tCcomplement, 단항 플러스와 마이너스 (마지막 두의 메서드 이름은 + @이며, - @) * / % //\t곱하기, 나누기, 나머지, 몫 + -\t덧셈과 뺄셈 \u0026gt;\u0026gt; \u0026lt;\u0026lt;\t좌우 비트 시프트 \u0026amp;\t비트 \u0026#39;AND\u0026#39; ^ |\t비트 전용 \u0026#39;OR\u0026#39;와 정기적 인 \u0026#39;OR\u0026#39; \u0026lt;= \u0026lt; \u0026gt; \u0026gt;=\t비교 연산자 \u0026lt;\u0026gt; == !=\t평등 연산자 = %= /= //= -= += *= **=\t할당 연산자 is is not\t식별 연산자 in not in\t맴버 연산자 not or and\t논리 연산자 연산자 우선순위가 존재한다. 하지만 다른 언어들 처럼 꼭 우선순위대로 처리되는것은 아니다.\n예를 들어보자.\n#case1 \u0026gt;\u0026gt;\u0026gt;a = 1+2\u0026lt;\u0026lt;3 \u0026gt;\u0026gt;\u0026gt;print(a) 24 #case2 \u0026gt;\u0026gt;\u0026gt;a = 2*2\u0026lt;\u0026lt;3 \u0026gt;\u0026gt;\u0026gt;print(a) 32 #case3 \u0026gt;\u0026gt;\u0026gt;a=1 \u0026gt;\u0026gt;\u0026gt;not a\u0026gt;5 case1\n연산자 우선 순위에서 단항자 연산자(+)가 쉬프트 연산자(\u0026laquo;)보다 우선순위가 높다.\n때문에 1+2=3 을 왼쪽으로 3번 쉬프팅 한다.0011 -\u0026gt; 0110 -\u0026gt; 1100 -\u0026gt; 0001 1000(24) 가 된다.\ncase2\n연산자 우선순위에서 곱(*) 연산자가 쉬프트(\u0026laquo;)보다 우선순위가 높다.\n예상 대로 라면 2*2=4 왼쪽 세번 리프팅. 0100 -\u0026gt; 1000-\u0026gt; 0001 0000-\u0026gt; 0010 0000(32)\ncase3\n연산자 우선 순위에서 논리연산자(not)이 비교연산자(\u0026gt;)보다 우선순위가 낮다.\n때문에 a\u0026gt;5 는 false이고\nUnicode from *future* import unicode_literals를 통해 Python 3 처럼 u 마커없이 기본 유니코드로 간주한다. 단, unicode_literals를 사용하지 않는 다른 라이브러리와의 연동시 매우 유의해야 한다.\nfrom __future__ import print_function 파이썬 2에서 3처럼 쓸수 있게 해줌 Tips Sublimetext3 에서 python 사용 설정\ncommand+` =\u0026gt; package Control에 있는 코드 삽입.\nShift + Command + p 눌러서 p i (package control : install package) 실행하여 세부 패키지 설치\nCompile\nCommand+B\npip installation\n개발 환경 분리\nIpython installatino\npython notebook install\n$ ipython nootbook\n현재 있는 폴더를 웹에서 접근 가능. 웹안에서 컴파일은 물론 많은 기능 가능.\n","date":"June 11, 2018","hero":"/images/rand_images/vackground-com.jpg","permalink":"https://codex-devlab.github.io/posts/study/sub-programming-language/sub-python/basic-python/","summary":"\u003ch2 id=\"파이썬-basic\"\u003e파이썬 basic\u003c/h2\u003e\n\u003cblockquote\u003e\n\u003cp\u003e플랫폼 독립적이며 인터프리터식, 객체지향적, 동적 타이핑(Dynamically typed) 대화형 언어 이다.\u003c/p\u003e\n\u003cp\u003e파이썬이 유지보수가 쉬운 이유는 \u003ccode\u003e가독성이 좋아서 \u003c/code\u003e 이다.\u003c/p\u003e\n\u003cp\u003e파이썬으로 프로그래밍시 주의할 점은 Name Space 이다.\u003c/p\u003e\n\u003cp\u003e이미 존재하는 라이브러리와 같은 이름으로 저장시 overiiding의 문제가 발생할수도 있다.\u003c/p\u003e\n\u003cp\u003e다중 패러다임(함수형, 명령형, 객체지향- 클래스 기반) 프로그래밍 언어 이다.\u003c/p\u003e\u003c/blockquote\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e언어의 종류\u003c/p\u003e\n\u003cp\u003eC - python\u003c/p\u003e\n\u003cp\u003eJava - jython\u003c/p\u003e\n\u003cp\u003e.net - Iron python\u003c/p\u003e\n\u003cp\u003epython - pypi(속도 향상을 위해 파이썬 기반으로 제작)\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e주의 사항\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eName space 주의\u003c/p\u003e","tags":["Study","Python","Theory"],"title":"Python 기초"},{"categories":null,"contents":" root Fire Fox Update GIT Installation and Setting Git multi user ssh setting Autojump Installation vim Installation and Setting vim scheme vim Plugin Install youcompleteme Airline ctag Mouse setting root $sudo passwd root Fire Fox Update $sudo apt-get firefox $sudo apt-get update GIT Installation and Setting 설치 $sudo apt install git 초기 설정 $git config --global user.name \u0026#34;kimleepark\u0026#34; $git config --global user.email kimleepark@gmail //$git config -l $ssh-keygen //.ssh 폴더안에 id_rsa.pub 의 내용을 Github ssh에 등록해준다. $git init $git log //git 작업 기록 $git status //git 현재 현황(add 되거나, 추적 가능한 파일 현황) $git add //-u 업데이트된 항목을 추적해서 add함, --all,-A 폴더내 모든 항목을 add함 $git commit $git push //local -\u0026gt; remote 저장소로 이동 $git pull //원격 저장소에 있는 변경 사항을 가져와서 merge함 Git 시작하기 를 참고 하시면서 작업 하시면 좋습니다.\n.gitignore 에 a.out, *.o, *.txt 등 을 추가하여 불필요한 형식은 걸러서 올리는것이 작업하기 편합니다.\npush 할때마다 아이디와 비밀번호 요구 일단 이유를 알아야 하니 여기참고해 주세요. ssh key 생성부터 설정\n\u0026gt;$ls -al ~/.ssh \u0026gt;//기존에 키가 존재 하는지 체크해 주세요. 아마 대부분 이미 ssh-keygen으로 만드셨을겁니다. \u0026gt;$ssh-keygen -t rsa -b 4096 -C \u0026#34;your_email@example.com\u0026#34; \u0026gt;//이후 나오는 설정 \u0026#34;아~ 잘모르궤쎠 엔터 누르롸눈거 가튠뒈 잘 모르게쒀 걍 무조건 엔터\u0026#34; \u0026gt;//뭐 순서대로 저장할 폴더, 패러프레이즈 에 대한 방식이니 그냥 엔터 눌러주세요. \u0026gt;$cat ~/.ssh/id_rsa.pub \u0026gt;//전부 복사해서 github sshkey 에 등록해주세요 \u0026gt;//등록후 조금 시간이 지나야 인증이 되니까 그동안 reboot해주세요 \u0026gt;$ssh -T git@github.com \u0026gt;//Hi~~어쩌구 나오면 ssh에 등록되고 연결이 된거에요. 그리고 대부분 아마 push할때 마다 id 와 pass를 물어보는 경우는 git clone시에 ssh가 아닌 http로 clone을 해서 그렇습니다. 그냥 간단하게 원래있던 폴더 삭제후 clone할때에 ssh로 clone하시면 id\u0026amp;pass 안물어봄.\n기존 로컬 저장소와 원격 저장소 연결 1.원격 저장소를 먼저 만들고 그냥 Clon $git clone https://원격저장소.git 2.기존로컬 저장소를 원격저장소와 연결 Github에서 resipotory를 먼저 만들어야 한다. $mkdir \u0026#34;resipotory와 같은 이름\u0026#34; //resipotory 이름은 foo라고 가정한다. $cd foo $git init //빈저장소를 만드는것 $git remote \u0026lt;name\u0026gt; \u0026lt;https://원격저장소.git\u0026gt; //name 간단하게 push할때마다 사용하는 브랜치 이름이다. $git remote show \u0026lt;name\u0026gt; //분명 HEAD 브랜치 : (unknown) 이라고 나올것이다. $git push \u0026lt;name\u0026gt; master Git multi user ssh setting 현재 사용하는 Git 계정이 두개입니다. 뭔가 생각에는 계정이 두개 있어도 한번 만들어져 있는\nssh key를 사용해도 될것 같지만, 이미 사용한 ssh key를 다른 계정에 등록하려고 하면\nkey is already used.라고 나옴니다. 때문에 추가 계정을 위한 ssh key가 필요합니다.\n먼저 .ssh 폴더안의 파일을 보면 이해가 빠릅니다.\n$cd ~/.ssh . ├── config -\u0026gt; 여러개정을 연결하기 위한 cofing ├── id_rsa ├── id_rsa.pub -\u0026gt; 원래 계정의 ssh key ├── id_rsa_blog └── id_rsa_blog.pub -\u0026gt; 추가 계정의 ssh key 일단 추가 계정을 위한 ssh key를 생성해야 합니다.\n$ssh-keygen -t rsa -C \u0026#34;username@gmail.com\u0026#34; //새 계정의 이메일 주소 Generating public/private rsa key pair. Enter file in which to save the key (/Users/Edwardson/.ssh/id_rsa): id_rsa_project //project는 임의로 작명해 주세요. ... $ssh-add ~/.ssh/id_rsa_project //ssh key 추가 $ssh-add -l //ssh key 저장 $vi config //이제 ssh가 두개가 됬으니 각각 생성된 key로 동작하도록 연결해줘야 합니다. //cofig를 .ssh안에 만들어줘서 다음 내용을 추가해 주세요. # default account Host github.com HostName github.com User git IdentityFile ~/.ssh/id_rsa # project account Host github.com-project HostName github.com User git IdentityFile ~/.ssh/id_rsa_project $ssh -T git@github.com Hi \u0026#34;원래계정 이름 나옴\u0026#34;! You\u0026#39;ve successfully authenticated, but GitHub does not provide shell access. $ssh -T git@github.com-project Hi \u0026#34;추가계정 이름 나옴\u0026#34;! You\u0026#39;ve successfully authenticated, but GitHub does not provide shell access. //위에 처럼 확인 됬으면 새로운 git계정에 ssh를 연결해서 사용할 준비가 다됬습니다. //이제 이전에 했던 Git hub에 ssh 새로 생성한 키를 등록해 주세요. 자 이제 거의 다됬습니다. 추가 계정의 repository만 remote 해주면 되겠네요.\n$mkdir project \u0026amp;\u0026amp; cd project $git init $git config user.name project $git config user.email project@email.com $git remote add origin git@github.com-project:YOURNAME/REPOSITORY.git //아까 config 에서 설정했던 두번째 계정의 Host 가 github.com-project 였죠 //그래서 remote 로 연결해 줄때도 git@github.com-project로 연결해줘야 합니다. $echo \u0026#34;project\u0026#34; \u0026gt;\u0026gt; readme.md $git add -A $git commit -m \u0026#34;firstcommit\u0026#34; $git push -u origin master Autojump Installation $sudo apt-get install autojump //Ubuntu에는 패키지가 있어서 apt-get으로 설치 가능 $sudo apt-get update $autojump //분명 이부분에서 bach 설정이 안되어 있어서 추가로 작성해달라고 나옵니다. $echo \u0026#34;. /usr/share/autojump/autojump.bash\u0026#34; \u0026gt;\u0026gt; ~/.bashrc //autojump가 터미널 실행시 바로 작동 할수 있게 경로를 추가해 줘야 한다. Autojump 를 참고하시길 바랍니다. 사실 요즘은 너무 간결하게 설치파일이 작성되어 있어서.\n그냥 install.py만 실행해주면 끝입니다\u0026hellip;ㅠㅠ\nvim Installation and Setting 설치 $sudo apt-get vim $sudo apt-get update vim scheme 후\u0026hellip;여러가지 준비해봤습니다. 제대로 모시겠습니다.Vim 설정\nvim scheme 여러가지 테마는 http://vimcolors.com여기에 많습니다. 테마가 들어가야할 위치는 /usr/share/vim/vimXX/colors 여기에 있습니다. vimXX는 Vim마다 버전이 다르기 때문에 본인에게 맞는 버전을 찾아 주면 될것 같네요.\n$sudo wget -O /usr/share/vim/vim74/colors/molokai.vim https://raw.github.com/tomasr/molokai/master/colors/molokai.vim //이런식으로 원하는 테마를 찾아서 바로 넣어주면 됩니다. 설정은 $vi ~/.vimrc colorscheme molokai 이렇게 넣어주면 되겠네요. vim Plugin Install 우선은 번들을 설치해 볼까요? 자세한 사항은 여기를 참고해 주세요\n$git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim $vi ~/.vimrc \u0026#34; set the runtime path to include Vundle and initialize set rtp+=~/.vim/bundle/Vundle.vim call vundle#begin() \u0026#34; alternatively, pass a path where Vundle should install plugins \u0026#34;call vundle#begin(\u0026#39;~/some/path/here\u0026#39;) \u0026#34; let Vundle manage Vundle, required Plugin \u0026#39;VundleVim/Vundle.vim\u0026#39; youcompleteme 자동 완성 플러그인 입니다. 자세한건 여기를 참고해 주세요\n$vi ~/.vimrc Plugin \u0026#39;Valloric/YouCompleteMe\u0026#39; //위 내용 추가후 :PluginInstall $ sudo apt-get install build-essential cmake $ sudo apt-get install python-dev python3-dev $ cd ~/.vim/bundle/YouCompleteMe $ ./install.py --clang-completer //youcompleteme 에서 특정 언어에 대한 자동완성을 지원하기 위해 각 언어의 지원을 받아야한다. //여기서 C 언어에 대해 지원하고 싶으면 ./install.py 할때 --clang-completer를 추가해 준다. //귀찬으면 그냥 -all 간혹 문제가 생길수 있다. vim에서 ycm_extra_conf.py이게 없다고 에러를 토해낼때!! 여기를 참고해도 되고 다음 처럼 해줘도 된다. let g:ycm_global_ycm_extra_conf = \u0026lsquo;~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py\u0026rsquo; 추가 cd /.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/ycm vim .ycm_extra_conf.py 여기서 compilation_database_folder = \u0026lsquo;\u0026lsquo;를 찾아 \u0026lsquo;\u0026lsquo;부분에 \u0026lsquo;/.vim/\u0026rsquo; 로 고친다.\nYCM Option .vimrc에 추가 \u0026quot;\u0026quot; turn on completion in comments let g:ycm_complete_in_comments=1 \u0026quot;\u0026quot; load ycm conf by default let g:ycm_confirm_extra_conf=0 \u0026quot;\u0026quot; turn on tag completion let g:ycm_collect_identifiers_from_tags_files=1 \u0026quot;\u0026quot; only show completion as a list instead of a sub-window set completeopt-=preview \u0026quot;\u0026quot; start completion from the first character let g:ycm_min_num_of_chars_for_completion=1 \u0026quot;\u0026quot; don\u0026rsquo;t cache completion items let g:ycm_cache_omnifunc=0 \u0026quot;\u0026quot; complete syntax keywords let g:ycm_seed_identifiers_with_syntax=1\nAirline 자세한건 여기를 참고해 주세요. 각종 정보들을 vim에 표시되게 합니다. 버퍼를 사용해 창을 나눌수도 있고 다른 플러그인에 같이 적용도 됩니다.(솔직히 그냥 간지)\n$vi ~/.vimrc Plugin \u0026#39;vim-airline/vim-airline\u0026#39; Plugin \u0026#39;vim-airline/vim-airline-themes\u0026#39; :PluginInstall 테마 적용 여기에서 원하는 테마를 찾고 밑에 처럼 적용해주면 됩니다. :AirlineTheme ctag 커널 프로그래밍 을 위해서 필수 절차이다.여기에 ctags에 대한 명령어등 튜토리얼이 있다.\n$sudo apt-get install exuberant-ctags $vi ~/.vimrc Plugin \u0026#39;xolox/vim-easytags\u0026#39; Plugin \u0026#39;xolox/vim-misc\u0026#39; //vim-misc는 easytags설치후 에러를 토하면서 misc 설치하라 하면 추가해주면됨 기본 사용법 Ctrl + ] - 함수, 구조체가 정의되어있는 곳으로 이동. Ctrl + t - 이동하기 전 소스코드 위치로 옴.\nMouse setting 시스템 설정 -\u0026gt; 마우스 설정 에 마우스 속도 조절이 없다.... 1. rc.local에 스크립트 파일 등록 [적용안됨] 2. init.d에 스크립트 파일 등록 [적용안됨] Runlevel=5\t#1~2번 까지 systemctl 로 상태를 확인해본 결과 똑같은 오류 메세지 나옴 unable to open display \u0026#34;\u0026#34; 이런식임 방법을 찾다가 display가 뜻하는것은 서버등 내 서버에 접속된 사용자들의 display 같음 하지만 난 솔플을 하는중이니 $echo $DIPLAY :0 일케 나옴 그러니당연히 매번 unable~ 이런식으로 오류를 던져줌 [해결] export XAUTHORITY=/home/codex/.Xauthority sh \u0026amp; xset -display :0 m 1/2 1/2 현재 내 display에 대한 정보와 권한을 가져오는것이 방법이였다. 근데 중요한건 결국 안됨....rc.local의 실행과정을 보니 parent에서 fork하는것이였고 현재 쉘에는 적용 안됨... 3.autostart에 스크립트 등록 [적용안됨] 4.autostart에 mate-mouse-property [적용됨] 근데 부팅되자마자 앱 화면이 로드됨 5. 런치패드 업데이트 [안됨] 6. 우분투 업데이트 [안됨] 7. Gnome으로 변경후 업데이트 [됨] ","date":"June 1, 2018","hero":"/images/rand_images/sigmund-tax.jpg","permalink":"https://codex-devlab.github.io/posts/os/sub-linux/debian-bases/ubuntu-setting/","summary":"\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#root\"\u003eroot\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#fire-fox-update\"\u003eFire Fox Update\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#git-installation-and-setting\"\u003eGIT Installation and Setting\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#git-multi-user-ssh-setting\"\u003eGit multi user ssh setting\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#autojump-installation\"\u003eAutojump Installation\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#vim-installation-and-setting\"\u003evim Installation and Setting\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#vim-scheme\"\u003evim scheme\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#vim-plugin-install\"\u003evim Plugin Install\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#youcompleteme\"\u003eyoucompleteme\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#airline\"\u003eAirline\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#ctag\"\u003ectag\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#mouse-setting\"\u003eMouse setting\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"root\"\u003eroot\u003c/h2\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e$sudo passwd root\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"fire-fox-update\"\u003eFire Fox Update\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e$sudo apt-get firefox\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e$sudo apt-get update\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"git-installation-and-setting\"\u003eGIT Installation and Setting\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e설치\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e$sudo apt install git\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e초기 설정\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e$git config --global user.name \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;kimleepark\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e$git config --global user.email kimleepark@gmail\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e//$git config -l\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e$ssh-keygen \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e//.ssh 폴더안에 id_rsa.pub 의 내용을 Github ssh에 등록해준다.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e$git init\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e$git log\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e//git 작업 기록\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e$git status\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e//git 현재 현황\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003eadd 되거나, 추적 가능한 파일 현황\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e$git add\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e//-u 업데이트된 항목을 추적해서 add함,  --all,-A 폴더내 모든 항목을 add함\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e$git commit\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e$git push\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e//local -\u0026gt; remote 저장소로 이동\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e$git pull\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e//원격 저장소에 있는 변경 사항을 가져와서 merge함\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cblockquote\u003e\n\u003cp\u003e\u003ca href=\"https://git-scm.com/book/ko/v1/%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0-Git-%EC%B5%9C%EC%B4%88-%EC%84%A4%EC%A0%95\" target=\"_blank\" rel=\"noopener\"\u003eGit 시작하기\u003c/a\u003e 를 참고 하시면서 작업 하시면 좋습니다.\u003c/p\u003e","tags":["OS","Ubuntu","초기설정","Git","Vim","Airline","Autojump"],"title":"Ubuntu \u0026 OSX setting"},{"categories":null,"contents":"Pre-commit Pre Commit의 동작은 Commit이 이루어지는 시점에 Commit이 완료 되기전에 해당 스크립트가 실행되는 방식입니다.\n$ git init 혹은 저장소를 Clone받게 되면 경로에 .git/hooks\n내부에 다양한 Hook이 있는걸 확인 할 수 있습니다.\nPre Commit을 사용하는 두 가지 방법이 있습니다. 상세하게 따져본다면 git hook을 사용하는것은 동일하나,\n이를 관리하는 방법이 조금 상이합니다.\nPre Commit을 사용하는 이유는 몇가지가 있지만,\n가장 큰 목적은 동료와의 협업, Commit 관리, 오류 방지 등이 있다고 생각합니다.\n예를 들어 Lint, Syntex Error 등이 해당 될 듯 합니다.\n그렇다면 동료 모두가 같은 Pre Commit을 사용하기 위해선 어떻게 해야 할까요?\nGithub에 공유되어서 같은 룰을 공유 받는게 가장 편한 방법이라 생각합니다.\n그럼 먼저 Pre Commit을 Local 환경에서 생성하고 사용하는 방법 부터 설명드리고 이를 공유해서 편리하게 사용하는 방법 까지 발전시켜 보겠습니다.\nPre-Commit Running on Local 예를 들어보겠습니다. Go언어로 개발중에 go 모듈의 오류나 경로가 정상적으로 설정 되어 있는지 확인하는 Pre commit을 실행한다고 가정 하겠습니다.\n로컬 환경에서 각 모듈을 개발하고 모듈의 경로를 로컬 경로로 지정 한 채, 커밋이 되게 된다면 다른 팀원이나 배포되는 서버에서 실행 시 문제가 발생 할 수 있기 때문에 사전에 방지하는것이 좋습니다.\n그럼 이를 방지 할 수 있는 pre commit을 생성해 보도록 하겠습니다.\npre-commit은 반드시 .git/hooks/pre-commit 의 이름으로 있어야 합니다.\npre-commit 예제 .git/hooks/pre-commit 을 생성 합니다.\n$ vim .git/hooks/pre-commit #!/bin/bash # Git 프로젝트 루트 경로 가져오기 GIT_ROOT=$(git rev-parse --show-toplevel) GO_MOD_FILE=\u0026#34;$GIT_ROOT/go.mod\u0026#34; # 1️⃣ go.mod 파일이 없으면 커밋 중단 if [ ! -f \u0026#34;$GO_MOD_FILE\u0026#34; ]; then echo \u0026#34;❌ go.mod 파일이 없습니다. 커밋을 중단합니다!\u0026#34; exit 1 fi # 2️⃣ go.mod 파일에 특정 문자열이 없으면 커밋 중단 if ! grep -q \u0026#34;github.com/hugo-toha/toha/v4\u0026#34; \u0026#34;$GO_MOD_FILE\u0026#34;; then echo \u0026#34;❌ go.mod 파일에 필요한 패턴이 없습니다. 커밋을 중단합니다!\u0026#34; exit 1 fi echo \u0026#34;✅ pre-commit 훅이 성공적으로 실행되었습니다.\u0026#34; exit 0 # 정상 종료 pre-commit 실행 권한 부여\n$ chmod +x .git/hooks/pre-commit pre-commit 실행 확인 $ git commit --allow-empty -m \u0026#34;Test Pre-Commit\u0026#34; echo \u0026#34;✅ pre-commit 훅이 성공적으로 실행되었습니다.\u0026#34; 정상적으로 실행되는지 확인 할 목적이라면 단순히 pre-commit을 실행해봐도 됩니다!\nConvenient sharing method of Pre-Commit 이제 pre-commit을 협업하는 모두가 공유해서 사용하는 두 가지 방법에 대해 설명 드리겠습니다.\n`.githooks/` 디렉터리를 사용하여 공유 Using .githooks/ dir GitHub 저장소에 githooks/pre-commit 스크립트 저장 프로젝트 루트에 .githooks/pre-commit 파일을 추가합니다.\n$ mkdir -p .githooks $ touch .githooks/pre-commit $ chmod +x .githooks/pre-commit 그리고 pre-commit 훅을 .githooks/pre-commit에 작성합니다.\n#!/bin/bash echo \u0026#34;🔍 Pre-commit hook is running...\u0026#34; # 예제: go.mod 파일이 없으면 커밋 중단 if [ ! -f \u0026#34;go.mod\u0026#34; ]; then echo \u0026#34;❌ go.mod 파일이 없습니다. 커밋을 중단합니다!\u0026#34; exit 1 fi echo \u0026#34;✅ Pre-commit check passed!\u0026#34; exit 0 개발자가 .git/hooks/에 자동으로 적용 로컬에서 git clone한 후, 아래 명령어를 실행하면 .git/hooks/pre-commit에 자동으로 적용됩니다.\n$ git config core.hooksPath .githooks 이렇게 설정하면, git commit을 실행할 때 .githooks/pre-commit이 실행됩니다.\npython `pre-commit` 프레임워크 사용 Using pre-commit Framework pre-commit 프레임워크를 활용하면, 저장소에 .pre-commit-config.yaml 파일을 추가하는 것만으로도 팀 전체가 동일한 pre-commit 훅을 사용할 수 있습니다.\npre-commit 설치 개발자는 먼저 pre-commit을 설치해야 합니다.\npip install pre-commit # Python이 설치된 경우 .pre-commit-config.yaml 파일을 저장소에 추가 저장소 루트에 .pre-commit-config.yaml 파일을 추가합니다.\nrepos: - repo: local hooks: - id: go-mod-check name: Go Mod Check entry: bash scripts/pre-commit.sh language: system types: [text] pre-commit 실행 스크립트 추가 저장소 내 scripts/pre-commit.sh 파일을 만들어 아래 내용을 작성합니다.\n#!/bin/bash echo \u0026#34;🔍 Pre-commit hook is running...\u0026#34; # go.mod 파일 체크 if [ ! -f \u0026#34;go.mod\u0026#34; ]; then echo \u0026#34;❌ go.mod 파일이 없습니다. 커밋을 중단합니다!\u0026#34; exit 1 fi echo \u0026#34;✅ Pre-commit check passed!\u0026#34; exit 0 개발자가 pre-commit install 실행\n$ pre-commit install 이제 git commit을 실행할 때마다 pre-commit이 자동으로 실행됩니다.\n","date":"May 18, 2018","hero":"/images/rand_images/sigmund-tax.jpg","permalink":"https://codex-devlab.github.io/posts/dev/git-manual/","summary":"\u003ch3 id=\"pre-commit\"\u003ePre-commit\u003c/h3\u003e\n\u003cblockquote\u003e\n\u003cp\u003ePre Commit의 동작은 Commit이 이루어지는 시점에 Commit이 완료 되기전에 해당 스크립트가 실행되는 방식입니다.\u003cbr\u003e\n\u003ccode\u003e$ git init\u003c/code\u003e 혹은 저장소를 Clone받게 되면 경로에 \u003ccode\u003e.git/hooks\u003c/code\u003e\u003cbr\u003e\n내부에 다양한 Hook이 있는걸 확인 할 수 있습니다.\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003ePre Commit을 사용하는 두 가지 방법이 있습니다.\n상세하게 따져본다면 git hook을 사용하는것은 동일하나,\u003cbr\u003e\n이를 관리하는 방법이 조금 상이합니다.\u003c/p\u003e\n\u003cp\u003ePre Commit을 사용하는 이유는 몇가지가 있지만,\u003cbr\u003e\n가장 큰 목적은 동료와의 협업, Commit 관리, 오류 방지 등이 있다고 생각합니다.\u003c/p\u003e\n\u003cp\u003e예를 들어 Lint, Syntex Error 등이 해당 될 듯 합니다.\u003c/p\u003e","tags":["Git","Github","Manual"],"title":"Git Manual"},{"categories":null,"contents":" 모든 내용은 Git Hub에도있습니다.\nProblem.100039 평균점수\n#include \u0026lt;stdio.h\u0026gt; int main(){ int a; int temp[5]={0,}; int total=0; for(int i=0;i\u0026lt;5;i++){ scanf(\u0026#34;%d\u0026#34;,\u0026amp;temp[i]); if(temp[i]\u0026lt;40) temp[i]=40; total+=temp[i]; } printf(\u0026#34;%d\\n\u0026#34;,total/5); } ","date":"May 18, 2018","hero":"/images/rand_images/vollume-tf.jpg","permalink":"https://codex-devlab.github.io/posts/study/sub-algorithms/online-judge/backjoon/step-prob/prob-100039/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/ehdwn1991/Coding-Interview/blob/master/Code_Interview_Prep_Platform/backjoon/Level_6/100039.c\" target=\"_blank\" rel=\"noopener\"\u003e모든 내용은 Git Hub에도있습니다.\u003c/a\u003e\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"problem100039\"\u003e\u003ca href=\"https://www.acmicpc.net/problem/100039\" target=\"_blank\" rel=\"noopener\"\u003eProblem.100039\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003e평균점수\u003c/code\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;stdio.h\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e(){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e a;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e temp[\u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e]\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e{\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e,};\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e total\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;i\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e;i\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003escanf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;%d\u0026#34;\u003c/span\u003e,\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003etemp[i]);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e(temp[i]\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e40\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\ttemp[i]\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e40\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\ttotal\u003cspan style=\"color:#f92672\"\u003e+=\u003c/span\u003etemp[i];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eprintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;%d\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e,total\u003cspan style=\"color:#f92672\"\u003e/\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","tags":["C","Backjoon","Online-Judge"],"title":"Problem.100039"},{"categories":null,"contents":"모든 내용은 Git Hub에도 있습니다.\nProblem.1065 1065번 문제(성공)-한수 각 자리수가 등차 수열을 이루면 한수로 취급한다. 예를 들어 보자 99는 한수 인가? 9와 9는 공차 0으로 한수이다. 그렇다면 100은 어떤가? 한수 일리가 없다. 즉 99이하는 전부 한수가 된다. 하지만 100부터는 각 자리수에 따라 달라질수도 있다. 100이후 첫 한수가 되는것은 111일것이다.\n#include \u0026lt;stdio.h\u0026gt; int main(){ int N; int place_value[3]={\u0026#39;\\0\u0026#39;,}; int Hansu=0; scanf(\u0026#34;%d\u0026#34;,\u0026amp;N); for (int i = 1; i \u0026lt;= N; ++i) { if(i\u0026lt;100){ Hansu++; // printf(\u0026#34;11\u0026#39;s : %d \\n\u0026#34;,i ); } else if(i==1000){ break; } else if(99\u0026lt;i){ place_value[0]= i/100; place_value[1]=(i-place_value[0]*100)/10; place_value[2]=((i-place_value[0]*100)-(place_value[1]*10)); if(place_value[0]-place_value[1]==place_value[1]-place_value[2]){ Hansu++; } else{ // printf(\u0026#34;two\u0026#39;s com : %d 0:%d 1:%d 2:%d\\n\u0026#34;,i ,place_value[0],place_value[1],place_value[2]); printf(\u0026#34;%d\\n\u0026#34;,i ); } } } printf(\u0026#34;%d\\n\u0026#34;,Hansu ); } ","date":"May 18, 2018","hero":"/images/rand_images/fotis-fotopoulos.jpg","permalink":"https://codex-devlab.github.io/posts/study/sub-algorithms/online-judge/backjoon/step-prob/prob-1065/","summary":"\u003cp\u003e\u003ca href=\"https://github.com/ehdwn1991/Coding-Interview/blob/master/Code_Interview_Prep_Platform/backjoon/Level_5/1065.c\" target=\"_blank\" rel=\"noopener\"\u003e모든 내용은 Git Hub에도 있습니다.\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id=\"problem1065\"\u003e\u003ca href=\"https://www.acmicpc.net/problem/1065\" target=\"_blank\" rel=\"noopener\"\u003eProblem.1065\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003e1065번 문제(성공)-한수\u003c/code\u003e\n각 자리수가 등차 수열을 이루면 한수로 취급한다.\n예를 들어 보자 99는 한수 인가? 9와 9는 공차 0으로 한수이다.\n그렇다면 100은 어떤가? 한수 일리가 없다. 즉 99이하는 전부 한수가 된다.\n하지만 100부터는 각 자리수에 따라 달라질수도 있다.\n100이후 첫 한수가 되는것은 111일것이다.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;stdio.h\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e(){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e N;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e place_value[\u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e]\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e{\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;\\0\u0026#39;\u003c/span\u003e,};\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e Hansu\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003escanf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;%d\u0026#34;\u003c/span\u003e,\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003eN);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e; i \u003cspan style=\"color:#f92672\"\u003e\u0026lt;=\u003c/span\u003e N; \u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003ei)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e(i\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e100\u003c/span\u003e){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\tHansu\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#75715e\"\u003e// printf(\u0026#34;11\u0026#39;s : %d  \\n\u0026#34;,i );\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\t\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e(i\u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1000\u003c/span\u003e){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#66d9ef\"\u003ebreak\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e99\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003ei){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\tplace_value[\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e]\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e i\u003cspan style=\"color:#f92672\"\u003e/\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e100\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\tplace_value[\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e]\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e(i\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003eplace_value[\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e]\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e100\u003c/span\u003e)\u003cspan style=\"color:#f92672\"\u003e/\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e10\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\tplace_value[\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e]\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e((i\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003eplace_value[\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e]\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e100\u003c/span\u003e)\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e(place_value[\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e]\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e10\u003c/span\u003e));\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e(place_value[\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e]\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003eplace_value[\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e]\u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003eplace_value[\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e]\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003eplace_value[\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e]){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\tHansu\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#75715e\"\u003e// printf(\u0026#34;two\u0026#39;s com : %d  0:%d 1:%d 2:%d\\n\u0026#34;,i ,place_value[0],place_value[1],place_value[2]);\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\t\t\t\u003cspan style=\"color:#a6e22e\"\u003eprintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;%d\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e,i );\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eprintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;%d\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e,Hansu );\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","tags":["C","Backjoon","Online-Judge"],"title":"Problem.1065"},{"categories":null,"contents":" 백준 단계별 문제집 레벨 3\n모든 내용은 Git Hub에도있습니다.\nProblem.10809 10809번알파벳 찾기\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;string.h\u0026gt; int main(){ char comp_alpha[26]=\u0026#34;abcdefghijklmnopqrstuvwxyz\u0026#34;; int comp_location[26]={0,}; char buf[110]={\u0026#39;\\0\u0026#39;,}; for(int i=0;i\u0026lt;26;i++){ comp_location[i]=-1; } fgets(buf,sizeof(buf),stdin); //a~z까지 입력된단어에서의 처음 위치를 찾는다 for(int i=0;i\u0026lt;26;i++){ for(int j=0;j\u0026lt;strlen(buf);j++){ if(buf[j]==comp_alpha[i]){ comp_location[i]=j; break; } } } for(int i=0;i\u0026lt;26;i++){ printf(\u0026#34;%d \u0026#34;,comp_location[i]); } puts(\u0026#34;\u0026#34;); } 알파벳은 26개이다 각 단어에서 알파벳이 처음 등장 하는 위치를 다른 배열에 저장한다.\n반복문에서 처음 위치를 찾으면 break 되기 때문에\n중복이 되서 그다음 위치가 저장될일이 없다.\n","date":"May 18, 2018","hero":"/images/rand_images/vackground-com.jpg","permalink":"https://codex-devlab.github.io/posts/study/sub-algorithms/online-judge/backjoon/step-prob/prob-10809/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003ca href=\"https://www.acmicpc.net/step/3\" target=\"_blank\" rel=\"noopener\"\u003e백준 단계별 문제집 레벨 3\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"https://github.com/ehdwn1991/Coding-Interview/blob/master/Code_Interview_Prep_Platform/backjoon/Level_7/10809.c\" target=\"_blank\" rel=\"noopener\"\u003e모든 내용은 Git Hub에도있습니다.\u003c/a\u003e\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"problem10809\"\u003e\u003ca href=\"https://www.acmicpc.net/problem/10809\" target=\"_blank\" rel=\"noopener\"\u003eProblem.10809\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003e10809번알파벳 찾기\u003c/code\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;stdio.h\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;stdlib.h\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;string.h\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e(){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003echar\u003c/span\u003e comp_alpha[\u003cspan style=\"color:#ae81ff\"\u003e26\u003c/span\u003e]\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;abcdefghijklmnopqrstuvwxyz\u0026#34;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e comp_location[\u003cspan style=\"color:#ae81ff\"\u003e26\u003c/span\u003e]\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e{\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e,};\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003echar\u003c/span\u003e buf[\u003cspan style=\"color:#ae81ff\"\u003e110\u003c/span\u003e]\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e{\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;\\0\u0026#39;\u003c/span\u003e,};\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;i\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e26\u003c/span\u003e;i\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tcomp_location[i]\u003cspan style=\"color:#f92672\"\u003e=-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003efgets\u003c/span\u003e(buf,\u003cspan style=\"color:#66d9ef\"\u003esizeof\u003c/span\u003e(buf),stdin);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e//a~z까지 입력된단어에서의 처음 위치를 찾는다\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\t\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;i\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e26\u003c/span\u003e;i\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e j\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;j\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003estrlen\u003c/span\u003e(buf);j\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e(buf[j]\u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003ecomp_alpha[i]){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\tcomp_location[i]\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003ej;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t\u003cspan style=\"color:#66d9ef\"\u003ebreak\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;i\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e26\u003c/span\u003e;i\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003eprintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;%d \u0026#34;\u003c/span\u003e,comp_location[i]);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003eputs\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cblockquote\u003e\n\u003cp\u003e알파벳은 26개이다 각 단어에서 알파벳이 처음 등장 하는 위치를 다른 배열에 저장한다.\u003c/p\u003e\n\u003cp\u003e반복문에서 처음 위치를 찾으면 break 되기 때문에\u003c/p\u003e","tags":["C","Backjoon","Online-Judge"],"title":"Problem.10809"},{"categories":null,"contents":" 백준 단계별 문제집 레벨 4\n모든 내용은 Git Hub에도있습니다.\nProblem.10871 10871번[X보다 작은수]\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;string.h\u0026gt; int main(){ int input[10000]; int N=0,X=0,insert_num=0; scanf(\u0026#34;%d %d\\n\u0026#34;,\u0026amp;N,\u0026amp;X); for(int i=0;i\u0026lt;N;i++){ scanf(\u0026#34; %d\u0026#34;,\u0026amp;insert_num); //scanf의 심오한 의미 공부!!! input[i]=insert_num; } for (int i = 0; i \u0026lt; N; ++i) { if(input[i]\u0026lt;X) printf(\u0026#34;%d \u0026#34;,input[i] ); } } 알고리즘은 별게 없다. 근데 입력 부분에서 getc를 썻으면 조금 편했을지 모르겠지만 일단 시작을 scanf로 하기로했으니, 공백을 무시하면서 숫자를 입력받을수 있어야 했다. 덕분에 scanf(\u0026quot; %d\u0026quot;)의 심오한 의미를 공부할수 있었다.\n먼저 IBM에서 제공하는 Scanf의 정의먼저 보겠습니다.\n공백 문자로,isspace()함수(줄 바꾸기 문자와 공백과 같은)에서 지정됩니다. 공백 문자로scanf()함수는 공백이 아닌 다음 문자까지 입력의 모든 연속 공백 문자를 읽지만 저장하지 않습니다. format-string의 한 공백 문자는 입력에서 공백 문자의 조합과 일치합니다.\n퍼센트 기호 문자(%)를 제외하고, 공백이 아닌 문자입니다. 공백이 아닌 문자로scanf()함수는 일치하는 공백이 아닌 문자를 읽지만 저장하지 않습니다. stdin의 다음 문자가 일치하지 않는 경우,scanf()함수가 종료합니다.\n다음 예제를 확인 하면 확실하게 이해가 갈것이다.\n#include \u0026lt;stdio.h\u0026gt; int main(){ int a,b; scanf(\u0026#34;%d \u0026#34;,\u0026amp;a); printf(\u0026#34;%d\\n\u0026#34;,a); scanf(\u0026#34;%d \u0026#34;,\u0026amp;b); printf(\u0026#34;%d\\n\u0026#34;,b); } $./a.out 1 1 2 2 우리가 1을 입력후 엔터를 치면 1이 출력되고 그다음 2를 입력하면 2가 출력 될것이라고 예상할것이다.\n$./a.out 1 2 1 q 2 하지만 1을 입력후 2를 입력해야 1이 출력되고 q를 입력하자 2가 출력된다 왜일까? scanf(\u0026quot;%d \u0026ldquo;,\u0026amp;a) 를 해석해 보자 %d뒤에 공백이 있는데, 숫자, 1자 이상의 공백문자, 공백문자가 아닌 문자값이 들어오기를 기다립니다. 그렇다면 1을 입력후에는 버퍼안에 1이 들어가있고 그다음 공백 문자 이외의 문자를 기다립니다. 물론 우리는 엔터를 통해 \u0026lsquo;\\n\u0026rsquo;을 입력했지만 New line은 문자로 할당되지 않습니다. 그리고 다음 기대 값인 2를 입력 했을때 비로소 공백이 아닌 문자가 들어오게 된것이죠. 그래서 버퍼에있던 1을 출력해 주고 현재 버퍼엔 2가 남아있게 됩니다. 그리고 아무 문자를 입력하고 나면 공백이아닌 문자가 들어왔기 때문에 2가 출력되게 되는것입니다. 그리고 프로그램이 끝나기 전까지는 버퍼에 마지막 입력했던 문자가 들어있겠지요. IBM Scanf 정의 여기 참고\n모든 내용은 Git Hub에도있습니다.\n","date":"May 18, 2018","hero":"/images/rand_images/nejc-soklic.jpg","permalink":"https://codex-devlab.github.io/posts/study/sub-algorithms/online-judge/backjoon/step-prob/prob-10871/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003ca href=\"https://www.acmicpc.net/step/6\" target=\"_blank\" rel=\"noopener\"\u003e백준 단계별 문제집 레벨 4\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"https://github.com/ehdwn1991/Coding-Interview/blob/master/Code_Interview_Prep_Platform/backjoon/Level_17/10871.c\" target=\"_blank\" rel=\"noopener\"\u003e모든 내용은 Git Hub에도있습니다.\u003c/a\u003e\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"problem10871\"\u003e\u003ca href=\"https://www.acmicpc.net/problem/10871\" target=\"_blank\" rel=\"noopener\"\u003eProblem.10871\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003e10871번[X보다 작은수]\u003c/code\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;stdio.h\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;stdlib.h\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;string.h\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e(){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e input[\u003cspan style=\"color:#ae81ff\"\u003e10000\u003c/span\u003e];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e N\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e,X\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e,insert_num\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003escanf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;%d %d\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e,\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003eN,\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003eX);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;i\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003eN;i\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003escanf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34; %d\u0026#34;\u003c/span\u003e,\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003einsert_num);  \u003cspan style=\"color:#75715e\"\u003e//scanf의 심오한 의미 공부!!!\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\t\tinput[i]\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003einsert_num;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e; i \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e N; \u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003ei)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e(input[i]\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003eX)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003eprintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;%d \u0026#34;\u003c/span\u003e,input[i] );\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cblockquote\u003e\n\u003cp\u003e알고리즘은 별게 없다. 근데 입력 부분에서 getc를 썻으면 조금 편했을지 모르겠지만\n일단 시작을 scanf로 하기로했으니, 공백을 무시하면서 숫자를 입력받을수 있어야 했다.\n덕분에 scanf(\u0026quot; %d\u0026quot;)의 심오한 의미를 공부할수 있었다.\u003c/p\u003e","tags":["C","Level 4","Array","Backjoon","Online-Judge"],"title":"Problem.10871"},{"categories":null,"contents":" 백준 단계별 문제집 레벨 3\n모든 내용은 Git Hub에도있습니다.\n1110번[더하기 사이클] 처음 덧셈의 수식이 다시 한번 돌아 올때 까지의 사이클을 찾는것입니다.\nstart: 26 [2+6=8 =\u0026gt;(68) 6+8=14 =\u0026gt;(84) 8+4=12 =\u0026gt;(42) 4+2=6 =\u0026gt;(26) 2+6=8]\n위의 예제 처럼 26이 다시 나올려면 68 -\u0026gt; 84-\u0026gt; -\u0026gt;42 -\u0026gt; 26 이렇게 4번만에원래의\n숫자로 돌아왔습니다. 알고리즘은 비교적간단합니다.\n처음 상태와 다음 상태 들을 비교하면서 같은 상태가 나올때 까지 사이클을 카운트 합니다.\n#include \u0026lt;stdio.h\u0026gt; int circle(); int tokken_units(); int token_tens(); int main(){ int N,temp_N; int result; scanf(\u0026#34;%d\u0026#34;,\u0026amp;N); printf(\u0026#34;%d\\n\u0026#34;,circle(N)); } int circle(int N){ int count=1; int init_state[3]; int next_state[3]; int arg_first,arg_second,arg_result; init_state[0]=token_tens(N); //첫 시작의 10의자리 init_state[1]=tokken_units(N); //첫 시작의 1의자리 init_state[2]=init_state[0]+init_state[1]; //첫 시작의 덧셈 결과 next_state[0]=init_state[0]; next_state[1]=init_state[1]; next_state[2]=init_state[2]; while(1){ if(next_state[2]\u0026lt;10){ next_state[0]=next_state[1]; next_state[1]=next_state[2]; next_state[2]=next_state[0]+next_state[1]; } else{ next_state[0]=next_state[1]; next_state[1]=tokken_units(next_state[2]); next_state[2]=next_state[0]+next_state[1]; } if(next_state[0]==init_state[0]\u0026amp;\u0026amp;next_state[1]==init_state[1]\u0026amp;\u0026amp;next_state[2]==init_state[2]){ //다음 계산식이 처음과 같아지면 종료 break; } count++; } return count; } int tokken_units(int N){ int units;//units 일의 자리 units= N-(N/10)*10; return units; } int token_tens(N){ int tens;//units 일의 자리 tens= N/10; return tens; } ","date":"May 18, 2018","hero":"/images/rand_images/heliberto-arias.jpg","permalink":"https://codex-devlab.github.io/posts/study/sub-algorithms/online-judge/backjoon/step-prob/prob-1110/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003ca href=\"https://www.acmicpc.net/step/3\" target=\"_blank\" rel=\"noopener\"\u003e백준 단계별 문제집 레벨 3\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"https://github.com/ehdwn1991/Coding-Interview/blob/master/Code_Interview_Prep_Platform/backjoon/Level_4/1110.c\" target=\"_blank\" rel=\"noopener\"\u003e모든 내용은 Git Hub에도있습니다.\u003c/a\u003e\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"1110번\"\u003e\u003ca href=\"https://www.acmicpc.net/problem/1110\" target=\"_blank\" rel=\"noopener\"\u003e1110번[더하기 사이클]\u003c/a\u003e\u003c/h2\u003e\n\u003cblockquote\u003e\n\u003cp\u003e처음 덧셈의 수식이 다시 한번 돌아 올때 까지의 사이클을 찾는것입니다.\u003cbr\u003e\nstart: 26    [2+6=8 =\u0026gt;(68) 6+8=14 =\u0026gt;(84) 8+4=12 =\u0026gt;(42) 4+2=6 =\u0026gt;(26) 2+6=8]\u003cbr\u003e\n위의 예제 처럼 26이 다시 나올려면 68 -\u0026gt; 84-\u0026gt; -\u0026gt;42 -\u0026gt; 26 이렇게 4번만에원래의\u003cbr\u003e\n숫자로 돌아왔습니다. 알고리즘은 비교적간단합니다.\u003cbr\u003e\n처음 상태와 다음 상태 들을 비교하면서 같은 상태가 나올때 까지 사이클을 카운트 합니다.\u003c/p\u003e\u003c/blockquote\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;stdio.h\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ecircle\u003c/span\u003e();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etokken_units\u003c/span\u003e();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etoken_tens\u003c/span\u003e();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e(){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e N,temp_N;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e result;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003escanf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;%d\u0026#34;\u003c/span\u003e,\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003eN);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eprintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;%d\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e,\u003cspan style=\"color:#a6e22e\"\u003ecircle\u003c/span\u003e(N));\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ecircle\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e N){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e count\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e init_state[\u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e next_state[\u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e arg_first,arg_second,arg_result;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tinit_state[\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e]\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003etoken_tens\u003c/span\u003e(N); \u003cspan style=\"color:#75715e\"\u003e//첫 시작의 10의자리 \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\tinit_state[\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e]\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003etokken_units\u003c/span\u003e(N); \u003cspan style=\"color:#75715e\"\u003e//첫 시작의 1의자리\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\tinit_state[\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e]\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003einit_state[\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e]\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003einit_state[\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e]; \u003cspan style=\"color:#75715e\"\u003e//첫 시작의 덧셈 결과\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\tnext_state[\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e]\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003einit_state[\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tnext_state[\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e]\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003einit_state[\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tnext_state[\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e]\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003einit_state[\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003ewhile\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e(next_state[\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e]\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e10\u003c/span\u003e){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\tnext_state[\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e]\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003enext_state[\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\tnext_state[\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e]\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003enext_state[\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\tnext_state[\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e]\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003enext_state[\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e]\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003enext_state[\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\tnext_state[\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e]\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003enext_state[\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\tnext_state[\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e]\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003etokken_units\u003c/span\u003e(next_state[\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e]);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\tnext_state[\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e]\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003enext_state[\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e]\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003enext_state[\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e(next_state[\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e]\u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003einit_state[\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e]\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003enext_state[\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e]\u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003einit_state[\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e]\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003enext_state[\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e]\u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003einit_state[\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e]){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#75715e\"\u003e//다음 계산식이 처음과 같아지면 종료\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\t\t\t\u003cspan style=\"color:#66d9ef\"\u003ebreak\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\tcount\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e count;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etokken_units\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e N){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e units;\u003cspan style=\"color:#75715e\"\u003e//units 일의 자리\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\tunits\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e N\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e(N\u003cspan style=\"color:#f92672\"\u003e/\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e10\u003c/span\u003e)\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e10\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e units;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etoken_tens\u003c/span\u003e(N){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e tens;\u003cspan style=\"color:#75715e\"\u003e//units 일의 자리\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003etens\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e N\u003cspan style=\"color:#f92672\"\u003e/\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e10\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e tens;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","tags":["C","Math","Arithmetic","Backjoon","Online-Judge"],"title":"Problem.1110"},{"categories":null,"contents":" 백준 단계별 문제집 문자열\n모든 내용은 Git Hub에도있습니다.\nProblem.1152 1152번[단어의 개수]\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;string.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; int main(){ int count=0,is_word=0; //is_word=0 =\u0026gt;until not using any word //is_word=1 =\u0026gt;wherever used any word before using space char input; //공백은 연속으로 나오는 일이 없으니 공백만 잘 체크해 주면 된다. while((input=getchar())!=EOF){ if(input==10){ if(is_word==1) count++; break; } if(input\u0026gt;32){ is_word=1; } else{ if(input==32\u0026amp;\u0026amp;is_word==0){//is space } else if(input==32\u0026amp;\u0026amp;is_word==1){ count++; is_word=0; } } } printf(\u0026#34;%d\\n\u0026#34;,count ); } 문제에서 헷갈리는 부문이 있다. 1.시작이 공백 2.끝이 공백 두가지 경우를 어떻게 처리할것인가가 좀 헷갈렸다. [시작이 공백] 시작이 공백이고 아직 단어가 한번도 안나온 경우 시작이 공백이지만 이미 단어가 한번 나온경우 [끝이 공백] 마지막 문자가 Newline이고 is_word가 1이라면 이전에 글자가 있었던것\n","date":"May 18, 2018","hero":"/images/rand_images/vollume-tf.jpg","permalink":"https://codex-devlab.github.io/posts/study/sub-algorithms/online-judge/backjoon/step-prob/prob-1152/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003ca href=\"https://www.acmicpc.net/step/7\" target=\"_blank\" rel=\"noopener\"\u003e백준 단계별 문제집 문자열\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"https://github.com/ehdwn1991/Coding-Interview/blob/master/Code_Interview_Prep_Platform/backjoon/Level_6/1152.c\" target=\"_blank\" rel=\"noopener\"\u003e모든 내용은 Git Hub에도있습니다.\u003c/a\u003e\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"problem1152\"\u003e\u003ca href=\"https://www.acmicpc.net/problem/1152\" target=\"_blank\" rel=\"noopener\"\u003eProblem.1152\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003e1152번[단어의 개수]\u003c/code\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;stdio.h\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;string.h\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;stdlib.h\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e(){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e count\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e,is_word\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e//is_word=0 =\u0026gt;until not using any word\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\t\u003cspan style=\"color:#75715e\"\u003e//is_word=1 =\u0026gt;wherever used any word before using space\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\t\u003cspan style=\"color:#66d9ef\"\u003echar\u003c/span\u003e input;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e//공백은 연속으로 나오는 일이 없으니 공백만 잘 체크해 주면 된다.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\t\u003cspan style=\"color:#66d9ef\"\u003ewhile\u003c/span\u003e((input\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003egetchar\u003c/span\u003e())\u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003eEOF){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e(input\u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e10\u003c/span\u003e){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e(is_word\u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\tcount\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#66d9ef\"\u003ebreak\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e(input\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e32\u003c/span\u003e){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\tis_word\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e(input\u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e32\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003eis_word\u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e){\u003cspan style=\"color:#75715e\"\u003e//is space\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\t\t\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e(input\u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e32\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003eis_word\u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\tcount\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\tis_word\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eprintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;%d\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e,count );\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cblockquote\u003e\n\u003cp\u003e문제에서 헷갈리는 부문이 있다.\n1.시작이 공백\n2.끝이 공백\n두가지 경우를 어떻게 처리할것인가가 좀 헷갈렸다.\n[시작이 공백]\n시작이 공백이고 아직 단어가 한번도 안나온 경우\n시작이 공백이지만 이미 단어가 한번 나온경우\n[끝이 공백]\n마지막 문자가 Newline이고 is_word가 1이라면 이전에 글자가 있었던것\u003c/p\u003e","tags":["C","String","Backjoon","Online-Judge"],"title":"Problem.1152"},{"categories":null,"contents":" 백준 단계별 문제집 레벨 3\n모든 내용은 Git Hub에도있습니다.\n##Problem.1157 단어 공부\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;string.h\u0026gt; int main(){ int alpha[26]={0,}; //\t정수형 배열을 쓰는 이유는 단어의 길이가 1000000이기 때문에 반복된 //\t알파벳의 횟수가 127번을 넘어가면 CHAR형의 범위를 넘어버린다. char temp; int Max_comp=0; int comp2=0; int comp1=0; //각 단어가 들어왔을때 대소문자 상관없이 각 문자 마다 카운트 한다. while((temp=getchar())!=10){ if(temp\u0026gt;64\u0026amp;\u0026amp;temp\u0026lt;91){ //대문자 일때 alpha[temp-65]+=1; } else{ //\t소문자 일때 alpha[temp-97]+=1; } } //가장 많이 사용되 문자 찾는과정 for(int i=0;i\u0026lt;26;i++){ if(alpha[i]!=0){ Max_comp=(Max_comp\u0026gt;alpha[i]?Max_comp:alpha[i]); } } for(int j=0;j\u0026lt;26;j++){ if(Max_comp==alpha[j]){ comp1=j; comp2++;//가장 많이 사용된 문자의 갯수를 저장\t} } if(comp2\u0026gt;1){ printf(\u0026#34;?\\n\u0026#34;); //가장 많이 사용한 문자가 2개이상 일때는 ?를 출력 } else printf(\u0026#34;%c\\n\u0026#34;,comp1+65); //가장 많이 사용한 문자가 2개 미만일때는 해당 문자 출력 } 가장 많이 사용된 문자의 갯수를 문자별로 배열에 저장하고, 가장많이 사용된 문자를 찾아 다시 비교해 주면된다. 비교 하는 과정에서 가장큰 문자는 1번만 나와야하고 2번 이상 나온다면 \u0026ldquo;?\u0026ldquo;를 출력해주어야 한다.\n","date":"May 18, 2018","hero":"/images/rand_images/ilya-pavlov.jpg","permalink":"https://codex-devlab.github.io/posts/study/sub-algorithms/online-judge/backjoon/step-prob/prob-1157/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003ca href=\"https://www.acmicpc.net/step/3\" target=\"_blank\" rel=\"noopener\"\u003e백준 단계별 문제집 레벨 3\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"https://github.com/ehdwn1991/Coding-Interview/blob/master/Code_Interview_Prep_Platform/backjoon/Level_7/1157.c\" target=\"_blank\" rel=\"noopener\"\u003e모든 내용은 Git Hub에도있습니다.\u003c/a\u003e\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e##\u003ca href=\"https://www.acmicpc.net/problem/1157\" target=\"_blank\" rel=\"noopener\"\u003eProblem.1157\u003c/a\u003e\n\u003ccode\u003e단어 공부\u003c/code\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;stdio.h\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;string.h\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e(){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e alpha[\u003cspan style=\"color:#ae81ff\"\u003e26\u003c/span\u003e]\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e{\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e,};\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e//\t정수형 배열을 쓰는 이유는 단어의 길이가 1000000이기 때문에 반복된\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e//\t알파벳의 횟수가 127번을 넘어가면 CHAR형의 범위를 넘어버린다.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\t\u003cspan style=\"color:#66d9ef\"\u003echar\u003c/span\u003e temp;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e Max_comp\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e comp2\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e comp1\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e//각 단어가 들어왔을때 대소문자 상관없이 각 문자 마다 카운트 한다.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\t\u003cspan style=\"color:#66d9ef\"\u003ewhile\u003c/span\u003e((temp\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003egetchar\u003c/span\u003e())\u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e10\u003c/span\u003e){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e(temp\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e64\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003etemp\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e91\u003c/span\u003e){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#75715e\"\u003e//대문자 일때\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\t\t\talpha[temp\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e65\u003c/span\u003e]\u003cspan style=\"color:#f92672\"\u003e+=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e//\t\t소문자 일때\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\t\t\talpha[temp\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e97\u003c/span\u003e]\u003cspan style=\"color:#f92672\"\u003e+=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e//가장 많이 사용되 문자 찾는과정\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\t\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;i\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e26\u003c/span\u003e;i\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e(alpha[i]\u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\tMax_comp\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e(Max_comp\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003ealpha[i]\u003cspan style=\"color:#f92672\"\u003e?\u003c/span\u003eMax_comp:alpha[i]);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e j\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;j\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e26\u003c/span\u003e;j\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e(Max_comp\u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003ealpha[j]){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\tcomp1\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003ej;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\tcomp2\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e;\u003cspan style=\"color:#75715e\"\u003e//가장 많이 사용된 문자의 갯수를 저장\t\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\t\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e(comp2\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eprintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;?\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e//가장 많이 사용한 문자가 2개이상 일때는 ?를 출력\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eprintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;%c\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e,comp1\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e65\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e//가장 많이 사용한 문자가 2개 미만일때는 해당 문자 출력\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cblockquote\u003e\n\u003cp\u003e가장 많이 사용된 문자의 갯수를 문자별로 배열에 저장하고,\n가장많이 사용된 문자를 찾아 다시 비교해 주면된다.\n비교 하는 과정에서 가장큰 문자는 1번만 나와야하고 2번 이상 나온다면 \u0026ldquo;?\u0026ldquo;를 출력해주어야 한다.\u003c/p\u003e","tags":["C","Backjoon","Online-Judge"],"title":"Problem.1157"},{"categories":null,"contents":" 백준 단계별 문제집 레벨 3\n모든 내용은 Git Hub에도있습니다.\nLevel7 Problem.11654 아스키 코드\n#include \u0026lt;stdio.h\u0026gt; int main(){ char a; while((a=getchar())!=EOF){ if(a!=10) printf(\u0026#34;%d\\n\u0026#34;,a); } } ","date":"May 18, 2018","hero":"/images/rand_images/sigmund.jpg","permalink":"https://codex-devlab.github.io/posts/study/sub-algorithms/online-judge/backjoon/step-prob/prob-11654/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003ca href=\"https://www.acmicpc.net/step/3\" target=\"_blank\" rel=\"noopener\"\u003e백준 단계별 문제집 레벨 3\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"https://github.com/ehdwn1991/Coding-Interview/blob/master/Code_Interview_Prep_Platform/backjoon/Level_7/11654.c\" target=\"_blank\" rel=\"noopener\"\u003e모든 내용은 Git Hub에도있습니다.\u003c/a\u003e\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"level7\"\u003eLevel7\u003c/h2\u003e\n\u003ch2 id=\"problem11654\"\u003e\u003ca href=\"https://www.acmicpc.net/problem/11654\" target=\"_blank\" rel=\"noopener\"\u003eProblem.11654\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003e아스키 코드\u003c/code\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;stdio.h\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e(){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003echar\u003c/span\u003e a;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003ewhile\u003c/span\u003e((a\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003egetchar\u003c/span\u003e())\u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003eEOF){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e(a\u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e10\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#a6e22e\"\u003eprintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;%d\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e,a);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","tags":["C","Backjoon","Online-Judge"],"title":"Problem.11654"},{"categories":null,"contents":" 모든 내용은 Git Hub에도있습니다.\nProblem.11718 그대로 출력하기1 문제 : 입력 받은 대로 출력하는 프로그램을 작성하시오.\n#include \u0026lt;stdio.h\u0026gt; int main(int argc,char **argv){ char through_out; while((through_out=getchar())!=EOF){ putchar(through_out); }\t} 풀이 : 여러가지 함수가 있지만 개행(\\n)문자가 들어와도 입력이 끝나면 안된다.\n때문에 getchar함수를 통해 개행(\\n)문자 까지 출력하면 입력 그대로 출력 완료\n","date":"May 18, 2018","hero":"/images/rand_images/christian-wiediger.jpg","permalink":"https://codex-devlab.github.io/posts/study/sub-algorithms/online-judge/backjoon/step-prob/prob-11718/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/ehdwn1991/Coding-Interview/blob/master/Code_Interview_Prep_Platform/backjoon/Level_1/11718.c\" target=\"_blank\" rel=\"noopener\"\u003e모든 내용은 Git Hub에도있습니다.\u003c/a\u003e\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"problem11718\"\u003e\u003ca href=\"https://www.acmicpc.net/problem/11718\" target=\"_blank\" rel=\"noopener\"\u003eProblem.11718\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003e그대로 출력하기1\u003c/code\u003e\n문제 : 입력 받은 대로 출력하는 프로그램을 작성하시오.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;stdio.h\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e argc,\u003cspan style=\"color:#66d9ef\"\u003echar\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e**\u003c/span\u003eargv){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003echar\u003c/span\u003e through_out;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003ewhile\u003c/span\u003e((through_out\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003egetchar\u003c/span\u003e())\u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003eEOF){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003eputchar\u003c/span\u003e(through_out);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\t\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e풀이 : 여러가지 함수가 있지만 개행(\\n)문자가 들어와도 입력이 끝나면 안된다.\u003cbr\u003e\n때문에 getchar함수를 통해 개행(\\n)문자 까지 출력하면 입력 그대로 출력 완료\u003c/p\u003e","tags":["C","Backjoon","Online-Judge"],"title":"Problem.11718"},{"categories":null,"contents":" 모든 내용은 Git Hub에도있습니다.\nProblem.11719번 그대로 출력하기2\n문제 : 입력 받은 대로 출력하는 프로그램을 작성하시오\n단,알파벳 소문자, 대문자, 공백, 숫자로만 이루어져 있다. 각 줄은 100글자를 넘지 않으며,\n빈 줄이 주어질 수도 있고, 각 줄의 앞 뒤에 공백이 있을 수도 있다.\n#include \u0026lt;stdio.h\u0026gt; int main(int argc,char **argv){ char through_out; while((through_out=getchar())!=EOF){ putchar(through_out); }\t} 풀이 : 11718번과 동일.\n입력시 한 글자씩 입력을 받고 받은 그대로 출력하기 때문에 공백, 빈칸, 대 소 문자, 숫자 뭐든지 입력 그대로 출력 됨.\n","date":"May 18, 2018","hero":"/images/rand_images/kevin-bhagat.jpg","permalink":"https://codex-devlab.github.io/posts/study/sub-algorithms/online-judge/backjoon/step-prob/prob-11719/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/ehdwn1991/Coding-Interview/blob/master/Code_Interview_Prep_Platform/backjoon/Level_1/11719.c\" target=\"_blank\" rel=\"noopener\"\u003e모든 내용은 Git Hub에도있습니다.\u003c/a\u003e\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"problem11719번\"\u003e\u003ca href=\"https://www.acmicpc.net/problem/11719\" target=\"_blank\" rel=\"noopener\"\u003eProblem.11719번\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003e그대로 출력하기2\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e문제 : 입력 받은 대로 출력하는 프로그램을 작성하시오\u003cbr\u003e\n단,알파벳 소문자, 대문자, 공백, 숫자로만 이루어져 있다. 각 줄은 100글자를 넘지 않으며,\u003cbr\u003e\n빈 줄이 주어질 수도 있고, 각 줄의 앞 뒤에 공백이 있을 수도 있다.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;stdio.h\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e argc,\u003cspan style=\"color:#66d9ef\"\u003echar\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e**\u003c/span\u003eargv){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003echar\u003c/span\u003e through_out;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003ewhile\u003c/span\u003e((through_out\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003egetchar\u003c/span\u003e())\u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003eEOF){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003eputchar\u003c/span\u003e(through_out);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\t\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e풀이 : \u003ca href=\"https://www.acmicpc.net/problem/11718\" target=\"_blank\" rel=\"noopener\"\u003e11718번\u003c/a\u003e과 동일.\u003cbr\u003e\n입력시 한 글자씩 입력을 받고 받은 그대로 출력하기 때문에 공백, 빈칸, 대 소 문자,   숫자 뭐든지 입력 그대로 출력 됨.\u003c/p\u003e","tags":["C","Backjoon","Online-Judge"],"title":"Problem.11719"},{"categories":null,"contents":" 모든 내용은 Git Hub에도있습니다.\nProblem.11720 숫자의 합 문제 : N개의 숫자가 공백 없이 쓰여있다. 이 숫자를 모두 합해서 출력하는 프로그램을 작성하시오.\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; int main(){ char input; int result=0; int N,buf; scanf(\u0026#34;%d\\n\u0026#34;,\u0026amp;N); for (int i = 0; i \u0026lt; N; ++i) { // input=getchar(); // result+=atoi(\u0026amp;input); result+=(getc(stdin))-48; } //이렇게 해도 똑같은데 그럼 N을 쓸일이 없고 아무래도 //atoi함수를 써서 틀린거 같음 노이해 // while((input=getchar())!=10){ // result+=atoi(\u0026amp;input); // } printf(\u0026#34;%d\\n\u0026#34;,result ); } 풀이 : 키보드로 부터 입력 받은 수(decimal)를 result에 계속 더함\n","date":"May 18, 2018","hero":"/images/rand_images/ilya-pavlov.jpg","permalink":"https://codex-devlab.github.io/posts/study/sub-algorithms/online-judge/backjoon/step-prob/prob-11720/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/ehdwn1991/Coding-Interview/blob/master/Code_Interview_Prep_Platform/backjoon/Level_3/11720.c\" target=\"_blank\" rel=\"noopener\"\u003e모든 내용은 Git Hub에도있습니다.\u003c/a\u003e\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"problem11720\"\u003e\u003ca href=\"https://www.acmicpc.net/problem/11720\" target=\"_blank\" rel=\"noopener\"\u003eProblem.11720\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003e숫자의 합\u003c/code\u003e\n문제 : N개의 숫자가 공백 없이 쓰여있다. 이 숫자를 모두 합해서 출력하는 프로그램을 작성하시오.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;stdio.h\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;stdlib.h\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e(){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003echar\u003c/span\u003e input;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e result\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e N,buf;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003escanf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;%d\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e,\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003eN);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e; i \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e N; \u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003ei)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#75715e\"\u003e// input=getchar();\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\t\t\u003cspan style=\"color:#75715e\"\u003e// result+=atoi(\u0026amp;input);\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\t\t\tresult\u003cspan style=\"color:#f92672\"\u003e+=\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003egetc\u003c/span\u003e(stdin))\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e48\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e//이렇게 해도 똑같은데 그럼 N을 쓸일이 없고 아무래도\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#75715e\"\u003e//atoi함수를 써서 틀린거 같음 노이해\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\t\u003cspan style=\"color:#75715e\"\u003e// while((input=getchar())!=10){\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\t\u003cspan style=\"color:#75715e\"\u003e// \tresult+=atoi(\u0026amp;input);\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\t\u003cspan style=\"color:#75715e\"\u003e// }\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eprintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;%d\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e,result );\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e풀이 : 키보드로 부터 입력 받은 수(decimal)를 result에 계속 더함\u003c/p\u003e","tags":["C","Backjoon","Online-Judge"],"title":"Problem.11720"},{"categories":null,"contents":" 모든 내용은 Git Hub에도있습니다.\nProblem.11721 11721번[열개씩 끊어서 출력하기] 문제 : 알파벳 소문자와 대문자로만 이루어진 길이가 N인 단어가 주어진다.\n한 줄에 10글자씩 끊어서 출력하는 프로그램을 작성하시오.\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;string.h\u0026gt; int main(){ int N; char buf[1001]; fgets(buf,sizeof(buf),stdin); for (int i = 1; i \u0026lt; strlen(buf); ++i) { printf(\u0026#34;%c\u0026#34;,buf[i-1] ); if(i%10==0) printf(\u0026#34;\\n\u0026#34;); } } 풀이 : fgets으로 한줄을 입력 받고 buf에서 10글자씩 출력 해준후 개행(\\n).\n","date":"May 18, 2018","hero":"/images/rand_images/heliberto-arias.jpg","permalink":"https://codex-devlab.github.io/posts/study/sub-algorithms/online-judge/backjoon/step-prob/prob-11721/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/ehdwn1991/Coding-Interview/blob/master/Code_Interview_Prep_Platform/backjoon/Level_3/11721.c\" target=\"_blank\" rel=\"noopener\"\u003e모든 내용은 Git Hub에도있습니다.\u003c/a\u003e\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"problem11721\"\u003e\u003ca href=\"https://www.acmicpc.net/problem/11721\" target=\"_blank\" rel=\"noopener\"\u003eProblem.11721\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003e11721번[열개씩 끊어서 출력하기]\u003c/code\u003e\n문제 : 알파벳 소문자와 대문자로만 이루어진 길이가 N인 단어가 주어진다.\u003cbr\u003e\n한 줄에 10글자씩 끊어서 출력하는 프로그램을 작성하시오.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;stdio.h\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;string.h\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e(){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e N;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003echar\u003c/span\u003e buf[\u003cspan style=\"color:#ae81ff\"\u003e1001\u003c/span\u003e];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003efgets\u003c/span\u003e(buf,\u003cspan style=\"color:#66d9ef\"\u003esizeof\u003c/span\u003e(buf),stdin);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e; i \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003estrlen\u003c/span\u003e(buf); \u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003ei)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003eprintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;%c\u0026#34;\u003c/span\u003e,buf[i\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e] );\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e(i\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e10\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#a6e22e\"\u003eprintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e풀이 : fgets으로 한줄을 입력 받고 buf에서 10글자씩 출력 해준후 개행(\\n).\u003c/p\u003e","tags":["C","Backjoon","Online-Judge"],"title":"Problem.11721"},{"categories":null,"contents":" 백준 단계별 문제집 심화1\n모든 내용은 Git Hub에도있습니다.\n##Problem.1316 그룹 단어 체커\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;string.h\u0026gt; int checker(); int main(){ int N; char buf[101]={\u0026#39;\\0\u0026#39;,}; int result=0; scanf(\u0026#34;%d\u0026#34;,\u0026amp;N); for(int i=0;i\u0026lt;N;i++){ scanf(\u0026#34;%s\u0026#34;,buf); result+=checker(buf); } printf(\u0026#34;%d\\n\u0026#34;,result); } int checker(char *q){ char alpha[101]={\u0026#39;\\0\u0026#39;}; int duplicate_count=0; for(int i=0;i\u0026lt;strlen(q);i++){ if(alpha[duplicate_count]==0\u0026amp;\u0026amp;alpha[duplicate_count-1]!=(*(q+i)))\t{//알파벳 배열에 연속된 같은 문자의 중복을 피하고 저장 alpha[duplicate_count]=(*(q+i)); duplicate_count++; } } for(int j=0;j\u0026lt;strlen(alpha);j++){ for(int k=j+1;k\u0026lt;strlen(alpha);k++){ if(alpha[j]==alpha[k]){ //j번째의 문자가 j+1번째부터 배열의 길이 까지 //한번이라도 나오면 연속단어가 성립 안됨 return 0; } } } return 1; } 입력 받은 문장에서 단어를 체크하는 함수로 입력받은 문장의 주소 전달. 문장에서 연속된 문자의 중복을 제거하면서 한번씩만 배열에 저장 이후 N번째의 문자가 N+1번째부터 끝까지 한번이라도 나온다면 연속문자가 아님.\n","date":"May 18, 2018","hero":"/images/rand_images/yancy-min.jpg","permalink":"https://codex-devlab.github.io/posts/study/sub-algorithms/online-judge/backjoon/step-prob/prob-1316/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003ca href=\"https://www.acmicpc.net/step/52\" target=\"_blank\" rel=\"noopener\"\u003e백준 단계별 문제집 심화1\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"https://github.com/ehdwn1991/Coding-Interview/blob/master/Code_Interview_Prep_Platform/backjoon/Level_7/1316.c\" target=\"_blank\" rel=\"noopener\"\u003e모든 내용은 Git Hub에도있습니다.\u003c/a\u003e\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e##\u003ca href=\"https://www.acmicpc.net/problem/1316\" target=\"_blank\" rel=\"noopener\"\u003eProblem.1316\u003c/a\u003e\n\u003ccode\u003e그룹 단어 체커\u003c/code\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;stdio.h\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;string.h\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003echecker\u003c/span\u003e();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e(){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e N;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003echar\u003c/span\u003e buf[\u003cspan style=\"color:#ae81ff\"\u003e101\u003c/span\u003e]\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e{\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;\\0\u0026#39;\u003c/span\u003e,};\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e result\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003escanf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;%d\u0026#34;\u003c/span\u003e,\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003eN);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;i\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003eN;i\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003escanf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;%s\u0026#34;\u003c/span\u003e,buf);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\tresult\u003cspan style=\"color:#f92672\"\u003e+=\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003echecker\u003c/span\u003e(buf);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003eprintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;%d\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e,result);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e} \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003echecker\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003echar\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003eq){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003echar\u003c/span\u003e alpha[\u003cspan style=\"color:#ae81ff\"\u003e101\u003c/span\u003e]\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e{\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;\\0\u0026#39;\u003c/span\u003e};\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e duplicate_count\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;i\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003estrlen\u003c/span\u003e(q);i\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e(alpha[duplicate_count]\u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003ealpha[duplicate_count\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e]\u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e(\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e(q\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003ei)))\t\t{\u003cspan style=\"color:#75715e\"\u003e//알파벳 배열에 연속된 같은 문자의 중복을 피하고 저장 \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\t\t\talpha[duplicate_count]\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e(\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e(q\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003ei));\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\tduplicate_count\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e j\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;j\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003estrlen\u003c/span\u003e(alpha);j\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e k\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003ej\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e;k\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003estrlen\u003c/span\u003e(alpha);k\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e(alpha[j]\u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003ealpha[k]){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#75715e\"\u003e//j번째의 문자가 j+1번째부터 배열의 길이 까지\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\t\t\t\u003cspan style=\"color:#75715e\"\u003e//한번이라도 나오면 연속단어가 성립 안됨\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\t\t\t\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cblockquote\u003e\n\u003cp\u003e입력 받은 문장에서 단어를 체크하는 함수로 입력받은 문장의 주소 전달.\n문장에서 연속된 문자의 중복을 제거하면서 한번씩만 배열에 저장\n이후 N번째의 문자가 N+1번째부터 끝까지\n한번이라도 나온다면 연속문자가 아님.\u003c/p\u003e","tags":["C","Backjoon","Online-Judge"],"title":"Problem.1316"},{"categories":null,"contents":" 백준 단계별 문제집 레벨 4\n모든 내용은 Git Hub에도있습니다.\nProblem.1546 1546번[평균]\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;string.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; int main(){ int N; float grade[1001]; int i=0; int temp_grade,count=0; int max_grade_pointer=0,max_grade;; int sum=0; float avg=0; scanf(\u0026#34;%d\\n\u0026#34;,\u0026amp;N); for (int i = 0; i \u0026lt; N; ++i) { scanf(\u0026#34;%d\u0026#34;,\u0026amp;temp_grade); grade[i]=temp_grade; if(grade[max_grade_pointer]\u0026gt;=temp_grade){ continue; } else{ max_grade_pointer=i; //printf(\u0026#34;Max : %d\\n\u0026#34;,max_grade_pointer ); } } max_grade=grade[max_grade_pointer]; for (i=0; i \u0026lt; N; ++i) { grade[i]=(float)((int)((grade[i]/max_grade*100)*1000+5))/1000; //문제에서 새로 바뀐 점수도 소수점 2번째 자리 까지 반올림 하라는 문장은 없지만 그렇게 해줘야댐 avg+=grade[i]; } printf(\u0026#34;%.2f\\n\u0026#34;,avg/N); 알고리즘은 별거 없지만, 자료를 잘 다뤄줘야 한다. 최대 값에 맞춰서 새로운 점수를 맞출때에도 소수 2번째 자리 까지 반올림 해줘야 한다. 그리고 마지막 평균을 구해줄때에도 소수 2번째 자리 까지 반올림 해줘야함.\n","date":"May 18, 2018","hero":"/images/rand_images/nejc-soklic.jpg","permalink":"https://codex-devlab.github.io/posts/study/sub-algorithms/online-judge/backjoon/step-prob/prob-1546/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003ca href=\"https://www.acmicpc.net/step/6\" target=\"_blank\" rel=\"noopener\"\u003e백준 단계별 문제집 레벨 4\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"https://github.com/ehdwn1991/Coding-Interview/blob/master/Code_Interview_Prep_Platform/backjoon/Level_4/1546.c\" target=\"_blank\" rel=\"noopener\"\u003e모든 내용은 Git Hub에도있습니다.\u003c/a\u003e\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"problem1546\"\u003e\u003ca href=\"https://www.acmicpc.net/problem/1546\" target=\"_blank\" rel=\"noopener\"\u003eProblem.1546\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003e1546번[평균]\u003c/code\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;stdio.h\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;string.h\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;stdlib.h\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e(){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e N;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003efloat\u003c/span\u003e grade[\u003cspan style=\"color:#ae81ff\"\u003e1001\u003c/span\u003e];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e temp_grade,count\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e max_grade_pointer\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e,max_grade;;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e sum\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003efloat\u003c/span\u003e avg\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003escanf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;%d\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e,\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003eN);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e; i \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e N; \u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003ei)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003escanf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;%d\u0026#34;\u003c/span\u003e,\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003etemp_grade);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\tgrade[i]\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003etemp_grade;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e(grade[max_grade_pointer]\u003cspan style=\"color:#f92672\"\u003e\u0026gt;=\u003c/span\u003etemp_grade){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#66d9ef\"\u003econtinue\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\tmax_grade_pointer\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003ei;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#75715e\"\u003e//printf(\u0026#34;Max : %d\\n\u0026#34;,max_grade_pointer );\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\t\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tmax_grade\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003egrade[max_grade_pointer];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (i\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e; i \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e N; \u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003ei)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\tgrade[i]\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003efloat\u003c/span\u003e)((\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e)((grade[i]\u003cspan style=\"color:#f92672\"\u003e/\u003c/span\u003emax_grade\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e100\u003c/span\u003e)\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1000\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e))\u003cspan style=\"color:#f92672\"\u003e/\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1000\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#75715e\"\u003e//문제에서 새로 바뀐 점수도 소수점 2번째 자리 까지 반올림 하라는 문장은 없지만 그렇게 해줘야댐\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\t\tavg\u003cspan style=\"color:#f92672\"\u003e+=\u003c/span\u003egrade[i];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eprintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;%.2f\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e,avg\u003cspan style=\"color:#f92672\"\u003e/\u003c/span\u003eN);\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cblockquote\u003e\n\u003cp\u003e알고리즘은 별거 없지만, 자료를 잘 다뤄줘야 한다.\n최대 값에 맞춰서 새로운 점수를 맞출때에도 소수 2번째 자리 까지 반올림 해줘야 한다.\n그리고 마지막 평균을 구해줄때에도 소수 2번째 자리 까지 반올림 해줘야함.\u003c/p\u003e","tags":["C","Level 4","Array","Backjoon","Online-Judge"],"title":"Problem.1546"},{"categories":null,"contents":" 모든 내용은 Git Hub에도있습니다.\nProblem.15552 15552번[열개씩 끊어서 출력하기] 문제 : 각 테스트케이스마다 A+B를 한 줄에 하나씩 순서대로 출력한다.(입력 A,B는 1000이하 케이스 T는 최대 1,000,000이다.)\n#include \u0026lt;stdio.h\u0026gt; int main(){ int N; int a,b; scanf(\u0026#34;%d\u0026#34;,\u0026amp;N); for (int i = 0; i \u0026lt; N; ++i) { scanf(\u0026#34;%d %d\u0026#34;,\u0026amp;a,\u0026amp;b); printf(\u0026#34;%d\\n\u0026#34;,a+b); } } ","date":"May 18, 2018","hero":"/images/rand_images/yancy-min.jpg","permalink":"https://codex-devlab.github.io/posts/study/sub-algorithms/online-judge/backjoon/step-prob/prob-15552/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/ehdwn1991/Coding-Interview/blob/master/Code_Interview_Prep_Platform/backjoon/Level_3/15552.c\" target=\"_blank\" rel=\"noopener\"\u003e모든 내용은 Git Hub에도있습니다.\u003c/a\u003e\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"problem15552\"\u003e\u003ca href=\"https://www.acmicpc.net/problem/15552\" target=\"_blank\" rel=\"noopener\"\u003eProblem.15552\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003e15552번[열개씩 끊어서 출력하기]\u003c/code\u003e\n문제 : 각 테스트케이스마다 A+B를 한 줄에 하나씩 순서대로 출력한다.(입력 A,B는 1000이하 케이스 T는 최대 1,000,000이다.)\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;stdio.h\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e(){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e N;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e a,b;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003escanf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;%d\u0026#34;\u003c/span\u003e,\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003eN);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e; i \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e N; \u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003ei)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003escanf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;%d %d\u0026#34;\u003c/span\u003e,\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003ea,\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003eb);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003eprintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;%d\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e,a\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003eb);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","tags":["C","Backjoon","Online-Judge"],"title":"Problem.15552"},{"categories":null,"contents":" 모든 내용은 Git Hub에도있습니다.\nProblem.1924 1924번 [2007] 문제 : 오늘은 2007년 1월 1일 월요일이다. 그렇다면 2007년 x월 y일은 무슨 요일일까? 이를 알아내는 프로그램을 작성하시오.\n#include \u0026lt;stdio.h\u0026gt; int main(){ char *day_of_week[7]={\u0026#34;SUN\u0026#34;, \u0026#34;MON\u0026#34;, \u0026#34;TUE\u0026#34;, \u0026#34;WED\u0026#34;, \u0026#34;THU\u0026#34;, \u0026#34;FRI\u0026#34;, \u0026#34;SAT\u0026#34;}; //2007year 1month 1day is monday // SUN, MON, TUE, WED, THU, FRI, SAT int month_of_day[12]={31,28,31,30,31,30,31,31,30,31,30,31}; //1, 3, 5, 7, 8, 10, 12월은 31일까지, 4, 6, 9, 11월은 30일까지, 2월은 28일까 int month=0,day=0,now_of_day=0; // printf(\u0026#34;\\n\u0026#34;); scanf(\u0026#34;%d %d\u0026#34;,\u0026amp;month,\u0026amp;day); for(int i=0;i\u0026lt;month-1;i++){ now_of_day+=month_of_day[i]; } now_of_day+=day; printf(\u0026#34;%s\\n\u0026#34;,*(day_of_week+(now_of_day%7))); } 풀이 : 월 과 일이 입력으로 주어지고, 현재 1월1일부터 몇일이 지났는지 now_of_day에 저장 후 요일을 계산\n","date":"May 18, 2018","hero":"/images/rand_images/karl-pawlowicz.jpg","permalink":"https://codex-devlab.github.io/posts/study/sub-algorithms/online-judge/backjoon/step-prob/prob-1924/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/ehdwn1991/Coding-Interview/blob/master/Code_Interview_Prep_Platform/backjoon/Level_3/1924.c\" target=\"_blank\" rel=\"noopener\"\u003e모든 내용은 Git Hub에도있습니다.\u003c/a\u003e\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"problem1924\"\u003e\u003ca href=\"https://www.acmicpc.net/problem/1924\" target=\"_blank\" rel=\"noopener\"\u003eProblem.1924\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003e1924번 [2007]\u003c/code\u003e\n문제  : 오늘은 2007년 1월 1일 월요일이다. 그렇다면 2007년 x월 y일은 무슨 요일일까? 이를 알아내는 프로그램을 작성하시오.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;stdio.h\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e(){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003echar\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003eday_of_week[\u003cspan style=\"color:#ae81ff\"\u003e7\u003c/span\u003e]\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e{\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;SUN\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;MON\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;TUE\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;WED\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;THU\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;FRI\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;SAT\u0026#34;\u003c/span\u003e};\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e//2007year 1month 1day is monday\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\t\u003cspan style=\"color:#75715e\"\u003e// SUN, MON, TUE, WED, THU, FRI, SAT\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e month_of_day[\u003cspan style=\"color:#ae81ff\"\u003e12\u003c/span\u003e]\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e{\u003cspan style=\"color:#ae81ff\"\u003e31\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e28\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e31\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e30\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e31\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e30\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e31\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e31\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e30\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e31\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e30\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e31\u003c/span\u003e};\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e//1, 3, 5, 7, 8, 10, 12월은 31일까지, 4, 6, 9, 11월은 30일까지, 2월은 28일까\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e month\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e,day\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e,now_of_day\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e// printf(\u0026#34;\\n\u0026#34;);\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\t\u003cspan style=\"color:#a6e22e\"\u003escanf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;%d %d\u0026#34;\u003c/span\u003e,\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003emonth,\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003eday);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;i\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003emonth\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e;i\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\tnow_of_day\u003cspan style=\"color:#f92672\"\u003e+=\u003c/span\u003emonth_of_day[i];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tnow_of_day\u003cspan style=\"color:#f92672\"\u003e+=\u003c/span\u003eday;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eprintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;%s\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e,\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e(day_of_week\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e(now_of_day\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e7\u003c/span\u003e)));\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e풀이 : 월 과 일이 입력으로 주어지고, 현재 1월1일부터 몇일이 지났는지 now_of_day에 저장 후 요일을 계산\u003c/p\u003e","tags":["C","Backjoon","Online-Judge"],"title":"Problem.1924"},{"categories":null,"contents":"Math Problem Problem.1978 - Tag[수학] 소수찾기\n소수찾기 소수는 sqrt(N)까지만 검색하면 된다. 2~sqrt(N)까지 나누어 떨어지는 수가 없다면 소수가 보장되기 때문임. #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;math.h\u0026gt; int is_prime(); int main(){ int N,input,count=0,prime=1; scanf(\u0026#34;%d\u0026#34;,\u0026amp;N); for (int i = 1; i \u0026lt;= N; ++i) { // input=i; scanf(\u0026#34;%d\u0026#34;,\u0026amp;input); if(is_prime(input)==1) count++; } printf(\u0026#34;%d\\n\u0026#34;,count); } int is_prime(int num){ if(num==1) return 0; for (int j = 2; j \u0026lt;= sqrt(num); ++j) { if(num%j==0){ return 0; } } return 1; } 에라토네스의 체 알고리즘 /* 에라토스테네스의 체 알고리즘을 기준으로 찾는다. 2부터 소수를 구하고자 하는 구간의 모든 수를 나열한다. 그림에서 회색 사각형으로 두른 수들이 여기에 해당한다. 2는 소수이므로 오른쪽에 2를 쓴다. (빨간색) 자기 자신을 제외한 2의 배수를 모두 지운다. 남아있는 수 가운데 3은 소수이므로 오른쪽에 3을 쓴다. (초록색) 자기 자신을 제외한 3의 배수를 모두 지운다. 남아있는 수 가운데 5는 소수이므로 오른쪽에 5를 쓴다. (파란색) 자기 자신을 제외한 5의 배수를 모두 지운다. 남아있는 수 가운데 7은 소수이므로 오른쪽에 7을 쓴다. (노란색) 자기 자신을 제외한 7의 배수를 모두 지운다. 위의 과정을 반복하면 구하는 구간의 모든 소수가 남는다. */ #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;string.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; int main(){ int N,count=1; scanf(\u0026#34;%d\u0026#34;,\u0026amp;N); char *arr=(char*)malloc(sizeof(char)*N); memset(arr,1,sizeof(char)*N); puts(arr); for (int i = 2; (i*i)\u0026lt;= N; ++i) //루트 N까지만 체크 { if(arr[i]==1){ for (int j = i*i; j \u0026lt; N; j+=i) { arr[j]=0;//1 is prime 0 is not prime } } } for (int i = 2; i \u0026lt; N; ++i) { if(arr[i]==1){ printf(\u0026#34;%d \u0026#34;,i); if(count%10==0) puts(\u0026#34;\u0026#34;); count++; } } free(arr); } 모든 내용은 Git Hub에도있습니다.\n","date":"May 18, 2018","hero":"/images/rand_images/markus-spiske.jpg","permalink":"https://codex-devlab.github.io/posts/study/sub-algorithms/online-judge/backjoon/step-prob/prob-1978/","summary":"\u003ch2 id=\"math-problem\"\u003eMath Problem\u003c/h2\u003e\n\u003ch3 id=\"problem1978---tag\"\u003e\u003ca href=\"https://www.acmicpc.net/problem/1978\" target=\"_blank\" rel=\"noopener\"\u003eProblem.1978\u003c/a\u003e - \u003ca href=\"https://www.acmicpc.net/problemset?sort=ac_desc\u0026amp;algo=124\" target=\"_blank\" rel=\"noopener\"\u003eTag[수학]\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003e\u003ccode\u003e소수찾기\u003c/code\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e소수찾기\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e소수는 sqrt\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003eN\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e까지만 검색하면 된다. 2~sqrt\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003eN\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e까지 나누어 떨어지는 수가 없다면 소수가 보장되기 때문임.\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;stdio.h\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;math.h\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eis_prime\u003c/span\u003e();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e(){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e N,input,count\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e,prime\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e; \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003escanf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;%d\u0026#34;\u003c/span\u003e,\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003eN);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e; i \u003cspan style=\"color:#f92672\"\u003e\u0026lt;=\u003c/span\u003e N; \u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003ei)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#75715e\"\u003e// input=i;\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003escanf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;%d\u0026#34;\u003c/span\u003e,\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003einput);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eis_prime\u003c/span\u003e(input)\u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\tcount\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eprintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;%d\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e,count);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eis_prime\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e num){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e(num\u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e j \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e; j \u003cspan style=\"color:#f92672\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esqrt\u003c/span\u003e(num); \u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003ej)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e(num\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003ej\u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"에라토네스의-체-알고리즘\"\u003e에라토네스의 체 알고리즘\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e/*\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e에라토스테네스의 체 알고리즘을 기준으로 찾는다.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e2부터 소수를 구하고자 하는 구간의 모든 수를 나열한다. 그림에서 회색 사각형으로 두른 수들이 여기에 해당한다.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e2는 소수이므로 오른쪽에 2를 쓴다. (빨간색)\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e자기 자신을 제외한 2의 배수를 모두 지운다.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e남아있는 수 가운데 3은 소수이므로 오른쪽에 3을 쓴다. (초록색)\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e자기 자신을 제외한 3의 배수를 모두 지운다.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e남아있는 수 가운데 5는 소수이므로 오른쪽에 5를 쓴다. (파란색)\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e자기 자신을 제외한 5의 배수를 모두 지운다.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e남아있는 수 가운데 7은 소수이므로 오른쪽에 7을 쓴다. (노란색)\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e자기 자신을 제외한 7의 배수를 모두 지운다.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e위의 과정을 반복하면 구하는 구간의 모든 소수가 남는다.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e*/\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;stdio.h\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;string.h\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;stdlib.h\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e(){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e N,count\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003escanf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;%d\u0026#34;\u003c/span\u003e,\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003eN);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003echar\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003earr\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003echar\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e)\u003cspan style=\"color:#a6e22e\"\u003emalloc\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003esizeof\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003echar\u003c/span\u003e)\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003eN);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003ememset\u003c/span\u003e(arr,\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e,\u003cspan style=\"color:#66d9ef\"\u003esizeof\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003echar\u003c/span\u003e)\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003eN);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eputs\u003c/span\u003e(arr);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e;  (i\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003ei)\u003cspan style=\"color:#f92672\"\u003e\u0026lt;=\u003c/span\u003e N; \u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003ei) \u003cspan style=\"color:#75715e\"\u003e//루트 N까지만 체크\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\t{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e(arr[i]\u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e j \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e i\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003ei; j \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e N; j\u003cspan style=\"color:#f92672\"\u003e+=\u003c/span\u003ei)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\tarr[j]\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\u003cspan style=\"color:#75715e\"\u003e//1 is prime 0 is not prime\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\t\t\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e; i \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e N; \u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003ei)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e(arr[i]\u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#a6e22e\"\u003eprintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;%d \u0026#34;\u003c/span\u003e,i);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e(count\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e10\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#a6e22e\"\u003eputs\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\tcount\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003efree\u003c/span\u003e(arr);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003ca href=\"https://github.com/ehdwn1991/Coding-Interview/tree/master/Code_Interview_Prep_Platform/backjoon/Math_prob\" target=\"_blank\" rel=\"noopener\"\u003e모든 내용은 Git Hub에도있습니다.\u003c/a\u003e\u003c/p\u003e","tags":["C","Math","Prime Number","Backjoon","Online-Judge"],"title":"Problem.1978"},{"categories":null,"contents":" 모든 내용은 Git Hub에도있습니다.\nProblem.2257 2257번[숫자의 개수]\n#include \u0026lt;stdio.h\u0026gt; int main(){ int a,b,c,multi; int count[10]={0,}; scanf(\u0026#34;%d\u0026#34;,\u0026amp;a); scanf(\u0026#34;%d\u0026#34;,\u0026amp;b); scanf(\u0026#34;%d\u0026#34;,\u0026amp;c); multi=a*b*c; while(multi\u0026gt;0){ count[multi%10]+=1; multi/=10; } for (int i = 0; i \u0026lt; 10; ++i) { printf(\u0026#34;%d\\n\u0026#34;,count[i]); } } ","date":"May 18, 2018","hero":"/images/rand_images/christian-wiediger.jpg","permalink":"https://codex-devlab.github.io/posts/study/sub-algorithms/online-judge/backjoon/step-prob/prob-2257/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/ehdwn1991/Coding-Interview/blob/master/Code_Interview_Prep_Platform/backjoon/Level_6/2257.c\" target=\"_blank\" rel=\"noopener\"\u003e모든 내용은 Git Hub에도있습니다.\u003c/a\u003e\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"problem2257\"\u003e\u003ca href=\"https://www.acmicpc.net/problem/2577\" target=\"_blank\" rel=\"noopener\"\u003eProblem.2257\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003e2257번[숫자의 개수]\u003c/code\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;stdio.h\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e(){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e a,b,c,multi;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e count[\u003cspan style=\"color:#ae81ff\"\u003e10\u003c/span\u003e]\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e{\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e,};\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003escanf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;%d\u0026#34;\u003c/span\u003e,\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003ea);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003escanf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;%d\u0026#34;\u003c/span\u003e,\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003eb);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003escanf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;%d\u0026#34;\u003c/span\u003e,\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003ec);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tmulti\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003ea\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003eb\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003ec;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003ewhile\u003c/span\u003e(multi\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\tcount[multi\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e10\u003c/span\u003e]\u003cspan style=\"color:#f92672\"\u003e+=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\tmulti\u003cspan style=\"color:#f92672\"\u003e/=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e10\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e; i \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e10\u003c/span\u003e; \u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003ei)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003eprintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;%d\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e,count[i]);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","tags":["C","Backjoon","Online-Judge"],"title":"Problem.2257"},{"categories":null,"contents":" 모든 내용은 Git Hub에도있습니다.\nProblem.2439 2439번[별찍기2] 문제 : 다음과 같이 만들어지도록 출력\n* ** *** **** ***** #include \u0026lt;stdio.h\u0026gt; int main(){ int N,space,asteric=0; scanf(\u0026#34;%d\u0026#34;,\u0026amp;N); space=N-1; for (int i = 0;i\u0026lt;N ; ++i) //N줄 까지 공백과 별을 출력해줘야함 {\tfor (int j = 0; j \u0026lt; space-i; ++j) {//space갯수는 N-1개부터 별 의 갯수만큼 감소 printf(\u0026#34; \u0026#34;);//space } for (int k = 0; k \u0026lt;= i; ++k) {//별의 갯수는 N번째 줄 N개가됨. printf(\u0026#34;*\u0026#34;);//asteric } printf(\u0026#34;\\n\u0026#34;); } } 풀이 : N줄 까지 우측 정렬로 출력 하는 문제.\n","date":"May 18, 2018","hero":"/images/rand_images/sigmund.jpg","permalink":"https://codex-devlab.github.io/posts/study/sub-algorithms/online-judge/backjoon/step-prob/prob-2439/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/ehdwn1991/Coding-Interview/blob/master/Code_Interview_Prep_Platform/backjoon/Level_3/2439.c\" target=\"_blank\" rel=\"noopener\"\u003e모든 내용은 Git Hub에도있습니다.\u003c/a\u003e\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"problem2439\"\u003e\u003ca href=\"https://www.acmicpc.net/problem/2439\" target=\"_blank\" rel=\"noopener\"\u003eProblem.2439\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003e2439번[별찍기2]\u003c/code\u003e\n문제  : 다음과 같이 만들어지도록 출력\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   \u003cspan style=\"color:#f92672\"\u003e**\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#f92672\"\u003e***\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e \u003cspan style=\"color:#f92672\"\u003e****\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e*****\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;stdio.h\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e(){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e N,space,asteric\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003escanf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;%d\u0026#34;\u003c/span\u003e,\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003eN);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tspace\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003eN\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;i\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003eN ; \u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003ei) \u003cspan style=\"color:#75715e\"\u003e//N줄 까지 공백과 별을 출력해줘야함\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\t{\t\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e j \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e; j \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e space\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003ei; \u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003ej)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t{\u003cspan style=\"color:#75715e\"\u003e//space갯수는 N-1개부터 별 의 갯수만큼 감소\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\t\t\t\u003cspan style=\"color:#a6e22e\"\u003eprintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34; \u0026#34;\u003c/span\u003e);\u003cspan style=\"color:#75715e\"\u003e//space\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\t\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e k \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e; k \u003cspan style=\"color:#f92672\"\u003e\u0026lt;=\u003c/span\u003e i; \u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003ek)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t{\u003cspan style=\"color:#75715e\"\u003e//별의 갯수는 N번째 줄 N개가됨.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\t\t\t\u003cspan style=\"color:#a6e22e\"\u003eprintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;*\u0026#34;\u003c/span\u003e);\u003cspan style=\"color:#75715e\"\u003e//asteric\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\t\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003eprintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e풀이 :  N줄 까지 우측 정렬로 출력 하는 문제.\u003c/p\u003e","tags":["C","Backjoon","Online-Judge"],"title":"Problem.2439"},{"categories":null,"contents":" 모든 내용은 Git Hub에도있습니다.\nProblem.2441 2441번 [별찍기4] 문제 : 다음과 같이 만들어지도록 출력\n***** **** *** ** * #include \u0026lt;stdio.h\u0026gt; int main(){ int N,space,asteric=0; scanf(\u0026#34;%d\u0026#34;,\u0026amp;N); space=N; for (int i = 0;i\u0026lt;N ; ++i) {\tfor (int k = 0; k \u0026lt;i; ++k) { printf(\u0026#34; \u0026#34;);//asteric } for (int j = 0; j \u0026lt; space-i; ++j) { printf(\u0026#34;*\u0026#34;);//space } printf(\u0026#34;\\n\u0026#34;); } } 풀이 : N줄 까지 역순 우측 정렬로 출력 하는 문제. 2439번에서 for문 순서만 바꿔주면 된다.\n","date":"May 18, 2018","hero":"/images/rand_images/ben-kold.jpg","permalink":"https://codex-devlab.github.io/posts/study/sub-algorithms/online-judge/backjoon/step-prob/prob-2441/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/ehdwn1991/Coding-Interview/blob/master/Code_Interview_Prep_Platform/backjoon/Level_3/2441.c\" target=\"_blank\" rel=\"noopener\"\u003e모든 내용은 Git Hub에도있습니다.\u003c/a\u003e\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"problem2441\"\u003e\u003ca href=\"https://www.acmicpc.net/problem/2441\" target=\"_blank\" rel=\"noopener\"\u003eProblem.2441\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003e2441번 [별찍기4]\u003c/code\u003e\n문제  : 다음과 같이 만들어지도록 출력\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e*****\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e \u003cspan style=\"color:#f92672\"\u003e****\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#f92672\"\u003e***\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   \u003cspan style=\"color:#f92672\"\u003e**\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;stdio.h\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e(){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e N,space,asteric\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003escanf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;%d\u0026#34;\u003c/span\u003e,\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003eN);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tspace\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003eN;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;i\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003eN ; \u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003ei)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t{\t\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e k \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e; k \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003ei; \u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003ek)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#a6e22e\"\u003eprintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34; \u0026#34;\u003c/span\u003e);\u003cspan style=\"color:#75715e\"\u003e//asteric\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\t\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e j \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e; j \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e space\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003ei; \u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003ej)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#a6e22e\"\u003eprintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;*\u0026#34;\u003c/span\u003e);\u003cspan style=\"color:#75715e\"\u003e//space\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\t\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003eprintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e풀이 :  N줄 까지 역순 우측 정렬로 출력 하는 문제. 2439번에서 for문 순서만 바꿔주면 된다.\u003c/p\u003e","tags":["C","Backjoon","Online-Judge"],"title":"Problem.2441"},{"categories":null,"contents":" 모든 내용은 Git Hub에도 있습니다.\nProblem.2448 2448번 문제(성공)-파스칼 삼각형 별찍기\n입력 N줄이 주어지고(N은 3*2^K의 수로 보장됨), 최대 열의 갯수는2N-1개가 됨.\nN줄의 최대 값은 3072이고, 열의 최대 값은 60143개임\n처음에 별이 고정됨. 즉, 이 3줄이 한 셋트임.\n그리고 별셋트가 찍히는 규칙이 있는데 이게 바로 파스칼 삼각형에서 홀수인 부분들만 별셋트가 찍히는 것이다.\n6줄 기준 1 1 1 1 1 1 3 3 1 1 1 1 5 5 1 위에서 홀수인 부분들만 별 셋트가 그려지게 된다. 몇가지 규칙을 찾을수 있는데, 위에부터 0,0 밑에 줄은\n1,0과 1,1 이라고 해보자. 1행에 별이 그려지기 위해선 이전 행의 좌표에 별의 유무가 중요하다.\n그럼 다음 2행을 보자.\n2행은 2,0 2,1 2,2 이렇게 세개가 존재 하지만 실제는 2,1은 비어 있다. 이항 정리에 의해 2가 되어야 하지만\n우리가 만들려는 규칙에서는 짝수는 무시해야 한다. 그럼 이 짝수 부분을 어떻게 무시하면서 별을 그릴까?\n바로 이전 행 1행을 살펴 보면 된다. 2,1과 비교해야 하는 행은 1,0 과 1,1이다 둘다 별 셋트가 존재 한다.\n그럼 일반화를 시켜볼수있다.\na[i][j]=a[i-1][j-1]^a[i-1][j+1] //만약 이전 행의 양 쪽의 값이 존재 하거나 양쪽다 값이 없다면 0일 테고, //양쪽의 값이 다르다면 1일 것이다. //이는 이전 행에 값이 1개만 존재 해야 함을 알수 있다. 이처럼 2,1의 별셋트를 그리지 않아도 됨을 1행의 0열과 1열의 값을 XOR해서 0이 나오기때문에 2,1의 값은 0으로 채우면 되는것\nTip 잘못된 배열의 값 비교 ​\t만약 잘못된 배열의 값을 비교하려고 하면 어떻게 될까? 물론 쓰레기 값이 들어가게 된다.\nint a[2][2]={0,}; int i=3,j=4; if(a[2-i][3-j]) printf(\u0026#34;What\\n\u0026#34;); 결과는 어떨까? 물론 What이 출력된다. 잘못된 값을 참조할 지라도 쓰레기 값이 나오기 떄문에 if문이 성립된다. 하지만 정작 중요한것은 그게 아니다.\n배열은 스택에 저장되기때문에 만약 저기처럼\na[-1][-1]을 참조하고자 한다면 a에 대한 배열이후에 저장된 어떠한 주소 값을참조한다는 의미다. 다음 예제를 보면 확실하게 이해할수 있다. 잘못된 배열주소 참조\nint arr1[8]={12,},arr2[8]={33,}; printf(\u0026#34;arr1[-9]%d arr1[-9]%p arr2[0]%d arr2[0]%p\\n\u0026#34;, arr1[a-9],\u0026amp;arr1[a-9],arr2[0],\u0026amp;arr2[0] ); //이런 경우는 어떨까? //뇌피셜상 잘못된 주소를 참조 하니 쓰레기 값이 나오거나 os혹은 컴파일러에 따라서 에러에 관한 값과 주소를 출력해줄것 같다. 아니면 아예 Segmentfault를 토해낼 꺼다. 근데?!!! arr1[-9]33 arr1[-9]0x7ffee7f938d0 arr2[0]33 arr2[0]0x7ffee7f938d0 자세히 보자 잘못된 주소를 토해내야 하지만 두 값은 정확히 같은 값을 보여준다 왜그럴까? arr1[-9]는 사실상 권장하지 않는 옛 표기법이지만 불가능한것은 아니다. 위에서 같이 arr1[-9]는 arr1의 배열이 4byte*8의 크기로 스택에 저장되어 있을것이다. arr1의 시작 주소는 0x7ffee7f9389E이다 스택은 밑에서 위로 자라나고, 여기서 -9칸 즉, arr1배열의 끝인 0x7ffee7f938cc에서 한칸더 올라간 arr2의 시작 주소를 가르키는 것이다. 그래서 두 값이 일치하게 되는것! 그래도 이런식의 표기는 구조를 복잡하게 만들기 때문에 피해야 할것같다.\n그럼 이제 별을 그리는 알고리즘을 확정해야 한다.\n* * * ***** 한상 맨 윗줄의 * 은 N개의 줄이입력 되면 N-1번째에 위치함. 그래서 처음 별 셋트에 대해서 초기값을 정해줘야함.\na[0][n-1]=a[1][n-2]=a[1][n]=a[2][n-3]=a[2][n-2]=a[2][n-1]=a[2][n]=a[2][n+1]=1 00000100000 00001010000 00011111000 00100000100 01010001010 11111011111 이제 판별식을 만들어 줘야한다.\nif(i\u0026gt;2) a[i][h]=(j\u0026gt;2\u0026amp;\u0026amp;a[i-3][j-3])^a[i-3][j+3] //처음 시작 N-1에 찍힌 별셋트를 시작으로 다음 별을 그려야 한다. //처음 별이 그려지고 i가 3일때를 생각해 보자 //4번째 줄에서 별이 찍혀야 하는 부분은 j가 2,8에서 별이 찍힌다. // j=2 =\u0026gt; a[3-3][2-3]^a[3-3][2+3] =\u0026gt; a[0][-1]^a[0][5] =\u0026gt; 쓰레기값^1=1 //a[3][2]=1 // j=8 =\u0026gt; a[3-3][8-3]^a[3-3][8+3] =\u0026gt; a[0][5]^a[0][11] =\u0026gt; 1^쓰레기값=1 //a[3][8]=1 //결국 별이 찍혀야 하는 부분만 1이 저장되고 아닌 부분은 0이 저장되는것 Code #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;string.h\u0026gt; int main(){ int N; // printf(\u0026#34;!!!!!\u0026#34;); // int a[3072][6143]={0,}; scanf(\u0026#34;%d\u0026#34;,\u0026amp;N); int **row=(int**)malloc(sizeof(int*)*N),a[8][8]; for (int i = 0; i \u0026lt; N; ++i) { row[i]=(int*)malloc(sizeof(int)*((2*N)-1)); memset(row[i],0,sizeof(int)*((2*N)-1)); } // a[0][N-1]=a[1][N-2]=a[1][N]=a[2][N-3]=a[2][N-2]=a[2][N-1]=a[2][N]=a[2][N+1]=1; //1은 별 그리고 0은 공백 row[0][N-1]=row[1][N-2]=row[1][N]=row[2][N-3]=row[2][N-2]=row[2][N-1]=row[2][N]=row[2][N+1]=1; // row[0][N-1]=1; // row[1][N-2]=1; // printf(\u0026#34;%d %d \\n\u0026#34;,row[0][N-1],row[1][N-2] ); for (int i = 0; i \u0026lt;N ; ++i) { for (int j = 0; j \u0026lt;=(N-1+i) ; ++j) { if(i\u0026gt;2){ row[i][j]=((j\u0026gt;2\u0026amp;\u0026amp;row[i-3][j-3])^row[i-3][j+3]); } } } for (int q = 0; q \u0026lt; N; ++q) { for (int w = 0; w \u0026lt; 2*N-1; ++w) { // printf(\u0026#34;%d \u0026#34;,row[q][w] ); if(row[q][w]==1) printf(\u0026#34;*\u0026#34;); else printf(\u0026#34; \u0026#34;); } puts(\u0026#34;\u0026#34;); } free(row); } Reference http://codersbrunch.blogspot.kr/2016/12/2448-11.html ","date":"May 18, 2018","hero":"/images/rand_images/emile-perron.jpg","permalink":"https://codex-devlab.github.io/posts/study/sub-algorithms/online-judge/backjoon/step-prob/prob-2448/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/ehdwn1991/Coding-Interview/blob/master/Code_Interview_Prep_Platform/backjoon/Level_5/2448.c\" target=\"_blank\" rel=\"noopener\"\u003e모든 내용은 Git Hub에도 있습니다.\u003c/a\u003e\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"problem2448\"\u003e\u003ca href=\"https://www.acmicpc.net/problem/2448\" target=\"_blank\" rel=\"noopener\"\u003eProblem.2448\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003e2448번 문제(성공)-파스칼 삼각형 별찍기\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e입력 N줄이 주어지고(N은 3*2^K의 수로 보장됨), 최대 열의 갯수는2N-1개가 됨.\u003cbr\u003e\nN줄의 최대 값은 3072이고, 열의 최대 값은 60143개임\u003cbr\u003e\n처음에 별이 고정됨. 즉, 이 3줄이  한 셋트임.\u003cbr\u003e\n그리고 별셋트가 찍히는 규칙이 있는데 이게 바로 파스칼 삼각형에서 홀수인 부분들만 별셋트가 찍히는 것이다.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ae81ff\"\u003e6\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e줄\u003c/span\u003e \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e기준\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e     \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e     \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e   \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e   \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e       \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e     \u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e위에서 홀수인 부분들만 별 셋트가 그려지게 된다. 몇가지 규칙을 찾을수 있는데, 위에부터 0,0 밑에 줄은\u003cbr\u003e\n1,0과 1,1 이라고 해보자. 1행에 별이 그려지기 위해선 이전 행의 좌표에 별의 유무가 중요하다.\u003c/p\u003e","tags":["C","Backjoon","Online-Judge"],"title":"Problem.2448"},{"categories":null,"contents":" 백준 단계별 문제집 레벨17\n모든 내용은 Git Hub에도있습니다.\nProblem.2490 2490번[윷놀이]\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;string.h\u0026gt; int main(){ int bae,deung; int one,two,three,four; char buf[10]; int status_zero=0,status_one=0; for(int i = 0; i \u0026lt; 3; ++i){ fgets(buf,sizeof(buf),stdin); for (int j = 0; j \u0026lt; strlen(buf); ++j) { if(buf[j]==\u0026#39;0\u0026#39;) status_zero++; else if(buf[j]==\u0026#39;1\u0026#39;) status_one++; else continue; } if(status_zero\u0026gt;0){ switch(status_zero){ case 1: printf(\u0026#34;A\\n\u0026#34;); break; case 2: printf(\u0026#34;B\\n\u0026#34;); break; case 3: printf(\u0026#34;C\\n\u0026#34;); break; case 4: printf(\u0026#34;D\\n\u0026#34;); break; } } else printf(\u0026#34;E\\n\u0026#34;); status_one=0; status_zero=0; } } 모든 내용은 Git Hub에도있습니다.\n","date":"May 18, 2018","hero":"/images/rand_images/vollume-tf.jpg","permalink":"https://codex-devlab.github.io/posts/study/sub-algorithms/online-judge/backjoon/step-prob/prob-2490/","summary":"\u003cblockquote\u003e\n\u003cp\u003e백준 단계별 문제집 레벨17\u003cbr\u003e\n\u003ca href=\"https://github.com/ehdwn1991/Coding-Interview/tree/master/Code_Interview_Prep_Platform/backjoon/Level_17\" target=\"_blank\" rel=\"noopener\"\u003e모든 내용은 Git Hub에도있습니다.\u003c/a\u003e\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"problem2490\"\u003e\u003ca href=\"https://www.acmicpc.net/problem/2490\" target=\"_blank\" rel=\"noopener\"\u003eProblem.2490\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003e2490번[윷놀이]\u003c/code\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;stdio.h\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;stdlib.h\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;string.h\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e(){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e bae,deung;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e one,two,three,four;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003echar\u003c/span\u003e buf[\u003cspan style=\"color:#ae81ff\"\u003e10\u003c/span\u003e];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e status_zero\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e,status_one\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e; i \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e; \u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003ei){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003efgets\u003c/span\u003e(buf,\u003cspan style=\"color:#66d9ef\"\u003esizeof\u003c/span\u003e(buf),stdin);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e j \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e; j \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003estrlen\u003c/span\u003e(buf); \u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003ej)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e(buf[j]\u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;0\u0026#39;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\tstatus_zero\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e(buf[j]\u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;1\u0026#39;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\tstatus_one\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t\u003cspan style=\"color:#66d9ef\"\u003econtinue\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e(status_zero\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#66d9ef\"\u003eswitch\u003c/span\u003e(status_zero){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t\u003cspan style=\"color:#66d9ef\"\u003ecase\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t\u003cspan style=\"color:#a6e22e\"\u003eprintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;A\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t\u003cspan style=\"color:#66d9ef\"\u003ebreak\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t\u003cspan style=\"color:#66d9ef\"\u003ecase\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t\u003cspan style=\"color:#a6e22e\"\u003eprintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;B\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t\u003cspan style=\"color:#66d9ef\"\u003ebreak\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t\u003cspan style=\"color:#66d9ef\"\u003ecase\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t\u003cspan style=\"color:#a6e22e\"\u003eprintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;C\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t\u003cspan style=\"color:#66d9ef\"\u003ebreak\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t\u003cspan style=\"color:#66d9ef\"\u003ecase\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e4\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t\u003cspan style=\"color:#a6e22e\"\u003eprintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;D\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t\u003cspan style=\"color:#66d9ef\"\u003ebreak\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#a6e22e\"\u003eprintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;E\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tstatus_one\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tstatus_zero\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003ca href=\"https://github.com/ehdwn1991/Coding-Interview/tree/master/Code_Interview_Prep_Platform/backjoon/Level_17\" target=\"_blank\" rel=\"noopener\"\u003e모든 내용은 Git Hub에도있습니다.\u003c/a\u003e\u003c/p\u003e","tags":["C","Level 17","Prime Number","Backjoon","Online-Judge"],"title":"Problem.2490"},{"categories":null,"contents":" 백준 단계별 문제집 레벨 3\n모든 내용은 Git Hub에도있습니다.\n##Problem.2675 문자열 반복\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;string.h\u0026gt; void QR_code(); int main(){ int N; char buf[24]={\u0026#39;\\0\u0026#39;,}; //\t문자는 20글자 앞에 반복횟수 N 공백 까지 22에 마지막 엔터 23으로 되야 하는데 안되서 24로 잡음 scanf(\u0026#34;%d\u0026#34;,\u0026amp;N); while(getchar()!=10); for(int i=0;i\u0026lt;N;i++){ fgets(buf,sizeof(buf),stdin); QR_code(buf); puts(\u0026#34;\u0026#34;); memset(buf,\u0026#39;\\0\u0026#39;,strlen(buf)); } } void QR_code(char *q){\tfor(int i=2;i\u0026lt;strlen(q)-1;i++){ for(int j=0;j\u0026lt;(*q)-48;j++){ printf(\u0026#34;%c\u0026#34;,*(q+i)); }\t} } ","date":"May 18, 2018","hero":"/images/rand_images/fotis-fotopoulos.jpg","permalink":"https://codex-devlab.github.io/posts/study/sub-algorithms/online-judge/backjoon/step-prob/prob-2675/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003ca href=\"https://www.acmicpc.net/step/3\" target=\"_blank\" rel=\"noopener\"\u003e백준 단계별 문제집 레벨 3\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"https://github.com/ehdwn1991/Coding-Interview/blob/master/Code_Interview_Prep_Platform/backjoon/Level_7/2675.c\" target=\"_blank\" rel=\"noopener\"\u003e모든 내용은 Git Hub에도있습니다.\u003c/a\u003e\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e##\u003ca href=\"https://www.acmicpc.net/problem/2675\" target=\"_blank\" rel=\"noopener\"\u003eProblem.2675\u003c/a\u003e\n\u003ccode\u003e문자열 반복\u003c/code\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;stdio.h\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;stdlib.h\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;string.h\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eQR_code\u003c/span\u003e();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e(){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e N;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003echar\u003c/span\u003e buf[\u003cspan style=\"color:#ae81ff\"\u003e24\u003c/span\u003e]\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e{\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;\\0\u0026#39;\u003c/span\u003e,};\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e//\t문자는 20글자 앞에 반복횟수 N  공백 까지 22에 마지막 엔터 23으로 되야 하는데 안되서 24로 잡음\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\t\u003cspan style=\"color:#a6e22e\"\u003escanf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;%d\u0026#34;\u003c/span\u003e,\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003eN);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003ewhile\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003egetchar\u003c/span\u003e()\u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e10\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;i\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003eN;i\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003efgets\u003c/span\u003e(buf,\u003cspan style=\"color:#66d9ef\"\u003esizeof\u003c/span\u003e(buf),stdin);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t\u003cspan style=\"color:#a6e22e\"\u003eQR_code\u003c/span\u003e(buf);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t\u003cspan style=\"color:#a6e22e\"\u003eputs\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003ememset\u003c/span\u003e(buf,\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;\\0\u0026#39;\u003c/span\u003e,\u003cspan style=\"color:#a6e22e\"\u003estrlen\u003c/span\u003e(buf));\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eQR_code\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003echar\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003eq){\t\t\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e;i\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003estrlen\u003c/span\u003e(q)\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e;i\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e j\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;j\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e(\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003eq)\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e48\u003c/span\u003e;j\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#a6e22e\"\u003eprintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;%c\u0026#34;\u003c/span\u003e,\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e(q\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003ei));\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t}\t\t\t\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","tags":["C","Backjoon","Online-Judge"],"title":"Problem.2675"},{"categories":null,"contents":" 모든 내용은 Git Hub에도있습니다.\nProblem.2839 2839번[사칙연산 도전하기]\n문제 :상근이는 요즘 설탕공장에서 설탕을 배달하고 있다.\n상근이는 지금 사탕가게에 설탕을 정확하게 N킬로그램을 배달해야 한다. 설탕공장에서 만드는 설탕은 봉지에 담겨져 있다.\n봉지는 3킬로그램 봉지와 5킬로그램 봉지가 있다.\n상근이는 귀찮기 때문에, 최대한 적은 봉지를 들고 가려고 한다.\n예를 들어, 18킬로그램 설탕을 배달해야 할 때, 3킬로그램 봉지 6개를 가져가도 되지만, 5킬로그램 3개와 3킬로그램 1개를 배달하면, 더 적은 개수의 봉지를 배달할 수 있다.\n상근이가 설탕을 정확하게 N킬로그램 배달해야 할 때, 봉지 몇 개를 가져가면 되는지 그 수를 구하는 프로그램을 작성하시오.\n#include \u0026lt;stdio.h\u0026gt; int how_many_pack(); int main(){ int N=0; int result; scanf(\u0026#34;%d\u0026#34;,\u0026amp;N); result=how_many_pack(N); printf(\u0026#34;%d\\n\u0026#34;,result);\t} int how_many_pack(int N){ int Calculate_N; int Three_kg,Five_kg; int num_of_pack; int Sum_of_multiple_Three_Five=0; int i=0; for(int i=0;i\u0026lt;=(N/3);i++){//3kg팩으로 만들수 있는 최대 3kg팩의 갯수 for (int j=0;Sum_of_multiple_Three_Five\u0026lt;=N; ++j) {\tSum_of_multiple_Three_Five=(i*3)+(j*5); if(Sum_of_multiple_Three_Five==N){ return i+j; } } Sum_of_multiple_Three_Five=0; } return -1; } 풀이 : 문제를 푸는데 있어서 중요한 케이스가 있다.\n최소의 팩으로 만들어야 하지만 최소의 팩에 딱 맞아 들어가지 안는 다면 -1을 출력.\nex.4 kg 이면 우리생각엔 5kg에 담으면 되겠지만 5kg이 되기엔 1kg이 모자라므로 -1 리턴.\n18kg같은 경우 3kg 6팩 아니면 3kg 1팩 5kg 3팩 이 된다. 이런 경우 6팩 이 아닌4팩으로 이루어 져야한다는점.\n위의 상황들을 숙지하면서 이중 반복문을 실행하는 N kg을만드는 조합을 찾으면 된다.\n","date":"May 18, 2018","hero":"/images/rand_images/vackground-com.jpg","permalink":"https://codex-devlab.github.io/posts/study/sub-algorithms/online-judge/backjoon/step-prob/prob-2839/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/ehdwn1991/Coding-Interview/blob/master/Code_Interview_Prep_Platform/backjoon/Level_6/2839.c\" target=\"_blank\" rel=\"noopener\"\u003e모든 내용은 Git Hub에도있습니다.\u003c/a\u003e\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"problem2839\"\u003e\u003ca href=\"https://www.acmicpc.net/problem/2839\" target=\"_blank\" rel=\"noopener\"\u003eProblem.2839\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003e2839번[사칙연산 도전하기]\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e문제 :상근이는 요즘 설탕공장에서 설탕을 배달하고 있다.\u003cbr\u003e\n상근이는 지금 사탕가게에 설탕을 정확하게 N킬로그램을 배달해야 한다. 설탕공장에서 만드는 설탕은 봉지에 담겨져 있다.\u003cbr\u003e\n봉지는 3킬로그램 봉지와 5킬로그램 봉지가 있다.\u003cbr\u003e\n상근이는 귀찮기 때문에, 최대한 적은 봉지를 들고 가려고 한다.\u003cbr\u003e\n예를 들어, 18킬로그램 설탕을 배달해야 할 때, 3킬로그램 봉지 6개를 가져가도 되지만, 5킬로그램 3개와 3킬로그램 1개를 배달하면, 더 적은 개수의 봉지를 배달할 수 있다.\u003cbr\u003e\n상근이가 설탕을 정확하게 N킬로그램 배달해야 할 때, 봉지 몇 개를 가져가면 되는지 그 수를 구하는 프로그램을 작성하시오.\u003c/p\u003e","tags":["C","Backjoon","Online-Judge"],"title":"Problem.2839"},{"categories":null,"contents":" 백준 단계별 문제집 문자열\n모든 내용은 Git Hub에도있습니다.\n##Problem.2908 상수\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;string.h\u0026gt; int main(){ char buf[8]={0,}; int start_num=2; fgets(buf,sizeof(buf),stdin); for(int i=3;0\u0026lt;i;i--){ if(buf[i-1]\u0026gt;buf[i+3]\u0026amp;\u0026amp;(buf[i-1]!=buf[i+3])){ //각 숫자의 가장 뒷부분을 비교 여기서 큰쪽이 큰수가 된다. //같은 수인걸 조건으로 배제해야 한다. start_num=2; break; } else{ if(buf[i-1]\u0026lt;buf[i+3]\u0026amp;\u0026amp;(buf[i-1]!=buf[i+3])){ start_num=6; break; } }\t} //만약 두수가 111 111이라면 같은 수이므로 위의 반복문을 돌고 나서 //start_num에는 아무 변화가 없을것이다. 그래서 초기값으로 2를 넣어줌 for(int j=0;j\u0026lt;3;j++){ printf(\u0026#34;%c\u0026#34;,buf[start_num-j]); //두 수를 비교해서 큰숫자가 판명 나면 그 숫자의 시작 번호를 받아와 거꾸로 출력 } puts(\u0026#34;\u0026#34;); } ","date":"May 18, 2018","hero":"/images/rand_images/fotis-fotopoulos.jpg","permalink":"https://codex-devlab.github.io/posts/study/sub-algorithms/online-judge/backjoon/step-prob/prob-2908/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003ca href=\"https://www.acmicpc.net/step/7\" target=\"_blank\" rel=\"noopener\"\u003e백준 단계별 문제집 문자열\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"https://github.com/ehdwn1991/Coding-Interview/blob/master/Code_Interview_Prep_Platform/backjoon/Level_7/2908.c\" target=\"_blank\" rel=\"noopener\"\u003e모든 내용은 Git Hub에도있습니다.\u003c/a\u003e\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e##\u003ca href=\"https://www.acmicpc.net/problem/2908\" target=\"_blank\" rel=\"noopener\"\u003eProblem.2908\u003c/a\u003e\n\u003ccode\u003e상수\u003c/code\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;stdio.h\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;stdlib.h\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;string.h\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e(){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003echar\u003c/span\u003e buf[\u003cspan style=\"color:#ae81ff\"\u003e8\u003c/span\u003e]\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e{\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e,};\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e start_num\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003efgets\u003c/span\u003e(buf,\u003cspan style=\"color:#66d9ef\"\u003esizeof\u003c/span\u003e(buf),stdin);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e;\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003ei;i\u003cspan style=\"color:#f92672\"\u003e--\u003c/span\u003e){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e(buf[i\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e]\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003ebuf[i\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e]\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e(buf[i\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e]\u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003ebuf[i\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e])){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#75715e\"\u003e//각 숫자의 가장 뒷부분을 비교 여기서 큰쪽이 큰수가 된다.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\t\t\u003cspan style=\"color:#75715e\"\u003e//같은 수인걸 조건으로 배제해야 한다.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\t\t\tstart_num\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#66d9ef\"\u003ebreak\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e(buf[i\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e]\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003ebuf[i\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e]\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e(buf[i\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e]\u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003ebuf[i\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e])){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\tstart_num\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e6\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#66d9ef\"\u003ebreak\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t}\t\t\t\t\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e//만약 두수가 111 111이라면 같은 수이므로 위의 반복문을 돌고 나서\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\t\u003cspan style=\"color:#75715e\"\u003e//start_num에는 아무 변화가 없을것이다. 그래서 초기값으로 2를 넣어줌\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\t\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e j\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;j\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e;j\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eprintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;%c\u0026#34;\u003c/span\u003e,buf[start_num\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003ej]);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e//두 수를 비교해서 큰숫자가 판명 나면 그 숫자의 시작 번호를 받아와 거꾸로 출력\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eputs\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","tags":["C","Backjoon","Online-Judge"],"title":"Problem.2908"},{"categories":null,"contents":" 모든 내용은 Git Hub에도있습니다.\nProblem.2920 2920번[음계]\n#include \u0026lt;stdio.h\u0026gt; int main(){ int temp[8]={0,}; int state[8]={0,}; int now_state; // 0=ascending 1=descending 2=mix for(int i=0;i\u0026lt;8;i++){ scanf(\u0026#34;%d\u0026#34;,\u0026amp;temp[i]); } now_state=temp[1]-temp[0]; for(int j=0;j\u0026lt;7;j++){ if(now_state==1\u0026amp;\u0026amp;now_state==(temp[j+1]-temp[j])) //오름차순 continue; else if(now_state\u0026lt;0\u0026amp;\u0026amp;now_state==(temp[j+1]-temp[j])) //내림차순 continue; else{ now_state=2; //등차 수열을 이루지 못해서 Mix의 상태임. break; } }\tif(now_state==1) printf(\u0026#34;ascending\\n\u0026#34;); else if(now_state\u0026lt;0) printf(\u0026#34;descending\\n\u0026#34;); else printf(\u0026#34;mixed\\n\u0026#34;); } 시작이 1 혹은 8 둘중하나로 시작 하면 오름차순 이거나 내림차순 일것이다. 즉 하나의 수열로 봤을때 등차 수열이 되야한다는것. 등차 수열을 이루지 못하다면 Mix 인것이다.\n","date":"May 18, 2018","hero":"/images/rand_images/christian-wiediger.jpg","permalink":"https://codex-devlab.github.io/posts/study/sub-algorithms/online-judge/backjoon/step-prob/prob-2920/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/ehdwn1991/Coding-Interview/blob/master/Code_Interview_Prep_Platform/backjoon/Level_6/2920.c\" target=\"_blank\" rel=\"noopener\"\u003e모든 내용은 Git Hub에도있습니다.\u003c/a\u003e\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"problem2920\"\u003e\u003ca href=\"https://www.acmicpc.net/problem/2920\" target=\"_blank\" rel=\"noopener\"\u003eProblem.2920\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003e2920번[음계]\u003c/code\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;stdio.h\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e(){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e temp[\u003cspan style=\"color:#ae81ff\"\u003e8\u003c/span\u003e]\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e{\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e,};\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e state[\u003cspan style=\"color:#ae81ff\"\u003e8\u003c/span\u003e]\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e{\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e,};\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e now_state;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e// 0=ascending 1=descending 2=mix\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\t\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;i\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e8\u003c/span\u003e;i\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003escanf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;%d\u0026#34;\u003c/span\u003e,\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003etemp[i]);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tnow_state\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003etemp[\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e]\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003etemp[\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e j\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;j\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e7\u003c/span\u003e;j\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e(now_state\u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003enow_state\u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e(temp[j\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e]\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003etemp[j]))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#75715e\"\u003e//오름차순\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\t\t\t\u003cspan style=\"color:#66d9ef\"\u003econtinue\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e(now_state\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003enow_state\u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e(temp[j\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e]\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003etemp[j]))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#75715e\"\u003e//내림차순\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\t\t\t\u003cspan style=\"color:#66d9ef\"\u003econtinue\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\tnow_state\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#75715e\"\u003e//등차 수열을 이루지 못해서 Mix의 상태임.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003ebreak\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\t\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e(now_state\u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003eprintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;ascending\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e(now_state\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003eprintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;descending\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003eprintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;mixed\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cblockquote\u003e\n\u003cp\u003e시작이 1 혹은 8 둘중하나로 시작 하면 오름차순 이거나 내림차순 일것이다.\n즉 하나의 수열로 봤을때 등차 수열이 되야한다는것.\n등차 수열을 이루지 못하다면 Mix 인것이다.\u003c/p\u003e","tags":["C","Backjoon","Online-Judge"],"title":"Problem.2920"},{"categories":null,"contents":" 백준 단계별 문제집 심화1\n모든 내용은 Git Hub에도있습니다.\n##Problem.2941 크로아티아 알파벳\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;string.h\u0026gt; int main(){ char buf[101]={\u0026#39;\\0\u0026#39;,}; int croatia=0; scanf(\u0026#34;%s\u0026#34;,buf); for(int i=0;i\u0026lt;strlen(buf);i++){ if(buf[i]==\u0026#39;c\u0026#39;\u0026amp;\u0026amp;(buf[i+1]==\u0026#39;=\u0026#39;||buf[i+1]==\u0026#39;-\u0026#39;)){ croatia++; i+=1; } else if(buf[i]==\u0026#39;d\u0026#39;){ if(buf[i+1]==\u0026#39;z\u0026#39;\u0026amp;\u0026amp;buf[i+2]==\u0026#39;=\u0026#39;){ croatia++; i+=2; } else if(buf[i+1]==\u0026#39;-\u0026#39;){ croatia++; i+=1; } else{ croatia++; } } else if(buf[i]==\u0026#39;l\u0026#39;\u0026amp;\u0026amp;buf[i+1]==\u0026#39;j\u0026#39;){ croatia++; i+=1; }\telse if(buf[i]==\u0026#39;n\u0026#39;\u0026amp;\u0026amp;buf[i+1]==\u0026#39;j\u0026#39;){ croatia++; i+=1; }\telse if(buf[i]==\u0026#39;s\u0026#39;\u0026amp;\u0026amp;buf[i+1]==61){ croatia++; i+=1; } else if(buf[i]==\u0026#39;z\u0026#39;\u0026amp;\u0026amp;buf[i+1]==\u0026#39;=\u0026#39;){ croatia++; i+=1; } else{ croatia++; } } printf(\u0026#34;%d\\n\u0026#34;,croatia); } 이것도 조건에 맞춘 노가다 인듯 싶다.\n","date":"May 18, 2018","hero":"/images/rand_images/michael-dziedzic.jpg","permalink":"https://codex-devlab.github.io/posts/study/sub-algorithms/online-judge/backjoon/step-prob/prob-2941/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003ca href=\"https://www.acmicpc.net/step/52\" target=\"_blank\" rel=\"noopener\"\u003e백준 단계별 문제집 심화1\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"https://github.com/ehdwn1991/Coding-Interview/blob/master/Code_Interview_Prep_Platform/backjoon/Level_7/2941.c\" target=\"_blank\" rel=\"noopener\"\u003e모든 내용은 Git Hub에도있습니다.\u003c/a\u003e\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e##\u003ca href=\"https://www.acmicpc.net/problem/2941\" target=\"_blank\" rel=\"noopener\"\u003eProblem.2941\u003c/a\u003e\n\u003ccode\u003e크로아티아 알파벳\u003c/code\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;stdio.h\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;string.h\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e(){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003echar\u003c/span\u003e buf[\u003cspan style=\"color:#ae81ff\"\u003e101\u003c/span\u003e]\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e{\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;\\0\u0026#39;\u003c/span\u003e,};\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e croatia\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003escanf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;%s\u0026#34;\u003c/span\u003e,buf);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;i\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003estrlen\u003c/span\u003e(buf);i\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e(buf[i]\u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;c\u0026#39;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e(buf[i\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e]\u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;=\u0026#39;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e||\u003c/span\u003ebuf[i\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e]\u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;-\u0026#39;\u003c/span\u003e)){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\tcroatia\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\ti\u003cspan style=\"color:#f92672\"\u003e+=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e(buf[i]\u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;d\u0026#39;\u003c/span\u003e){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e(buf[i\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e]\u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;z\u0026#39;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003ebuf[i\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e]\u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;=\u0026#39;\u003c/span\u003e){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\tcroatia\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\ti\u003cspan style=\"color:#f92672\"\u003e+=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e(buf[i\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e]\u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;-\u0026#39;\u003c/span\u003e){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\tcroatia\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\ti\u003cspan style=\"color:#f92672\"\u003e+=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\tcroatia\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e(buf[i]\u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;l\u0026#39;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003ebuf[i\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e]\u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;j\u0026#39;\u003c/span\u003e){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\tcroatia\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\ti\u003cspan style=\"color:#f92672\"\u003e+=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t}\t\t\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e(buf[i]\u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;n\u0026#39;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003ebuf[i\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e]\u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;j\u0026#39;\u003c/span\u003e){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\tcroatia\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\ti\u003cspan style=\"color:#f92672\"\u003e+=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t}\t\t\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e(buf[i]\u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;s\u0026#39;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003ebuf[i\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e]\u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e61\u003c/span\u003e){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\tcroatia\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\ti\u003cspan style=\"color:#f92672\"\u003e+=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e(buf[i]\u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;z\u0026#39;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003ebuf[i\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e]\u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;=\u0026#39;\u003c/span\u003e){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\tcroatia\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\ti\u003cspan style=\"color:#f92672\"\u003e+=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\tcroatia\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003eprintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;%d\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e,croatia);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cblockquote\u003e\n\u003cp\u003e이것도 조건에 맞춘 노가다 인듯 싶다.\u003c/p\u003e","tags":["C","Backjoon","Online-Judge"],"title":"Problem.2941"},{"categories":null,"contents":"모든 내용은 Git Hub에도 있습니다.\nProblem.4673 4673번 문제(성공)\n셀프넘버\nWiki 참고\n#include \u0026lt;stdio.h\u0026gt; int generate(int n_times); int main() { int check_generator[10000] = { 0, }; int generate_state=0; for (int i = 1; i \u0026lt;= 10000; i++) { generate_state = generate(i); if (check_generator[generate_state-1] == 0) { check_generator[generate_state-1] = 1; } else { continue; } } for (int q = 1; q\u0026lt;=10000; q++) { if (check_generator[q-1] == 0) { printf(\u0026#34;%d\\n\u0026#34;, (q)); } } } int generate(int n_times) { int now_decimal = n_times, sum_of_generator=0; int digits = n_times, run = 1; while (digits \u0026gt;= 1) { digits /= 10; run*=10; } while (run\u0026gt;=1) { sum_of_generator += now_decimal / run; now_decimal -= (now_decimal / run)*run; run /= 10; } return sum_of_generator += n_times; } ","date":"May 18, 2018","hero":"/images/rand_images/karl-pawlowicz.jpg","permalink":"https://codex-devlab.github.io/posts/study/sub-algorithms/online-judge/backjoon/step-prob/prob-4673/","summary":"\u003cp\u003e\u003ca href=\"https://github.com/ehdwn1991/Coding-Interview/blob/master/Code_Interview_Prep_Platform/backjoon/Level_5/4673.c\" target=\"_blank\" rel=\"noopener\"\u003e모든 내용은 Git Hub에도 있습니다.\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id=\"problem4673\"\u003e\u003ca href=\"https://www.acmicpc.net/problem/4673\" target=\"_blank\" rel=\"noopener\"\u003eProblem.4673\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003e4673번 문제(성공)\u003c/code\u003e\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e셀프넘버\u003cbr\u003e\n\u003ca href=\"https://en.wikipedia.org/wiki/Self_number\" target=\"_blank\" rel=\"noopener\"\u003eWiki 참고\u003c/a\u003e\u003c/p\u003e\u003c/blockquote\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;stdio.h\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003egenerate\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e n_times);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e check_generator[\u003cspan style=\"color:#ae81ff\"\u003e10000\u003c/span\u003e] \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e { \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e, };\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e generate_state\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e; i \u003cspan style=\"color:#f92672\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e10000\u003c/span\u003e; i\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\tgenerate_state \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003egenerate\u003c/span\u003e(i);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (check_generator[generate_state\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e] \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\tcheck_generator[generate_state\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e] \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e { \u003cspan style=\"color:#66d9ef\"\u003econtinue\u003c/span\u003e; }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e q \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e; q\u003cspan style=\"color:#f92672\"\u003e\u0026lt;=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e10000\u003c/span\u003e; q\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (check_generator[q\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e] \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#a6e22e\"\u003eprintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;%d\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e, (q));\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003egenerate\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e n_times) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e now_decimal \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e n_times, sum_of_generator\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e digits \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e n_times, run \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003ewhile\u003c/span\u003e (digits \u003cspan style=\"color:#f92672\"\u003e\u0026gt;=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\tdigits \u003cspan style=\"color:#f92672\"\u003e/=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e10\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\trun\u003cspan style=\"color:#f92672\"\u003e*=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e10\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003ewhile\u003c/span\u003e (run\u003cspan style=\"color:#f92672\"\u003e\u0026gt;=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\tsum_of_generator \u003cspan style=\"color:#f92672\"\u003e+=\u003c/span\u003e now_decimal \u003cspan style=\"color:#f92672\"\u003e/\u003c/span\u003e run;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\tnow_decimal \u003cspan style=\"color:#f92672\"\u003e-=\u003c/span\u003e (now_decimal \u003cspan style=\"color:#f92672\"\u003e/\u003c/span\u003e run)\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003erun;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\trun \u003cspan style=\"color:#f92672\"\u003e/=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e10\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e sum_of_generator \u003cspan style=\"color:#f92672\"\u003e+=\u003c/span\u003e n_times;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","tags":["C","Backjoon","Online-Judge"],"title":"Problem.4673"},{"categories":null,"contents":" 백준 단계별 문제집 문자열\n모든 내용은 Git Hub에도있습니다.\n##Problem.5622 다이얼\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;string.h\u0026gt; int main(){ char buf[16]={\u0026#39;\\0\u0026#39;,}; int result=0; scanf(\u0026#34;%s\u0026#34;,buf); for(int i=0;i\u0026lt;strlen(buf);i++){ if(buf[i]\u0026gt;=65\u0026amp;\u0026amp;buf[i]\u0026lt;=67) result+=3;\telse if(buf[i]\u0026gt;=68\u0026amp;\u0026amp;buf[i]\u0026lt;=70) result+=4; else if(buf[i]\u0026gt;=71\u0026amp;\u0026amp;buf[i]\u0026lt;=73) result+=5; else if(buf[i]\u0026gt;=74\u0026amp;\u0026amp;buf[i]\u0026lt;=76) result+=6; else if(buf[i]\u0026gt;=77\u0026amp;\u0026amp;buf[i]\u0026lt;=79) result+=7; else if(buf[i]\u0026gt;=80\u0026amp;\u0026amp;buf[i]\u0026lt;=83) result+=8; else if(buf[i]\u0026gt;=84\u0026amp;\u0026amp;buf[i]\u0026lt;=86) result+=9; else\tresult+=10; } printf(\u0026#34;%d\\n\u0026#34;,result); } 그냥 조건에 맞춘 노가다 인듯 싶다\u0026hellip;중요한건 다이얼에서 1과 0은 입력이 없다고 보면 된다. 2~9까지의 수만 쓰인다 생각하고 풀면됨\n","date":"May 18, 2018","hero":"/images/rand_images/kevin-bhagat.jpg","permalink":"https://codex-devlab.github.io/posts/study/sub-algorithms/online-judge/backjoon/step-prob/prob-5622/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003ca href=\"https://www.acmicpc.net/step/7\" target=\"_blank\" rel=\"noopener\"\u003e백준 단계별 문제집 문자열\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"https://github.com/ehdwn1991/Coding-Interview/blob/master/Code_Interview_Prep_Platform/backjoon/Level_7/5622.c\" target=\"_blank\" rel=\"noopener\"\u003e모든 내용은 Git Hub에도있습니다.\u003c/a\u003e\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e##\u003ca href=\"https://www.acmicpc.net/problem/5622\" target=\"_blank\" rel=\"noopener\"\u003eProblem.5622\u003c/a\u003e\n\u003ccode\u003e다이얼\u003c/code\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;stdio.h\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;string.h\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e(){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003echar\u003c/span\u003e buf[\u003cspan style=\"color:#ae81ff\"\u003e16\u003c/span\u003e]\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e{\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;\\0\u0026#39;\u003c/span\u003e,};\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e result\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003escanf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;%s\u0026#34;\u003c/span\u003e,buf);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;i\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003estrlen\u003c/span\u003e(buf);i\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e(buf[i]\u003cspan style=\"color:#f92672\"\u003e\u0026gt;=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e65\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003ebuf[i]\u003cspan style=\"color:#f92672\"\u003e\u0026lt;=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e67\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\tresult\u003cspan style=\"color:#f92672\"\u003e+=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e;\t\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e(buf[i]\u003cspan style=\"color:#f92672\"\u003e\u0026gt;=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e68\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003ebuf[i]\u003cspan style=\"color:#f92672\"\u003e\u0026lt;=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e70\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\tresult\u003cspan style=\"color:#f92672\"\u003e+=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e4\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e(buf[i]\u003cspan style=\"color:#f92672\"\u003e\u0026gt;=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e71\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003ebuf[i]\u003cspan style=\"color:#f92672\"\u003e\u0026lt;=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e73\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\tresult\u003cspan style=\"color:#f92672\"\u003e+=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e(buf[i]\u003cspan style=\"color:#f92672\"\u003e\u0026gt;=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e74\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003ebuf[i]\u003cspan style=\"color:#f92672\"\u003e\u0026lt;=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e76\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\tresult\u003cspan style=\"color:#f92672\"\u003e+=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e6\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e(buf[i]\u003cspan style=\"color:#f92672\"\u003e\u0026gt;=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e77\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003ebuf[i]\u003cspan style=\"color:#f92672\"\u003e\u0026lt;=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e79\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\tresult\u003cspan style=\"color:#f92672\"\u003e+=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e7\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e(buf[i]\u003cspan style=\"color:#f92672\"\u003e\u0026gt;=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e80\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003ebuf[i]\u003cspan style=\"color:#f92672\"\u003e\u0026lt;=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e83\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\tresult\u003cspan style=\"color:#f92672\"\u003e+=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e8\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e(buf[i]\u003cspan style=\"color:#f92672\"\u003e\u0026gt;=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e84\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003ebuf[i]\u003cspan style=\"color:#f92672\"\u003e\u0026lt;=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e86\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\tresult\u003cspan style=\"color:#f92672\"\u003e+=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e9\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e\t\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\tresult\u003cspan style=\"color:#f92672\"\u003e+=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e10\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eprintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;%d\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e,result);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cblockquote\u003e\n\u003cp\u003e그냥 조건에 맞춘 노가다 인듯 싶다\u0026hellip;중요한건 다이얼에서 1과 0은 입력이 없다고 보면 된다.\n2~9까지의 수만 쓰인다 생각하고 풀면됨\u003c/p\u003e\u003c/blockquote\u003e","tags":["C","Backjoon","Online-Judge"],"title":"Problem.5622"},{"categories":null,"contents":" 모든 내용은 Git Hub에도있습니다.\nProblem.8393 8393번[합] 문제 : n이 주어졌을 때, 1부터 n까지 합을 구하는 프로그램을 작성하시오.\n#include \u0026lt;stdio.h\u0026gt; int main(){ int N,sum=0; scanf(\u0026#34;%d\u0026#34;,\u0026amp;N); for(int i=1;i\u0026lt;=N;i++) sum+=i; printf(\u0026#34;%d\\n\u0026#34;,sum); } ","date":"May 18, 2018","hero":"/images/rand_images/sigmund.jpg","permalink":"https://codex-devlab.github.io/posts/study/sub-algorithms/online-judge/backjoon/step-prob/prob-8393/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/ehdwn1991/Coding-Interview/blob/master/Code_Interview_Prep_Platform/backjoon/Level_3/8393.c\" target=\"_blank\" rel=\"noopener\"\u003e모든 내용은 Git Hub에도있습니다.\u003c/a\u003e\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"problem8393\"\u003e\u003ca href=\"https://www.acmicpc.net/problem/8393\" target=\"_blank\" rel=\"noopener\"\u003eProblem.8393\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003e8393번[합]\u003c/code\u003e\n문제  : n이 주어졌을 때, 1부터 n까지 합을 구하는 프로그램을 작성하시오.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;stdio.h\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e(){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e N,sum\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003escanf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;%d\u0026#34;\u003c/span\u003e,\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003eN);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e;i\u003cspan style=\"color:#f92672\"\u003e\u0026lt;=\u003c/span\u003eN;i\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            sum\u003cspan style=\"color:#f92672\"\u003e+=\u003c/span\u003ei;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eprintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;%d\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e,sum);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","tags":["C","Backjoon","Online-Judge"],"title":"Problem.8393"},{"categories":null,"contents":" 모든 내용은 Git Hub에도있습니다.\nProblem.8958 8958번[OX퀴즈]\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;string.h\u0026gt; int main(){ int now_point=0,total_point=0; int count=0; char buf[81]={\u0026#39;\\0\u0026#39;,}; scanf(\u0026#34;%d\u0026#34;,\u0026amp;count); while(getchar()!=10); // 입력 버퍼를 비워 주지 않으면 테스트 횟수 입력후 첫번째 케이스 문자가 입력이 안됨 // 왜냐면 처음 반복 횟수 입력후 버퍼의 상태는 N\\n 이렇게 들어있음 즉 숫자와 엔터가 // 들어있는 상태임 그래서 그다음에 fgets 를 쓰려고 하면 입력이 끝나 버리는것 //그래서 두가지 방법중 하나를 써줘야됨 //1.scanf(\u0026#34;%d \u0026#34;) =\u0026gt; 공백을 하나 추가하여 //2.while(getchar()!=10) \\n 이 나올때까지 입력 버퍼를 비워줌 for(int i=0;i\u0026lt;count;i++){ fgets(buf,sizeof(buf),stdin); for(int j=0;j\u0026lt;strlen(buf);j++){ if(buf[j]==\u0026#39;O\u0026#39;){ ++now_point; total_point+=now_point; } if(buf[j]==\u0026#39;X\u0026#39;){ now_point=0; }\t} printf(\u0026#34;%d\\n\u0026#34;,total_point); total_point=0; now_point=0; memset(buf,\u0026#39;\\0\u0026#39;,strlen(buf)); } } 알고리즘은 간단하다. 근데 입출력에 문제가 생겼음. scanf로 입력 받았을때는 버퍼의 마지막에 \u0026lsquo;\\n\u0026rsquo; 이 있는 상태이고 그다음에 바로 getchar를 쓴다면 버퍼 마지막의 \u0026lsquo;\\n\u0026rsquo;을 가져 오게 된다 그래서 첫번째 케이스의 첫 글자가 입력이 안되서, scanf로 입력 받고 버퍼를 비워줘야함.\n","date":"May 18, 2018","hero":"/images/rand_images/sigmund.jpg","permalink":"https://codex-devlab.github.io/posts/study/sub-algorithms/online-judge/backjoon/step-prob/prob-8958/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/ehdwn1991/Coding-Interview/blob/master/Code_Interview_Prep_Platform/backjoon/Level_6/8958.c\" target=\"_blank\" rel=\"noopener\"\u003e모든 내용은 Git Hub에도있습니다.\u003c/a\u003e\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"problem8958\"\u003e\u003ca href=\"https://www.acmicpc.net/problem/8958\" target=\"_blank\" rel=\"noopener\"\u003eProblem.8958\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003e8958번[OX퀴즈]\u003c/code\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;stdio.h\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;stdlib.h\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;string.h\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e(){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e now_point\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e,total_point\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e count\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003echar\u003c/span\u003e buf[\u003cspan style=\"color:#ae81ff\"\u003e81\u003c/span\u003e]\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e{\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;\\0\u0026#39;\u003c/span\u003e,};\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003escanf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;%d\u0026#34;\u003c/span\u003e,\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003ecount);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003ewhile\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003egetchar\u003c/span\u003e()\u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e10\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// 입력 버퍼를 비워 주지 않으면 테스트 횟수 입력후 첫번째 케이스 문자가 입력이 안됨\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// 왜냐면 처음 반복 횟수 입력후 버퍼의 상태는 N\\n 이렇게 들어있음 즉 숫자와 엔터가\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// 들어있는 상태임 그래서 그다음에 fgets 를 쓰려고 하면 입력이 끝나 버리는것\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e//그래서 두가지 방법중 하나를 써줘야됨\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e//1.scanf(\u0026#34;%d \u0026#34;) =\u0026gt; 공백을 하나 추가하여 \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e//2.while(getchar()!=10) \\n 이 나올때까지 입력 버퍼를 비워줌\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\t\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;i\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003ecount;i\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003efgets\u003c/span\u003e(buf,\u003cspan style=\"color:#66d9ef\"\u003esizeof\u003c/span\u003e(buf),stdin);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e j\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;j\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003estrlen\u003c/span\u003e(buf);j\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e(buf[j]\u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;O\u0026#39;\u003c/span\u003e){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003enow_point;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\ttotal_point\u003cspan style=\"color:#f92672\"\u003e+=\u003c/span\u003enow_point;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e(buf[j]\u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;X\u0026#39;\u003c/span\u003e){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tnow_point\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\t\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eprintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;%d\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e,total_point);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\ttotal_point\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tnow_point\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003ememset\u003c/span\u003e(buf,\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;\\0\u0026#39;\u003c/span\u003e,\u003cspan style=\"color:#a6e22e\"\u003estrlen\u003c/span\u003e(buf));\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cblockquote\u003e\n\u003cp\u003e알고리즘은 간단하다. 근데 입출력에 문제가 생겼음.\nscanf로 입력 받았을때는 버퍼의 마지막에 \u0026lsquo;\\n\u0026rsquo; 이 있는 상태이고\n그다음에 바로 getchar를 쓴다면 버퍼 마지막의 \u0026lsquo;\\n\u0026rsquo;을 가져 오게 된다\n그래서 첫번째 케이스의 첫 글자가 입력이 안되서,\nscanf로 입력 받고 버퍼를 비워줘야함.\u003c/p\u003e","tags":["C","Backjoon","Online-Judge"],"title":"Problem.8958"},{"categories":null,"contents":" 모든 내용은 Git Hub에도있습니다.\n9461번 파도반 수열은 간단하다.\n처음 배열 1 1 1 1 2 2 를 시작으로\nPD[n]=PD[n-1]+PD[n-5]의 식이 성립되지만 처음에 이렇게 접근하지 않았다.\n파도반은 정삼각형과 역삼각형으로 이루어져있음\n0 1 2 정삼각 1 1 2 역삼각 1 2 3 위의 표를 잘 보자 문제에서 처음 시작은 정삼각형 1부터 시작 그다음은 역삼각 1이다.\n그럼 다음 차례 정삼각[1]의 값을 찾아야 하는데 이건 정삼각[1]=정삼각[0]+역삼각[-1]이다. \u0026ndash;\u0026gt; 대각의 합\n그래서 정삼각[1]은 =1이 된다.\n다음은 역삼각 [1]이다. 역삼각[1]=정삼각[0]+역삼각[0]으로 구할수 있다. \u0026ndash;\u0026gt; 수직의 합\n즉 배열 두개와 각 배열의 값을 구해주는 함수 두개가 필요하다.\n정삼각은 Up_triangle, 역삼각은 Down_triangle로 만들자.\n그리고 수열의 특성상 int의 범위를 넘겨 버린다. 그래서 각 배열과 함수의 자료형은 long long으로 해준다.\n#include \u0026lt;stdio.h\u0026gt; long long vertical_plus(); long long diagonal_plus(); int main(){ int N,count=0,test_case; int iterate_N; long long up_triangle[50]={0,}; long long down_triangle[50]={0,}; scanf(\u0026#34;%d\u0026#34;,\u0026amp;test_case); for(int i=0;i\u0026lt;test_case;i++){ scanf(\u0026#34;%d\u0026#34;,\u0026amp;N); iterate_N=N; up_triangle[0]=down_triangle[0]=1; printf(\u0026#34;\\ncount: %d\\n\u0026#34;,count); while(2\u0026lt;iterate_N){ up_triangle[count+1]=diagonal_plus(up_triangle,down_triangle,count); iterate_N--; down_triangle[count+1]=vertical_plus(up_triangle,down_triangle,count); iterate_N--; count++; } count=0; if(N%2!=0) printf(\u0026#34;%lld\\n\u0026#34;,up_triangle[(N/2)]); else printf(\u0026#34;%lld\\n\u0026#34;,down_triangle[(N/2)-1]); } } long long vertical_plus(long long *up,long long *down,int count){ return *(up+count)+*(down+count); } long long diagonal_plus(long long *up,long long *down,int count){ if(count==0) return *(up+count); // [-1]의 주소를 참조하는것을 방지 return *(up+count)+*(down+count-1); } ","date":"May 18, 2018","hero":"/images/rand_images/fotis-fotopoulos.jpg","permalink":"https://codex-devlab.github.io/posts/study/sub-algorithms/online-judge/backjoon/step-prob/prob-9461/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/ehdwn1991/Coding-Interview/blob/master/Code_Interview_Prep_Platform/backjoon/Dynamic/9461.c\" target=\"_blank\" rel=\"noopener\"\u003e모든 내용은 Git Hub에도있습니다.\u003c/a\u003e\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"9461번\"\u003e\u003ca href=\"https://www.acmicpc.net/problem/9461\" target=\"_blank\" rel=\"noopener\"\u003e9461번\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e파도반 수열은 간단하다.\u003cbr\u003e\n처음 배열 1 1 1 1 2 2 를 시작으로\u003cbr\u003e\nPD[n]=PD[n-1]+PD[n-5]의 식이 성립되지만 처음에 이렇게 접근하지 않았다.\u003cbr\u003e\n파도반은 정삼각형과 역삼각형으로 이루어져있음\u003c/p\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth style=\"text-align: center\"\u003e\u003c/th\u003e\n          \u003cth style=\"text-align: center\"\u003e0\u003c/th\u003e\n          \u003cth style=\"text-align: center\"\u003e1\u003c/th\u003e\n          \u003cth style=\"text-align: center\"\u003e2\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: center\"\u003e정삼각\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e1\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e1\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e2\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: center\"\u003e역삼각\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e1\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e2\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e3\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003e위의 표를 잘 보자 문제에서 처음 시작은 정삼각형 1부터 시작 그다음은 역삼각 1이다.\u003cbr\u003e\n그럼 다음 차례 정삼각[1]의 값을 찾아야 하는데 이건 정삼각[1]=정삼각[0]+역삼각[-1]이다. \u0026ndash;\u0026gt; \u003ccode\u003e대각의 합\u003c/code\u003e\u003cbr\u003e\n그래서 정삼각[1]은 =1이 된다.\u003cbr\u003e\n다음은 역삼각 [1]이다. 역삼각[1]=정삼각[0]+역삼각[0]으로 구할수 있다. \u0026ndash;\u0026gt; \u003ccode\u003e수직의 합\u003c/code\u003e\u003cbr\u003e\n즉 배열 두개와 각 배열의 값을 구해주는 함수 두개가 필요하다.\u003cbr\u003e\n정삼각은  Up_triangle, 역삼각은 Down_triangle로 만들자.\u003cbr\u003e\n그리고 수열의 특성상 int의 범위를 넘겨 버린다.  그래서 각 배열과 함수의 자료형은 long long으로 해준다.\u003c/p\u003e","tags":["C","Backjoon","Online-Judge"],"title":"Problem.9461"}]