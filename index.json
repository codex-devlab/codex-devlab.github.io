[{"categories":null,"contents":"https://github.com/hugo-toha/hugo-toha.github.io\nhttps://toha-guides.netlify.app/\nhttps://github.com/hugo-toha/guides\nCreating Sub Category https://toha-guides.netlify.app/posts/writing-posts/organizing/sub-category/example/\n","date":"January 1, 2025","hero":"/images/default-hero.jpg","permalink":"https://codex-devlab.github.io/posts/blog-migration/sub-hugo/","summary":"\u003cp\u003e\u003ca href=\"https://github.com/hugo-toha/hugo-toha.github.io\" target=\"_blank\" rel=\"noopener\"\u003ehttps://github.com/hugo-toha/hugo-toha.github.io\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://toha-guides.netlify.app/\" target=\"_blank\" rel=\"noopener\"\u003ehttps://toha-guides.netlify.app/\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/hugo-toha/guides\" target=\"_blank\" rel=\"noopener\"\u003ehttps://github.com/hugo-toha/guides\u003c/a\u003e\u003c/p\u003e\n\u003ch3 id=\"creating-sub-category\"\u003eCreating Sub Category\u003c/h3\u003e\n\u003cp\u003e\u003ca href=\"https://toha-guides.netlify.app/posts/writing-posts/organizing/sub-category/example/\" target=\"_blank\" rel=\"noopener\"\u003ehttps://toha-guides.netlify.app/posts/writing-posts/organizing/sub-category/example/\u003c/a\u003e\u003c/p\u003e","tags":["Hugo","Hugo-Toha Theme","Manual"],"title":"Hugo"},{"categories":null,"contents":"Scanf 에서 공백과 \\n의 의미 먼저 IBM에서 제공하는 Scanf의 정의먼저 보겠습니다.\n공백 문자로,isspace()함수(줄 바꾸기 문자와 공백과 같은)에서 지정됩니다.\n공백 문자로 scanf함수는 공백이 아닌 다음 문자까지 입력의 모든 연속 공백 문자를 읽지만 저장하지 않습니다. format-string의 한 공백 문자는 입력에서 공백 문자의 조합과 일치합니다.\n퍼센트 기호 문자(%)를 제외하고, 공백이 아닌 문자입니다.\n공백이 아닌 문자로scanf()함수는 일치하는 공백이 아닌 문자를 읽지만 저장하지 않습니다.\nstdin의 다음 문자가 일치하지 않는 경우,scanf()함수가 종료합니다.\n예제 #include \u0026lt;stdio.h\u0026gt; int main(){ int a,b; scanf(\u0026#34;%d \u0026#34;,\u0026amp;a); printf(\u0026#34;%d\\n\u0026#34;,a); scanf(\u0026#34;%d \u0026#34;,\u0026amp;b); printf(\u0026#34;%d\\n\u0026#34;,b); } $ ./a.out 1 1 2 2 우리가 1을 입력후 엔터를 치면 1이 출력되고 그다음 2를 입력하면 2가 출력 될것이라고 예상할것이다.\n$ ./a.out 1 2 1 q 2 하지만 1을 입력후 2를 입력해야 1이 출력되고 q를 입력하자 2가 출력된다 왜일까?\nscanf(\u0026quot;%d \u0026ldquo;,\u0026amp;a) 를 해석해 보자 %d뒤에 공백이 있는데, 이 부분에서\n숫자, 1자 이상의 공백문자, 공백문자가 아닌 문자값이 들어오기를 기다립니다.\n그렇다면 1을 입력후에는 버퍼안에 1이 들어가있고\n그다음 공백 문자 이외의 문자를 기다립니다.\n물론 우리는 엔터를 통해 \u0026lsquo;\\n\u0026rsquo;을 입력했지만 New line은 문자로 할당되지 않습니다.\n그리고 다음 기대 값인 2를 입력 했을때 비로소 공백이 아닌 문자가 들어오게 된것이죠.\n그래서 버퍼에있던 1을 출력해 주고 현재 버퍼엔 2가 남아있게 됩니다.\n그리고 아무 문자를 입력하고 나면 공백이아닌 문자가 들어왔기 때문에\n2가 출력되게 되는것입니다.\n그리고 프로그램이 끝나기 전까지는 버퍼에 마지막 입력했던 문자가 들어있겠지요.\n참고 IBM Scanf 정의 여기 참고\n","date":"June 8, 2020","hero":"/images/default-hero.jpg","permalink":"https://codex-devlab.github.io/posts/study/sub-algorithms/programming-tips/the-meaning-of-scanf-in-c-language/","summary":"\u003ch2 id=\"scanf-에서-공백과-n의-의미\"\u003eScanf 에서 공백과 \\n의 의미\u003c/h2\u003e\n\u003cp\u003e먼저 IBM에서 제공하는 Scanf의 정의먼저 보겠습니다.\u003c/p\u003e\n\u003cp\u003e공백 문자로,\u003ca href=\"https://www.ibm.com/support/knowledgecenter/ko/ssw_ibm_i_73/rtref/isalnum.htm?view=kc#isalnum\" target=\"_blank\" rel=\"noopener\"\u003eisspace()함수\u003c/a\u003e(줄 바꾸기 문자와 공백과 같은)에서 지정됩니다.\u003c/p\u003e\n\u003cp\u003e공백 문자로 \u003ccode\u003escanf\u003c/code\u003e함수는 공백이 아닌 다음 문자까지 입력의 모든 연속 공백 문자를 읽지만 저장하지 않습니다. format-string의 한 공백 문자는 입력에서 공백 문자의 조합과 일치합니다.\u003c/p\u003e\n\u003cp\u003e퍼센트 기호 문자(%)를 제외하고, 공백이 아닌 문자입니다.\u003c/p\u003e\n\u003cp\u003e공백이 아닌 문자로scanf()함수는 일치하는 공백이 아닌 문자를 읽지만 저장하지 않습니다.\u003c/p\u003e\n\u003cp\u003estdin의 다음 문자가 일치하지 않는 경우,scanf()함수가 종료합니다.\u003c/p\u003e\n\u003ch2 id=\"예제\"\u003e예제\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;stdio.h\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e(){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e a,b;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003escanf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;%d \u0026#34;\u003c/span\u003e,\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003ea);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eprintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;%d\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e,a);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003escanf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;%d \u0026#34;\u003c/span\u003e,\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003eb);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eprintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;%d\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e,b); }\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e$ ./a.out\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e우리가 1을 입력후 엔터를 치면 1이 출력되고 그다음 2를 입력하면 2가 출력 될것이라고 예상할것이다.\u003c/p\u003e","tags":["Study","Programming tips","C","Scanf"],"title":"C언어 Scanf 의 의미"},{"categories":["study"],"contents":"Algorithms Algospot Problem\nBackjoon Problem \u0026mdash;backjoon 문제모음\n단계별 문제풀이(backjoon Level) 알고리즘 분류별 문제풀이 \u0026ndash;Algorithms Categories Personal Problem \u0026mdash;personal code\n{:.related-posts.faded}\nData Structure \u0026mdash;C로 구현한 자료구조\nCoding Tip \u0026mdash;C Coding에 대한 고찰\nGit 끝내기 Linux etc \u0026mdash;etc\u0026hellip;setiing and installation jekyll \u0026mdash;Jekyll for blog ","date":"June 8, 2020","hero":"/images/default-hero.jpg","permalink":"https://codex-devlab.github.io/posts/study/sub-algorithms/data-structure/","summary":"\u003ch2 id=\"algorithms\"\u003e\u003ca href=\"/tag/algorithms/\"\u003eAlgorithms\u003c/a\u003e\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"/category/algospot/\"\u003eAlgospot Problem\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"/category/backjoon-category/\"\u003eBackjoon Problem\u003c/a\u003e \u0026mdash;backjoon 문제모음\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"/tag/backjoon-level/\"\u003e단계별 문제풀이\u003c/a\u003e(backjoon Level)\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"/tag/backjoon-classification/\"\u003e알고리즘 분류별 문제풀이\u003c/a\u003e \u0026ndash;Algorithms Categories\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"../_featured_categories/personalcode/personalcode.md\"\u003ePersonal Problem\u003c/a\u003e  \u0026mdash;personal code\u003c/p\u003e\n\u003cp\u003e{:.related-posts.faded}\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"/tag/datastructure/\"\u003eData Structure\u003c/a\u003e  \u0026mdash;C로 구현한 자료구조\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"/tag/c-coding-tip/\"\u003eCoding Tip\u003c/a\u003e  \u0026mdash;C Coding에 대한 고찰\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"git-끝내기\"\u003e\u003ca href=\"/tag/git/\"\u003eGit 끝내기\u003c/a\u003e\u003c/h2\u003e\n\u003ch2 id=\"linux\"\u003e\u003ca href=\"/category/linux/\"\u003eLinux\u003c/a\u003e\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"/tag/etc/\"\u003eetc\u003c/a\u003e \u0026mdash;etc\u0026hellip;setiing and installation\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"/tag/jekyll/\"\u003ejekyll\u003c/a\u003e \u0026mdash;Jekyll for blog\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv style=\"margin-top: rem;\"\u003e\u003c/div\u003e","tags":["Algorithms","Study","Data Struture"],"title":"Data Structure"},{"categories":null,"contents":"달팽이 배열 윤성우의 열혈강의 C 도전프로그래밍3 -도전 2\n문제 : 숫자 N을 입력받아 N by N의 배열을 다음과 같은 규칙으로 만드시오 (달팽이 모양으로 채워짐) In 5X5 1\t2\t3\t4\t5\t16\t17\t18\t19\t6\t15\t24\t25\t20\t7\t14\t23\t22\t21\t8\t13\t12\t11\t10\t9\tIn 6X6 1\t2\t3\t4\t5\t6\t20\t21\t22\t23\t24\t7\t19\t32\t33\t34\t25\t8\t18\t31\t36\t35\t26\t9\t17\t30\t29\t28\t27\t10\t16\t15\t14\t13\t12\t11\t문제 해결 전략 배열의 규칙성 찾기\n우선 배열을 채워지는 규칙에 있어서, 가로와 세로를 채우는 방법이 가장 중요하다. 배열의 을 잘 살펴보면 가로-\u0026gt;세로-\u0026gt;가로-\u0026gt;세로 순으로 채워 지는것을 볼수 있다. 그리고 가로 에서 세로의 배열로 전환될때 이번 순서에서 채워져야 하는 좌표는 가장 마지막 좌표의 Row나 Col이 교환 되는것을 볼수 있다.\nEx) 4X4행렬을 예로 들었을때,\n가로 방향 (0,0) ~ (0,3)까지 채워 지게 된다. 이후 세로방향 (1,1) ~ (1,3)까지 채워 지는데 여기서 주목해야 할부분은 가로방향 0,3 -\u0026gt; 세로방향 1,3 이 되었다는 점이다. 즉, 가로방향 가장 마지막으로 수행되었던 좌표는 0,3 row=0, col=3 에서 세로 방향 row=1, col=3 가로 방향에서 세로 방향으로 전환될때는 Col이 고정된다는 점이다.\n구현 가로-\u0026gt;세로 의 전환에서 row, col 둘중에 하나가 고정되는것을 확인 하였다.\n가로 -\u0026gt;세로 (가장 마지막 으로 입력된 배열의 col고정)\n세로-\u0026gt;가로 (가장 마지막 으로 입력된 배열의 row고정)\nar=(int**)calloc(size,sizeof(int*)); for(int i=0;i\u0026lt;size;i++){ ar[i]=(int*)calloc(size,sizeof(int)); } //2차원 배열을 N만큼 동적 할당함 int snail(int angle,int *vecter,int *recent_row,int *recent_col,int count,int *arr[],int size) //angle 가로 세로 방향, vecter plus or minus, recent row\u0026amp;col 최근 좌표 int num_of_blank(int *arr[],int angle,int last_row_or_col,int size) int find_blank(int *arr[],int angle,int last_row_or_col,int N_by_N,int blank_or_not) 배열을 채워 갈때 해당 순서.\n즉, 가로 배열을 채울때(int snail) 현재 채워야할 가로 배열에 빈배열(int find_blank)은 어디부터 시작이고 빈배열의 개수는 몇개(int num_of_blank)인지 를 구해서 빈 배열의수 만큼 현재 count의 값을 저장한다.\n다른 정답들과 비교해 봤지만 상당히 멍청하게 푼것 같고,\n다른 사람이 보았을때 한번에 이해하기 어려운것 같습니다.\n조금더 가독성있는 코드를 작성하겠습니다.\n","date":"August 10, 2018","hero":"/images/default-hero.jpg","permalink":"https://codex-devlab.github.io/posts/study/sub-algorithms/etc-problems/prob-snail/","summary":"\u003ch1 id=\"달팽이-배열\"\u003e달팽이 배열\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003e윤성우의 열혈강의 C 도전프로그래밍3 -도전 2\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e문제 : 숫자 N을 입력받아 N by N의 배열을 다음과 같은 규칙으로 만드시오\n(달팽이 모양으로 채워짐)\nIn 5X5\n1\t2\t3\t4\t5\t\n16\t17\t18\t19\t6\t\n15\t24\t25\t20\t7\t\n14\t23\t22\t21\t8\t\n13\t12\t11\t10\t9\t\n\nIn 6X6\n1\t2\t3\t4\t5\t6\t\n20\t21\t22\t23\t24\t7\t\n19\t32\t33\t34\t25\t8\t\n18\t31\t36\t35\t26\t9\t\n17\t30\t29\t28\t27\t10\t\n16\t15\t14\t13\t12\t11\t\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"문제-해결-전략\"\u003e문제 해결 전략\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e배열의 규칙성 찾기\u003c/p\u003e","tags":["Study","C","Algorithms","Array"],"title":"Prob 달팽이 배열"},{"categories":null,"contents":" 입력 받은 수를 큰수와 작은수로 정렬후 덧셈 모든 내용은 Git hub 에도 있습니다.\n문제 임의의 수를 입력 받아 큰수와 작은수로 정렬한후 덧셈을 함. 필요 자료구조 및 알고리즘 ASCII Code를 통한 계신(키보드 입력및 파일 입출력) Bubble Sorting Binary Addition Algotirthm 설계 KeyBoard Input or File Input Processing Dynamic Allocation for Big\u0026amp;Small Integer Bubble sort for Big\u0026amp;small integer Binary Addition Algorithm 구현 Input Any Number : 원하는 아무 숫자를 Space로 구분지어 입력합니다. Result : Space로 입력된 숫자들을 오름차순 내림차순으로 정렬되어 Binary Addition이 됩니다. #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;string.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;time.h\u0026gt; #include \u0026lt;sys/time.h\u0026gt; #define MAX_STR_SIZE 100 void bubble(char a[], int n); void rebubble(char b[], int n); void swap(char *, char *); void showstream(char a[]); void sum(char big[],char small[]); void reverse(char a[]); void ncarry(int n,int end); void whatbubblein(char a[],char b[]); void input_string(); char result[MAX_STR_SIZE]; char str_before[MAX_STR_SIZE]; int main() { char str_after[MAX_STR_SIZE]; printf(\u0026#34;Input Any Number : \u0026#34;); input_string(); strcpy(str_after,str_before); bubble(str_before,(int)strlen(str_before)); rebubble(str_after,(int)strlen(str_before)); sum(str_before,str_after); reverse(result); printf(\u0026#34;result : \u0026#34;); showstream(result); return 0; } void input_string(){ char str_after[MAX_STR_SIZE]; char str_read[MAX_STR_SIZE]; int i,j,k=0; fgets(str_read , MAX_STR_SIZE,stdin); for (int i = 0; i \u0026lt; strlen(str_read); ++i) { if(str_read[i]==10){ str_before[k] =\u0026#39;\\0\u0026#39;; } if(str_read[i]!=32 \u0026amp;\u0026amp; str_read[i]!=10){ //32 space bar str_before[k]=str_read[i]; k++; } } } void bubble(char a[], int n)\t{ /* n is the size of a[] */ int i, j,k; for (i = 0; i \u0026lt; n - 1; ++i){ for (j = n - 1; j \u0026gt; i; --j){ if (a[j-1] \u0026gt; a[j]){ swap(\u0026amp;a[j-1], \u0026amp;a[j]); } } } } void rebubble(char b[], int n){ int i,j,k=0; for (i = 0; i \u0026lt; n - 1; ++i){ for (j = n - 1; j \u0026gt; i; --j){ if (b[j-1] \u0026lt; b[j] ){ swap(\u0026amp;b[j-1], \u0026amp;b[j]); } } } } void swap(char *p,char *q){ static char cnt=1; char temp=*p; *p=*q; *q=temp; cnt++; } void showstream(char a[]){ puts(a); } void sum(char big[],char small[]){ char temp[MAX_STR_SIZE]; int i,j,k; static int count=0; int leng,carry=0; leng = (int)(strlen(big)); for (int i = 0; i \u0026lt; leng; ++i) { temp[i]=(big[leng-1-i]+small[leng-1-i])-48; if(carry==1){ result[i]=1+temp[i]; carry = 0; if(result[i]\u0026gt;=58){ result[i]=result[i]-10; result[i+1]=result[i+1]+49; ncarry(count,i); carry=1; } } else{ if(temp[i]\u0026gt;=58){ result[i]=temp[i]-10; carry=1; ncarry(count,i); } else{ result[i]+= temp[i]; } } count++; } } void reverse(char a[]) { char temp[MAX_STR_SIZE]; int x; x=strlen(a); for(int n=x-1;n\u0026gt;=0;n--) { temp[x-n-1]=a[n]; } temp[x]=\u0026#39;\\0\u0026#39;; strcpy(result,temp); } void ncarry(int n,int end){ if(n==end){ result[n+1]=\u0026#39;1\u0026#39;; } else{ result[n+1]=result[n+1]+1; } } void whatbubblein(char a[],char b[]) {\tint i,leng; leng = (int)(strlen(a)); printf(\u0026#34;bubble :\\t\u0026#34;); for (int i = 0; i \u0026lt;leng; ++i) {\tprintf(\u0026#34;[%d]:%d(%c) \u0026#34;,i, a[i],a[i]); } printf(\u0026#34;\\nrebubble :\\t\u0026#34;); for(i= 0; i \u0026lt;leng;i++) { printf(\u0026#34;[%d]:%d(%c) \u0026#34;,i, b[i],b[i]); } printf(\u0026#34;\\n\u0026#34;); } Refference 숫자 알고리즘\n회고 필요 이상의 쓸데없는 코드가 많은것 같습니다. ㅠ.ㅠ\n더 공부해서 코드를 잘 모르는 사람도 쉽게 보고 이해할수있는 코드를 짤수 있게 노력하겠습니다.\n","date":"August 10, 2018","hero":"/images/default-hero.jpg","permalink":"https://codex-devlab.github.io/posts/study/sub-algorithms/etc-problems/prob-bigandsmall/","summary":"\u003cblockquote\u003e\n\u003cp\u003e입력 받은 수를 큰수와 작은수로 정렬후 덧셈\n\u003ca href=\"https://github.com/ehdwn1991/Codex/tree/master/BigandSmallAdditionbySorting\" target=\"_blank\" rel=\"noopener\"\u003e모든 내용은 Git hub 에도 있습니다.\u003c/a\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2 id=\"문제\"\u003e문제\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e임의의 수를 입력 받아 큰수와 작은수로 정렬한후 덧셈을 함.\n\u003cimg src=\"/posts/study/sub-algorithms/etc-problems/prob-bigandsmall/images/99EEBF3359FC027D32.png\" alt=\"img\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"필요-자료구조-및-알고리즘\"\u003e필요 자료구조 및 알고리즘\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eASCII Code를 통한 계신(키보드 입력및 파일 입출력)\u003c/li\u003e\n\u003cli\u003eBubble Sorting\u003c/li\u003e\n\u003cli\u003eBinary Addition Algotirthm\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"설계\"\u003e설계\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eKeyBoard Input or File Input Processing\u003c/li\u003e\n\u003cli\u003eDynamic Allocation for Big\u0026amp;Small Integer\u003c/li\u003e\n\u003cli\u003eBubble sort for Big\u0026amp;small integer\u003c/li\u003e\n\u003cli\u003eBinary Addition Algorithm\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"구현\"\u003e구현\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eInput Any Number : 원하는 아무 숫자를  Space로 구분지어 입력합니다.\u003c/li\u003e\n\u003cli\u003eResult : Space로 입력된 숫자들을 오름차순 내림차순으로 정렬되어 Binary Addition이 됩니다.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;stdio.h\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;string.h\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;stdlib.h\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;time.h\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;sys/time.h\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#define MAX_STR_SIZE 100\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ebubble\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003echar\u003c/span\u003e a[], \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e n);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003erebubble\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003echar\u003c/span\u003e b[], \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e n);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eswap\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003echar\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e, \u003cspan style=\"color:#66d9ef\"\u003echar\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eshowstream\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003echar\u003c/span\u003e a[]);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esum\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003echar\u003c/span\u003e big[],\u003cspan style=\"color:#66d9ef\"\u003echar\u003c/span\u003e small[]);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ereverse\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003echar\u003c/span\u003e a[]);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003encarry\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e n,\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e end);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ewhatbubblein\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003echar\u003c/span\u003e a[],\u003cspan style=\"color:#66d9ef\"\u003echar\u003c/span\u003e b[]);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003einput_string\u003c/span\u003e();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003echar\u003c/span\u003e result[MAX_STR_SIZE];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003echar\u003c/span\u003e str_before[MAX_STR_SIZE];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003echar\u003c/span\u003e str_after[MAX_STR_SIZE];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#a6e22e\"\u003eprintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Input Any Number : \u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#a6e22e\"\u003einput_string\u003c/span\u003e();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#a6e22e\"\u003estrcpy\u003c/span\u003e(str_after,str_before);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#a6e22e\"\u003ebubble\u003c/span\u003e(str_before,(\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e)\u003cspan style=\"color:#a6e22e\"\u003estrlen\u003c/span\u003e(str_before));\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#a6e22e\"\u003erebubble\u003c/span\u003e(str_after,(\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e)\u003cspan style=\"color:#a6e22e\"\u003estrlen\u003c/span\u003e(str_before));\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#a6e22e\"\u003esum\u003c/span\u003e(str_before,str_after);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#a6e22e\"\u003ereverse\u003c/span\u003e(result);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#a6e22e\"\u003eprintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;result : \u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#a6e22e\"\u003eshowstream\u003c/span\u003e(result);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003einput_string\u003c/span\u003e(){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003echar\u003c/span\u003e str_after[MAX_STR_SIZE];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003echar\u003c/span\u003e str_read[MAX_STR_SIZE];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i,j,k\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#a6e22e\"\u003efgets\u003c/span\u003e(str_read , MAX_STR_SIZE,stdin);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e; i \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003estrlen\u003c/span\u003e(str_read); \u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003ei)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e(str_read[i]\u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e10\u003c/span\u003e){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      str_before[k] \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;\\0\u0026#39;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e(str_read[i]\u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e32\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e str_read[i]\u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e10\u003c/span\u003e){  \u003cspan style=\"color:#75715e\"\u003e//32 space bar\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e      str_before[k]\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003estr_read[i];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      k\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ebubble\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003echar\u003c/span\u003e a[], \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e n)\t\t\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{        \u003cspan style=\"color:#75715e\"\u003e/* n is the size of a[] */\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i, j,k;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (i \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e; i \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e n \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e; \u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003ei){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (j \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e n \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e; j \u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e i; \u003cspan style=\"color:#f92672\"\u003e--\u003c/span\u003ej){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (a[j\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e] \u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e a[j]){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003eswap\u003c/span\u003e(\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003ea[j\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e], \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003ea[j]);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003erebubble\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003echar\u003c/span\u003e b[], \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e n){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i,j,k\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (i \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e; i \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e n \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e; \u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003ei){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (j \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e n \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e; j \u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e i; \u003cspan style=\"color:#f92672\"\u003e--\u003c/span\u003ej){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (b[j\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e] \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e b[j] ){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003eswap\u003c/span\u003e(\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003eb[j\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e], \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003eb[j]);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eswap\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003echar\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003ep,\u003cspan style=\"color:#66d9ef\"\u003echar\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003eq){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003estatic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003echar\u003c/span\u003e cnt\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003echar\u003c/span\u003e temp\u003cspan style=\"color:#f92672\"\u003e=*\u003c/span\u003ep;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003ep\u003cspan style=\"color:#f92672\"\u003e=*\u003c/span\u003eq;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003eq\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003etemp;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  cnt\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eshowstream\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003echar\u003c/span\u003e a[]){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#a6e22e\"\u003eputs\u003c/span\u003e(a);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esum\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003echar\u003c/span\u003e big[],\u003cspan style=\"color:#66d9ef\"\u003echar\u003c/span\u003e small[]){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003echar\u003c/span\u003e temp[MAX_STR_SIZE];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i,j,k;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003estatic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e count\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e leng,carry\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  leng \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e)(\u003cspan style=\"color:#a6e22e\"\u003estrlen\u003c/span\u003e(big));\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e; i \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e leng; \u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003ei)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    temp[i]\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e(big[leng\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003ei]\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003esmall[leng\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003ei])\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e48\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e(carry\u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      result[i]\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003etemp[i];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      carry \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e(result[i]\u003cspan style=\"color:#f92672\"\u003e\u0026gt;=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e58\u003c/span\u003e){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        result[i]\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003eresult[i]\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e10\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        result[i\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e]\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003eresult[i\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e]\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e49\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003encarry\u003c/span\u003e(count,i);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        carry\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e(temp[i]\u003cspan style=\"color:#f92672\"\u003e\u0026gt;=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e58\u003c/span\u003e){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        result[i]\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003etemp[i]\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e10\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        carry\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003encarry\u003c/span\u003e(count,i);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        result[i]\u003cspan style=\"color:#f92672\"\u003e+=\u003c/span\u003e temp[i];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    count\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ereverse\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003echar\u003c/span\u003e a[])\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003echar\u003c/span\u003e temp[MAX_STR_SIZE];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e x;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  x\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003estrlen\u003c/span\u003e(a);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e n\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003ex\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e;n\u003cspan style=\"color:#f92672\"\u003e\u0026gt;=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;n\u003cspan style=\"color:#f92672\"\u003e--\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    temp[x\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003en\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e]\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003ea[n];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  temp[x]\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;\\0\u0026#39;\u003c/span\u003e; \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#a6e22e\"\u003estrcpy\u003c/span\u003e(result,temp);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003encarry\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e n,\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e end){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e(n\u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003eend){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    result[n\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e]\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;1\u0026#39;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    result[n\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e]\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003eresult[n\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e]\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ewhatbubblein\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003echar\u003c/span\u003e a[],\u003cspan style=\"color:#66d9ef\"\u003echar\u003c/span\u003e b[])\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{\t\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i,leng;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  leng \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e)(\u003cspan style=\"color:#a6e22e\"\u003estrlen\u003c/span\u003e(a));\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#a6e22e\"\u003eprintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;bubble :\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\t\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e; i \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003eleng; \u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003ei)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  {\t\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eprintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;[%d]:%d(%c)  \u0026#34;\u003c/span\u003e,i, a[i],a[i]);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  } \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#a6e22e\"\u003eprintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003erebubble :\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\t\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e(i\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e; i \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003eleng;i\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eprintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;[%d]:%d(%c)  \u0026#34;\u003c/span\u003e,i, b[i],b[i]);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#a6e22e\"\u003eprintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"refference\"\u003eRefference\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://people.eecs.berkeley.edu/~vazirani/algorithms/chap1.pdf\" target=\"_blank\" rel=\"noopener\"\u003e숫자 알고리즘\u003c/a\u003e\u003c/p\u003e","tags":["Study","C","Algorithms","Sort","Bublesort"],"title":"큰수 작은수로 정렬후 덧셈"},{"categories":null,"contents":"FTW() 란? ftw함수는 해당 경로안의 모든 디렉토리들을 탐색하여 보여준다.\nSYNOPSIS #include \u0026lt;ftw.h\u0026gt;\nint ftw(const char *path, int (*fn)(const char *, const struct sta *ptr, int flag),int depth);\nint nftw(const char *path, int (*fn)(const char *, const struct stat *ptr, int flag, struct FTW *), int depth, int flags);\nftw는 path, fn, depth의 3가지 인자가 필요하다.\npath : 탐색될 대상이 되는 경로.\nfn : 탐색중 발견된 파일의 정보를 받는 콜백 포인터.\ndepth : 탐색중 몇개의 하위디렉토리를 탐색할것인지 설정.\nreturn : 성공하면 0, 실패하면 0이외의 값, 에러가 검출되면 -1리턴\n=\u0026gt;(C에서는 리턴값에 대한 정확한 이해가 필요합니다. 성공시 0을 리턴하며 실패시 0이외의 값을 리턴합니다.)\nDescription FTW_F A regular file.\nFTW_D A directory being visited in pre-order.\nFTW_DNR A directory which cannot be read. The directory will not be descended into.\nFTW_DP A directory being visited in post-order (nftw() only).\nFTW_NS A file for which no stat(2) information was available. The contents of the stat structure are undefined.\nFTW_SL A symbolic link.\nFTW_SLN A symbolic link with a non-existent target (nftw() only)\nSource Code /*authored by Edward Son * * 20161103 * */ #include \u0026lt;sys/types.h\u0026gt; #include \u0026lt;dirent.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;sys/stat.h\u0026gt; #include \u0026lt;string.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; void Myftw(char* path){ DIR *dirptr; //탐색할 경로를 담을 디렉토리포인터 struct dirent *dir; //디렉토리의 정보를 읽어올 포인터 struct stat file_att; //디렉토리와 파일의 정보를 읽어올 구조체 int i; //이것도 nuff해 보시지! char nuff[255]=\u0026#34; \u0026#34;; char space[]=\u0026#34;-----\u0026gt;\u0026#34;; static int num =0; //opendir 로 포인터 개방 if((dirptr = opendir(path))==NULL){ printf(\u0026#34;NO Such a directory\u0026#34;); return; // Base step for Recursive call } if(chdir(path)\u0026lt;0){ perror(\u0026#34;No such path\u0026#34;); exit(1); } while((dir=readdir(dirptr))!=NULL){ stat(dir -\u0026gt; d_name, \u0026amp;file_att); getcwd(nuff,1024); if(strcmp(\u0026#34;.\u0026#34;,dir-\u0026gt;d_name)==0||strcmp(\u0026#34;..\u0026#34;,dir-\u0026gt;d_name)==0) continue; //현재 경로안에 파일들 출력 if(S_ISREG(file_att.st_mode)){ printf(\u0026#34;Path : %s \\n\u0026#34;,nuff); if(num==1){ printf(\u0026#34;file : %s %s\\n\u0026#34;,space,dir-\u0026gt;d_name); } else{ printf(\u0026#34;file : %s\\n\u0026#34;,dir-\u0026gt;d_name); } } //하위 디렉토리가 있을때 해당 디렉토리로 이동 else if(S_ISDIR(file_att.st_mode)){ //디렉토리 인지 확인 printf(\u0026#34;Path : %s \\n\u0026#34;,nuff); if(dir-\u0026gt;d_ino !=0){ //디렉토리 안의 i_node #를 확인하여 순서대로 포인터 이동 printf(\u0026#34;directory : %s %s\\n\u0026#34;,space,dir-\u0026gt;d_name); } num++; Myftw(dir-\u0026gt;d_name); num=0; } } chdir(\u0026#34;..\u0026#34;); printf(\u0026#34;************************\\n\u0026#34;); } int main(int argc, char** argv){ if(argv[1]\u0026lt;0){ perror(\u0026#34;Not exist\u0026#34;); exit(1); } else Myftw(argv[1]); } Result 공부한지 얼마 안되어서 코딩실력이 많이 부족합니다. 어떤 의견이든 코드에 대해 수정할 부분이나 추가 의견 있으시면 댓글로 달아주세요~\n","date":"August 10, 2018","hero":"/images/default-hero.jpg","permalink":"https://codex-devlab.github.io/posts/study/sub-computer-science/system-programming-ftw-implementation/","summary":"\u003ch2 id=\"ftw-란\"\u003eFTW() 란?\u003c/h2\u003e\n\u003cp\u003eftw함수는 해당 경로안의 모든 디렉토리들을 탐색하여 보여준다.\u003c/p\u003e\n\u003ch2 id=\"synopsis\"\u003eSYNOPSIS\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003e#include \u0026lt;ftw.h\u0026gt;\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eint ftw(const char *path, int (*fn)(const char *, const struct sta *ptr, int flag),int depth);\u003c/p\u003e\n\u003cp\u003eint nftw(const char *path, int (*fn)(const char *, const struct stat *ptr, int flag, struct FTW *), int depth, int flags);\u003c/p\u003e\n\u003cp\u003eftw는 path, fn, depth의 3가지 인자가 필요하다.\u003c/p\u003e\n\u003cp\u003epath : 탐색될 대상이 되는 경로.\u003c/p\u003e\n\u003cp\u003efn : 탐색중 발견된 파일의 정보를 받는 콜백 포인터.\u003c/p\u003e","tags":["Study","System-Programming","C"],"title":"시스템프로그래밍 FTW 구현"},{"categories":null,"contents":" OSX에서 autojump 설치 방법입니다.\nautojump git을 참고해 주세요\nautojump? 터미널에서 본인이 원하는 디렉토리로 이동하려고 할때, 디렉토리를 차례차례 건너가면서 이동하는 방법과 절대경로를 통해 한번에 이동하는 방법이 있다.\n하지만 이들 모두 사용자에게 상당한 불편을 줍니다 ㅠㅠ 저도 맥을 쓴지 얼마 안돼서 상당한 불편함이 있더라구요.\n이걸 바로 해결해 줄수있는게 autojump입니다.\n어떻게 동작하는건가요? 바로 실행 스샷 들어갑니다.\n요런식으로 바로 이동이 가능해요!! 절대 경로나 cd같은 시스템 함수를 쓰지 않아도 바로 해당 디렉토리로 이동가능!!!!\n일단 대충 어떻게 돌아가는건지 감은 잡았으니 설치부터 찬찬히 살펴보죵~~\nInfo NAME\n​ autojump - a faster way to navigate your filesystem\nDESCRIPTION\n​ autojump is a faster way to navigate your filesystem. It works by\n​ maintaining a database of the directories you use the most from the\n​ command line.\n​ Directories must be visited first before they can be jumped to.\n\u0026lt;autojump는 터미널상에서 한번 방문 했던 위치로만 jump할수 있어요!!\u0026gt;\nUSAGE\n​ j is a convenience wrapper function around autojump. Any option that\n​ can be used with autojump can be used with j and vice versa.\n​ o Jump To A Directory That Contains foo:\n​ j foo\n​ o Jump To A Child Directory:\n​ Sometimes it\u0026rsquo;s convenient to jump to a child directory (sub-directory\n​ of current directory) rather than typing out the full name.\n​ jc bar\n​ o Open File Manager To Directories (instead of jumping):\n​ Instead of jumping to a directory, you can open a file explorer win-\n​ dow (Mac Finder, Windows Explorer, GNOME Nautilus, etc.) to the di-\n​ rectory instead.\n​ jo music\n​ Opening a file manager to a child directory is also supported:\n​ jco images\n​ o Using Multiple Arguments:\n​ Let\u0026rsquo;s assume the following database:\n​ 30 /home/user/mail/inbox\n​ 10 /home/user/work/inbox\n​ j in would jump into /home/user/mail/inbox as the higher weighted en-\n​ try. However you can pass multiple arguments to autojump to prefer a\n​ different entry. In the above example, j w in would then change di-\n​ rectory to /home/user/work/inbox.\nHow to Installation 저는 OSX를 사용중이기 때문에 Home brew를 통해 간편하게 설치해 볼꺼에요 ㅎㅎ\n우선 터미널상에서 brew search autojump 를 해서 해당 패키지가 있는지 검색해 볼거에요\n검색해 보니 패키지 중에 autojump 가 존재 하네요 그럼 이제 설치만 해주면 됩니다!!\n그럼 이제 brew install autojump를 해주세요\n아니?!!! 에러가 뜨네요?\u0026hellip;.찝찝 합니다\u0026hellip;\n그냥 설치를 진행해도 되지만 저는 찝찝한걸 못참는 관계로 한번 해결을 해 보겠습니다.\n터미널 상에서 친절하게 brew를 update를 하라고 나오네요.\n하지만 우리에겐 구글이 있기때문에 유사한 사례가 있는지 검색해볼께요\n[출처 : http://developpeers.com/blogs/fix-for-homebrew-permission-denied-issues]\n다행히 비슷한 사례가 있었네요. 아무래도 권한 설정때문에 링크가 제대로 돼지 안는 문제가 있었나봐요.\n자그럼 차근차근 해결해 보죵.\n아쉽지만 autojump는 먼저 uninstall 하고 시작할께용\n$ brew uninstall autojump 이제 brew를 업데이트 해볼까요?\nbrew upgrade brew cleanup brew install autojump brew link --overwrite autojump sudo chown -R \u0026#39;whoami\u0026#39; /usr/local brew install autojump 고대로 입력해 줍니다~~\n오오오~~!!!에러 없이 잘 돌아가네용~~ 그럼 이제 설치가 완료 되었나 확인해봐야겠죠?\n터미널에 autojump를 쳐줍니다.\n아니?!!!!!!?!?!?!?!!!!\n\u0026ldquo;아니!! 니가 하라는데로 다 했는데 저건 뭐야?!!?!?!!!\u0026rdquo;\n하시는 분들 있을테지만 ㅎㅎ 아직 끝나지 안았습니다.\n출처 : https://github.com/wting/autojump\nautojump의 git페이지를 살펴보면 매뉴얼이 나와있네요~~ 한번 해봅시다.\n터미널에 autojump 디렉토리로 이동해서 install.py를 실행 시킬꺼에용!!\n뭔가 설치가 완료되어가는 느낌이 팍팍 듭니다.\n하지만 아직 끝나지 안았어요!!!\n왜냐면요, 현재 여러분이 사용하고 계시는 쉘에서 autojump를 사용하기 위해선\n쉘의 환경변수를 설정해줘야 해요.\n그래서 autojump를 설치할때 Please하면서 뭐라뭐라 하네용\n자세히 한번 봅시다.\nㅇㅇ\u0026hellip;.\nㅇㅋ\u0026hellip;\u0026hellip;\n뭘 profile에 추가하라고 하네요. 바로 환경변수에 autojump를 쉘상에서 바로 실행할수 있게 코드를 추가해주라는 내용이에요!!\n그럼 이제 추가해 볼까요?\n저는 Mac을 사용중이니까 .bash_profile에 등록 할꺼에요\n그럼 이제\nvi ~/.bash_profile\n을 해서 열어 볼까요?\n자그럼 위에 autojump 설치시에 나왔던 추가하라던 코드부분을 추가해주면 됩니다!!\n그리고 꼭 저장 잊지 마세요~\n자그럼 이제 실행이 되는건가 확인해 봐야겠죠?\n바로 터미널에 autojump 써봅시다!\n오~~?!!오오오~~!!!!! 잘되는듯 싶은데 또 사용법은 알고 가야하잔아요?\n그럼 예시 몇개 보고가시죠!!\nUsage 저는 현재 test -\u0026gt; foo, root 이런식으로 디렉토리를 구성해 봤어요\n현재 위치는 test이구요\n자 그럼 foo 로 이동해 볼까요?\n사용법은 j [디렉토리명]\n이런식으로 사용하면 돼요!!\n오~~~잘 작동하네용 그럼 root로 한번 이동해봐야겠죠?\n잉???!!!왜 안될까요? 이상하네요\u0026hellip;.가 아니라\nautojump는 자신이 한번 방문했던 디렉토리만 점프 가능하다는점!!!!\n때문에 저는 j -a /User/Edwardson/Desktop/test/root\n를 해줘서 경로를 입력해 줄꺼에요. 자그럼 이동 하나 확인해봐야겠죠?\n매우매우 잘 이동되네용 ㅎㅎ\nIssue autojump를 사용하면서 몇가지 문제점들을 발견했어요!!\n첫번째, 같은 이름을 갖는 디렉토리\n예제를 한번더 만들어 봤어요 stat을 보면 알겠지만 현재 디렉토리 안에 qwe라는 디렉토리는 3개가 있어요.\n각각이 weight도 전부 다르구요. 중복된 이름이 존재할때는 어떻게 이동해야 할까요?\n밑의 예제를 살펴보죠\n눈치 채셨나요?만약 test에 있는 qwe로 이동하기위해선\nj test/qwe\n이런식으로 입력해줘야 해요!!\n나머지 qwe들은 하위 디렉토리이므로\nj w in qwe\n를 해주면 하위 디렉토리들끼리 갖고있는 qwe 간의 이동이 되용\n뭔가 복잡하네요\u0026hellip;.\n두번째, 디렉도리의 경로가 저장될텐데 경로들이 너무 많이 저장되어서 복잡할때 해당 경로들을 지워야해요\nautojump의 데이터 베이스는 밑의 위치에 있어요.\n해당 txt파일을 오픈 하면\n이런식으로 제가 이동했던 경로들이 저장되어 있어요.\n만약 경로가 너무 많아 지거나 정리를 하고 싶을때 자유롭게 삭제하시면 됩니다~~\n혹시라도 다른 이슈에대에 궁금하시면\n여기를 참고해 주세요~\n그럼 저는 이만 autojump에 대한 글을 마칠께요!!!!\n다들 편리한 기능 사용해서 어려움 없으시길 바래용~~\n감사합니다~~~\n","date":"August 10, 2018","hero":"/images/default-hero.jpg","permalink":"https://codex-devlab.github.io/posts/os/sub-macos/mac-autojump/","summary":"\u003cblockquote\u003e\n\u003cp\u003eOSX에서 autojump 설치 방법입니다.\u003cbr\u003e\n\u003ca href=\"https://github.com/wting/autojump\" target=\"_blank\" rel=\"noopener\"\u003eautojump git을 참고해 주세요\u003c/a\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2 id=\"autojump\"\u003eautojump?\u003c/h2\u003e\n\u003cp\u003e터미널에서 본인이 원하는 디렉토리로 이동하려고 할때, 디렉토리를 차례차례 건너가면서 이동하는 방법과 절대경로를 통해 한번에 이동하는 방법이 있다.\u003c/p\u003e\n\u003cp\u003e하지만 이들 모두 사용자에게 상당한 불편을 줍니다 ㅠㅠ 저도 맥을 쓴지 얼마 안돼서 상당한 불편함이 있더라구요.\u003c/p\u003e\n\u003cp\u003e이걸 바로 해결해 줄수있는게 autojump입니다.\u003c/p\u003e\n\u003ch2 id=\"어떻게-동작하는건가요\"\u003e어떻게 동작하는건가요?\u003c/h2\u003e\n\u003cp\u003e바로 실행 스샷 들어갑니다.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/posts/os/sub-macos/mac-autojump/images/27793D4158997ABD0B.png\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e요런식으로 바로 이동이 가능해요!! 절대 경로나 cd같은 시스템 함수를 쓰지 않아도 바로 해당 디렉토리로 이동가능!!!!\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/posts/os/sub-macos/mac-autojump/images/2753D64158997ABE2D.png\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e일단 대충 어떻게 돌아가는건지 감은 잡았으니 설치부터 찬찬히 살펴보죵~~\u003c/p\u003e","tags":["OS","MacOS","Autojump"],"title":"Mac Autojump 설치및 사용법"},{"categories":null,"contents":" 사실 이제는 WSL이 너무 잘되어 있어서 굳이 쓸 필요는 없어요! 하지만, 간혹 제한적인 환경에서는 가볍고 사용하기 편한 Git Bash 추천드립니다!\nWindow 환경에서의 설정이에요. MinGW를 쓰는 Git bash를 사용했습니다. Git for Window\n다들 Git-Hub를 사용해보려 하는데 힘든 부분들이 많죠?ㅠㅠ\n저도 처음 접할때는 어떻게 동작하는지도 모르고 무작정 맨땅에 헤딩\u0026hellip;\n아무튼 지금쯤 검색하셔서 들어오신거면, 깃허브에 가입은 완료 했고\n아마 repository 까지는 생성 하셨을거 같아요.\n이제 본격적으로 로컬에서 깃허브에 파일을 업로드 하는 방법을 포스팅 하려고 합니다.\n제가 Mac os를 쓸때는 바로 터미널에서 깃을 설치하여서 사용했는데요.\nWindow에서 저는 Git Bash를 사용했습니다. 아무래도 터미널 사용에 적응이 되서 Bash가 편하드라구요.\nGit Bash 설치 Bash 설치는 https://git-for-windows.github.io/ 에서 설치할수 있어요.\n설치시에 따로 설정하는건 없으니 우선 가볍게 설치먼저 해주시구요.\nSSH Key생성 및 등록 우선 본인의 깃허브에 로그인해서 오른쪽 상단에 집 모양 아이콘이 있어요.\n그리고 Settings에 들어가고 나면 SSh and GPG KEY 라는 칸이 보일꺼에요\n저는 맥 에어도 등록 했고 윈도우에서도 등록을 해놔서 두개의 SSH 키가 있네요.\nSSH 키는 자동 로그인 같은 기능이라고 생각하시면 되요.\n작업하는 컴퓨터에서 깃에 업로드 할때마다 불필요한 로그인을 할필요가 없어요.\nGit Bash 초기 설정 이제 여러분들이 설치한 Git Bash를 실행해서 로그인 정보를 등록할꺼에요.\n$ git config --global user.name \u0026lt;이름\u0026gt; ex)git config --global user.name Codex $ git config --global user.email \u0026lt;이메일\u0026gt; ex)git config --global user.email Codex@gmail.com 이런식으로 bash에서 등록을 해줍니다.\nSSH KEY 생성 Git-Hub에 제 SSH Key를 등록 할꺼에요.\n그전에 SSH Key를 생성해야겠죠?\nbash에 ssh-keygen 을 입력해 주세요.\n$ssh-keygen 그럼 요렇게 생성이 될꺼에요.\nKey를 생성하면 .ssh 라는 숨김 폴더가 생성되고\n그안에 두가지 파일이 생성될꺼에요.\nid_rsa, id_rsa.pub\n자 그럼 생성이 제대로 되었는지 확인해 볼까요?\nbash에서 ssh key가 있는 디렉토리로 이동을 해야해요.\n$ cd C:/users/user/.ssh 보통 위치가 C:\\Users\\사용자계정.ssh 이곳에 있어욤.\n자 그럼 위치도 확인 했으니 id_rsa.pub 의 내용은 복사해서 Git의 SSH Key에 등록해줘야 해요.\n간단하게 Bash상에서 vi id_rsa.pub 을 해주셔서 내용을 복사하셔도 되구요.\n$ cat id_rsa.pub 을 해주셔도 됩니다. 아무튼 id_rsa.pub에 나오는 모든 내용을 복사해 주세요.\nssh-rsa 부터 맨 마지막에 본인의 이메일 주소가 나온곳까지 복사해 주세요.\nSSH KEY 등록 Git-Hub등록을 해줄 차례에요.\n저번처럼 Setting에 들어오셔서 ssh key를 추가하시면\n요롷게 간단하게 추가해주시면 됩니다.\n마지막으로 Add SSH key를 눌러주시면 완료!!!\n그럼 다음 포스팅에서 본격적으로 Git에 업로드 하는법을 올려볼께요~~\n읽어주셔서 감사하고, 언제나 화이팅 하세요~~\n궁금하신것은 언제든 댓글로 물어봐주세요~~\n","date":"June 11, 2018","hero":"/images/default-hero.jpg","permalink":"https://codex-devlab.github.io/posts/os/sub-window/window-git-setting/","summary":"\u003cblockquote\u003e\n\u003cp\u003e사실 이제는 WSL이 너무 잘되어 있어서 굳이 쓸 필요는 없어요!\n하지만, 간혹 제한적인 환경에서는 가볍고 사용하기 편한 Git Bash 추천드립니다!\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cblockquote\u003e\n\u003cp\u003eWindow 환경에서의 설정이에요. MinGW를 쓰는 Git bash를 사용했습니다.\n\u003ca href=\"https://gitforwindows.org/\" target=\"_blank\" rel=\"noopener\"\u003eGit for Window\u003c/a\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e다들 Git-Hub를 사용해보려 하는데 힘든 부분들이 많죠?ㅠㅠ\u003c/p\u003e\n\u003cp\u003e저도 처음 접할때는 어떻게 동작하는지도 모르고 무작정 맨땅에 헤딩\u0026hellip;\u003c/p\u003e\n\u003cp\u003e아무튼 지금쯤 검색하셔서 들어오신거면, 깃허브에 가입은 완료 했고\u003c/p\u003e\n\u003cp\u003e아마 repository 까지는 생성 하셨을거 같아요.\u003c/p\u003e\n\u003cp\u003e이제 본격적으로 로컬에서 깃허브에 파일을 업로드 하는 방법을 포스팅 하려고 합니다.\u003c/p\u003e","tags":["Window","Git","Git Bash","MinGW"],"title":"Git 설치 및 초기설정"},{"categories":null,"contents":"Working in Hydejack _config.yml, Gemfile 의 초기 설정\njekyll을 시작하기 전에 필요한플러그 인이나 기본 설정을 완료해야한다.\n_config.yml\n블로그의 URL, Name, DIsqus, Collection, Markdown Converter\u0026hellip;등\njekyll이 동작하고 블로그에 필요한 초기 정보를 담고 있다.\n주로 플러그인과 블로그의 설정.\nGemfile\n주로 해당 블로그에 적용되는 플러그인이 gem으로 동작할수있게 명시해줌\n테마에 대한 remote나 jekyll의 버전 에 대한 정보를 담고있음\n루트 폴더에서 index.md를 찾아서 가장 먼저 보여준다\nindex.md에 있는 Fornt matter의 layout에 해당 하는 html문서를 템플릿처럼\n사용해서 동작함\n_layout 에 있는 layout 문서들은 _Include안에 문서들과 연동\n_include 안에는 head.html, body.html\u0026hellip; 등 다양한 기본 문서가 존재함\n여기 있는 문서들은 전부 웹페이지의 한 부분을 보여주기 위해 필요한 요소 들이다.\n만약 html만으로 웹페이지를 만들었다면 _include 안에 있는 문서들이 한곳에\n통합 되어 있을것이다. 하지만 효율적으로 캡슐화 하여 필요한곳에 쓰이게\n각 용도 별로 나눠져있다.\n웹페이지가 돌아가기 이전에 _js폴더에서 자바 스크립트가 동작\n웹알못이기 떄문에 이부분은 좀더 공부한 후에 작성\njekyll 에서 다양한 Collection이 있지만 기본적으로 구성된 Collection은 _post이다\n만약 다른 Collection이 없다면 jekyll 은 _post에 있는 Markdown문서들은 나열할것이다.\n하지만, _config.yml에 다른 Collection이 명시되어 있다면 해당 Collection은\n_post Collection을 먼저 rendering 하여 보여준다.\njekyll directory structure 지킬 기본 디렉토리 구조는 이런식입니다. 기본 구조를 알아두고 적용하고 싶은 테마에 구조와 비교해보면서 알아가는게 이해가 빠를것 같습니다.\n. ├── _config.yml (지킬 환경설정 정보) ├── _drafts (아직 게시하지 않은 초안으로 파일명 형식에 날짜가 없음) | ├── begin-with-the-crazy-ideas.textile | └── on-simplicity-in-technology.markdown ├── _includes (포스트 레이아웃이 들어 있는 폴더, 레이아웃의 헤더파일 같은것) | ├── footer.html | └── header.html ├── _layouts (실제 레이아웃이 존재하는 폴더, Liquid 태그를 사용함) | ├── default.html | └── post.html ├── _posts (게시한 포스트를 저장하는곳,날짜 명칭 형식을 반드시 맞춰야함) | ├── 2007-10-29-why-every-programmer-should-play-nethack.textile | └── 2009-04-26-barcamp-boston-4-roundup.textile ├── _data (사이트에 사용될 데이터가 저장되어 있는곳) | └── members.yml (site.data.members 라고 입력하면 해당 데이터 사용가능) ├── _site (지킬이 변환작업을 마친 포스트가 저장되는곳) ├── .jekyll-metadata (지킬이 동작하면서 빌드내역등에 대한 정보를 저장) └── index.html (yaml 머리말을 세션을 가진 모든 파일을 찾아 변환작업함) hydejack 구조\n지킬도 분명 index.html을 우선으로 보여줄것이다. 근데 지킬은 index.md를 우선시한다.\n기본구조에서 index.md 가 존재하는곳이 어딘지 보면 알기 쉽다.\n├──_data ├──_featured_categories ├──_featured_tags ├──_includes ├──_js ├──_layouts ├──_posts ├──_sass ├──assets (이미지 문서등 자원폴더) ├──_config.yml ├──404.md ├──about.md └──index.html Config _config.yml\nGithub page 깃허브 페이지에 호스팅 할때 url형식은 http://.github.io 의기본형식을 따른다. (따로 도메인을 설정하지 안았을때) baseurl 은 당신이 호스팅한 페이지에 따라 달라진다.\nPlugin _config 에서 다양한 플러그인과 현재 페이지의 각종 정보를 담고 있다.\n예를 들어 disqus의 기능을 추가하려고 할때 여기에 명시해 주어야한다.\n물론 font에 관한 내용도 여기에 들어가야한다. 일단은 그렇게만 알고 있고\n블로그를 만들어 가면서 파악하면될듯.\nPost _post\njekyll 는 다양한 collection을 생성할수 있다.\n하지만 기본적으로 post라는 collection을 가지고 있고, _post폴더에 있는 post 들을 보여준다.\nIssues\n포스트에 mycollection의 태그명을 추가해야함 Page 거의 모든 웹환경의 설정은 루트폴더에서 index.html 인 파일을 찾아 홈페이지로 보여줌 물론 지킬도 이런 관례를 따름\n페이지의 위치 html을 생성하는 위치에 따라 두가지 방법있음.\n사이트의 루트 폴더에 각 페이지병 HTML을 만든다. 사이트의 루트 폴더에 각 페이지 별 폴더를 만들고, 각 폴더에 index.html 파일을 만든다.(이게 좋아 보임) HTML파일에 이름쓰기\n루트 디렉토리에 생성하고자 하는 페이지 이름을 가진 HTML파일을 추가하는것\n. |-- _config.yml |-- _includes/ |-- _layouts/ |-- _posts/ |-- _site/ |-- about.html # =\u0026gt; http://yoursite.com/about.html |-- index.html # =\u0026gt; http://yoursite.com/ └── contact.html # =\u0026gt; http://yoursite.com/contact.html 디렉토리에 이름을 짓고 인덱스 HTML파일 넣기\n루트 폴더에 페이지마다 폴더를 만들고 그안에 index.html을 넣어주는것이 단순해 지고 관리가 쉬워짐\n. ├── _config.yml ├── _includes/ ├── _layouts/ ├── _posts/ ├── _site/ ├── about/ | └── index.html # =\u0026gt; http://yoursite.com/about/ ├── contact/ | └── index.html # =\u0026gt; http://yoursite.com/contact/ └── index.html # =\u0026gt; http://yoursite.com/ Collection Jekyll 에서 제공하는 Collection 정의 참고\nCollection은 티스토리 같은 블로그의 tag와 category기능이랑 비슷하다고 보면됩니다.\n물론 Jekyll 에서는 그런 기능들을 만들어줘야 할뿐입니다.\nHydejack에서 제공하는 Collections은 tag, category 이다.\n하지만 사용자에 의해서 따로 Collection을 설정하여 사용할수도있다.\n# 다음은 jekyll 루트 폴더의 Collection구조입니다. ./ ... ├── _featured_categories ├── _featured_tags ├── _my_collection ... # Hydejack이 제공하는 tag와 categry가 있지만 # 추가적으로 _my_collection을 만들었습니다. my collection을 tag나 category같은 기능 으로 사용하면서\nmy collection안에 작성된 post들을 새로운 분류로 나열 하려고함.\n_config.yml 에 collection 추가 # _config.yml # Collections collections: featured_categories: permalink: /category/:name/ output: true featured_tags: permalink: /tag/:name/ output: true my_collection: permalink: /my_collection/:name/ output: true 루트 폴더에 카테고리명으로 폴더 생성 ./ ... ├── _featured_categories ├── _featured_tags ├── _my_collection -\u0026gt; 반드시 폴더명은 collection이름 앞에 `_`를 붙여줘야합니다. ... _my_collection 폴더 안에 index.md생성 ./ ... ├── _my_collection ├── index.md ├── samplecollection.md ├── samplepost.md ... # index.md --- layout: default title: my collection list description: \u0026gt; my collection의 새로운 분류에 따른 카테고리 리스트를 보여주려 합니다. menu: true order: 1 --- # samplecollection.md --- layout: list title: 새로 분류할 collection 입니다. description: \u0026gt; slug: test -\u0026gt; tag나 category의 slug같은것 --- # samplepost.md --- layout: post title: sample post 입니다. description: \u0026gt; my_collection: [test] categories: [category_test] tags: [tag_test] --- 이제 기본 골격은 다 갖췄습니다.\nmy collection에서 보이고 싶은 포스트나 내용을 입맛에 맞게 바꾸면 됩니다.\nIssues\n콜렉션에서 새로 분류한 카테고리별로 리스팅 새로운 카테고리에서 해당 분류로 모아진 post listing 기존에 있던 list에서 my collection에 있는포스트를 못불러옴 Adding Sidebar in jekyll --- layout: page =\u0026gt;page 와 list중에 어울리는걸로 하면될듯 title: test_page =\u0026gt;사이드바에 표시될 이름 description: \u0026gt; =\u0026gt; 해당 사이드바에 대한 설명 test sidebar =\u0026gt; 여기부분부터 쓸때 반드시 스페이스바로 두칸 띄고 써야됨. 절대 탭이나 적거나 많게 띄면 에러남 menu: true =\u0026gt;이 속성을 넣어줘야 사이드바에 나타남 order: 7 =\u0026gt; 사이드 바에서 표시될 순서임 --- #사이드바에 추가하고 싶으면 폴더 이름은 아무거나 상관없음 #폴더 안에 index.md가 있어야 하고 위의 yaml 헤더가 있어야함. _featured_tags anytitle.md 를 만들고 위의 내용 넣어주면됨.\n폴더에 index.md 만들기 anytitle.md 만들고 위의 내용 넣어주면됨.\nSidebar\u0026amp;page\u0026amp;list example #먼저 testfolder를 사이드바에 추가하기 위해 #루트 위치에 같은 폴더 명을 만들어줬습니다. 물론 폴더명을 동일하게 만든것은 #그냥 보기 이쁘고 관리 하기 편할것 같아서 그런거지 굳이 일치 시킬필요는 없습니다. $ tree -L 2 . ... ├── testfolder ├──index.md ├── _post ├──... ├──2018-05-05-testpost.md ├──2018-05-05-testpage.md ├──... └── ... #저는 사이드바에 추가된 testfolder에 testpost로 태그된 목록들을 보여주려합니다. #물론 _post폴더 안의 testpost 와 testpage도 testpost로 태그되어 있습니다. 그럼 이제 밑의 사진 처럼 구성이 되어 있을것입니다.\n이제 각 폴더와 파일들을 상세하게 살펴보면 될것같습니다.\ntestfolder 테스트 폴더 안에는 index.md가 있습니다. 테마의 내부설정에 의해서 index.md를 우선으로\n읽어 오고 yaml헤더에 따라 용도와 방법이 구분됩니다. # index.md --- layout: list title: testfolder slug: testpost description: \u0026gt; test sidebar menu: true order: 1 --- 테스트 리스트 입니다. 현재 리스트는 testpost가 태그되어 있는 포스트들만 보여주고 있습니다. layout : list로 설정 하셔야 해당 태그로 연결된 포스트들을 보여줍니다. slug : 슬러그에 설정된 이름으로 관련된 태그를 가져옵니다. menu : sidebar에 추가 하기 위해선 true로 해줘야 합니다. order : 사이드바에서 보여질 순위입니다. 위의 그림에서 보면 첫번째로 위치함. 태그된 포스트들\n현재는 두가지의 다른 포스트를 준비했습니다.\n# 2018-05-05-testpost.md --- layout: post title: test_post date: 2018-05-10 16:06:59 +0900 tag: [testpost] --- 테스트 포스트입니다. 현재 태그는 testpost입니다. # 2018-05-05-testpage.md --- layout: page title: test_page date: 2018-05-10 16:06:59 +0900 tag: [testpost] --- 테스트 페이지입니다. 현재 태그는 testpost입니다. Authors about 페이지나 각 포스트들의 footer에 사용자의 사진과 정보가 표시될수있게함.\n_layout/about.html\nabout 페이지를 만들때 쓰임.\n{% raw %} # _layout/about.html {% assign plugins = site.plugins | default:site.gems %} \u0026lt;article class=\u0026#34;page\u0026#34; role=\u0026#34;article\u0026#34;\u0026gt; {% assign author = site.data.authors[page.author] | default:site.data.authors.first[1] | default:site.author %} 이부분이 _data안에 있는 authors.yml문서의 값을 불러옴 {% if author.picture %} {% include srcset-img.html class=\u0026#34;avatar\u0026#34; img=author.picture alt=author.name %} {% elsif plugins contains \u0026#39;jekyll-avatar\u0026#39; %} {% assign avatar = author.social.github | default:author.github.username | default:author.github %} {% include avatar-tag.html user=avatar %} {% endif %} \u0026lt;h1 class=\u0026#34;page-title hr\u0026#34;\u0026gt;{{ page.title }}\u0026lt;/h1\u0026gt; {{ author.about | markdownify }} {% include message.html text=page.description hide=page.hide_description alt=\u0026#34;\u0026#34; %} {{ content }} \u0026lt;/article\u0026gt; {% endraw %} _include/about.html\n_date/authors.yml\n여기 안에서 author1, author2 등으로 사용자의 이름, 주소, 사진, github 등을 정의함\nIssues\nabout페이지와 footer에 사진이 제대로 안나옴 Issue Github page defendency Problem Gemfile 에 다음 내용 추가\nrequire \u0026#39;json\u0026#39; require \u0026#39;open-uri\u0026#39; versions = JSON.parse(open(\u0026#39;https://pages.github.com/versions.json\u0026#39;).read) gem \u0026#39;github-pages\u0026#39;, versions[\u0026#39;github-pages\u0026#39;] $ bundle update $ bundle install Github Defendency version\nHeader tag by korean is not working 이부분에서 삽질 많이 했습니다. 웹알못이라 아무리 검색하고 찾아봐도\n이유를 알수가 없었습니다. 그리고 결국 해결했지만 완벽한 방법은 아닙니다.\n혹시라도 방법을 알고 계시다면 댓글에 써주세요 ㅠㅠ\n우선 문제의 내용을 보여 드릴꼐요.\n// 2018-01-01-test.md ... ## 내부링크 테스트 ... // 2018-01-01-test.html -\u0026gt;jekyll를 통해 html 변환후 ... \u0026lt;\u0026gt; ... ... 문제 해결을 위해 시도했던 방법들입니다.\nFont 교체(실패)\n혹시나 font의 문제 때문에 그런줄알고 google font 에서\n한글지원이 되는 폰트로 교체하였습니다. 하지만 실패\u0026hellip;\nNew collection listing 콜렉션에서 새로 분류한 카테고리별로 리스팅\n_my_collection폴더 안에 index.md의 기능 추가하고,\n새로운 레이아웃에 해당 기능을 추가하고 index.md에서 mycategory를 적용하여 해결.\nmy collection에 존재하는 class들의 리스트를 만들어줘야 한다.\n{% raw %} # _layout/mycategory.html \u0026lt;article class=\u0026#34;page\u0026#34; role=\u0026#34;article\u0026#34;\u0026gt; \u0026lt;header\u0026gt; \u0026lt;h1 class=\u0026#34;page-title\u0026#34;\u0026gt;{{ page.title }}\u0026lt;/h1\u0026gt; {% include message.html text=page.description hide=page.hide_description %} \u0026lt;/header\u0026gt; {{ content }} {% for test in site.my_collection %} {% if test.title != page.title %} {% if test.layout == \u0026#34;study_post\u0026#34; %} {% assign studycoll = test.title | join:\u0026#39;|\u0026#39; | append:\u0026#39;|\u0026#39; %} {% assign scoll = scoll | append:studycoll %} \u0026lt;h2\u0026gt;\u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;{{ test.url | prepend: site.baseurl }}\u0026#34;\u0026gt; {{ test.title }} \u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt;\u0026lt;/h2\u0026gt; {% endif %} {% endif%} {% endfor %} \u0026lt;/article\u0026gt; {% endraw %} # _my_collection/index.md --- layout: mycategory title: Study description: \u0026gt; menu: true order: 2 --- New collection classifying post 새로운 카테고리에서 해당 분류로 모아진 post listing\n새로 분류된 class에서 _my_collection 안에서 작성된 포스트들을 보여줘야한다.\n레이 아웃에 mylist.html 을 만들어서 해당 기능 넣고 해결.\n{% raw %} # _layout/mylist.html {% for post in site.my_collection %} {% if post.my_collection contains page.slug%} \u0026lt;li\u0026gt; \u0026lt;a href=\u0026#34;{{ post.url | relative_url }}\u0026#34; class=\u0026#34;h4 flip-title\u0026#34;\u0026gt; \u0026lt;span\u0026gt;{{ post.title }}\u0026lt;/span\u0026gt; \u0026lt;/a\u0026gt; \u0026lt;time class=\u0026#34;heading faded fine\u0026#34; datetime=\u0026#34;{{ post.date | date_to_xmlschema }}\u0026#34;\u0026gt; {{ post.date | date:list_entry }}\u0026lt;/time\u0026gt; \u0026lt;/li\u0026gt; {% endif%} {% endfor %} {% endraw %} # _my_collection/index.md --- layout: mylist title: 새로 분류할 collection 입니다. description: \u0026gt; slug: test -\u0026gt; tag나 category의 slug같은것 --- List layout can\u0026rsquo;t listing post in mycollection 기존에 있던 list에서 my collection에 있는포스트를 못불러옴\nHydejack에서 제공하는 list layout에서 mycollection에 있는 포스트중\ntag와 category 로 분류 되있는 포스트를 못불러옴.\nlist layout에 my collection에 있는 tag와 category를 가진 포스트를 불러오게끔 해서 해결\n{% raw %} # _layout/list.html ... {% assign category = site.featured_categories | where: \u0026#34;slug\u0026#34;, page.slug | first %} {% if category %} {% assign posts = site.categories[page.slug] %} {% assign s_category = site.my_collection | where:\u0026#34;categories\u0026#34;, page.slug%} {% assign posts = posts | concat: s_category %} {% else %} {% assign tag = site.featured_tags | where: \u0026#34;slug\u0026#34;, page.slug | first %} {% if tag %} {% assign posts = site.tags[page.slug] %} {% assign s_tag = site.my_collection | where:\u0026#34;tags\u0026#34;, page.slug%} {% assign posts = posts | concat: s_tag %} {% else %} {% assign posts = site.posts %} {% endif %} {% endif %} {% if posts%} {% assign posts = posts | sort: \u0026#39;date,title\u0026#39; | reverse %} {% endif%} ... {% endraw %} home Layout can\u0026rsquo;t show the post in mycollection _layout/default.html 에 mycollection내용도 보여지게 추가\n{% raw %} \u0026lt;!--fix--\u0026gt; {% assign allpost= site.posts %} {% assign study_post = site.study | where:\u0026#34;layout\u0026#34;, \u0026#34;post\u0026#34;%} {% assign allpost = allpost | concat: study_post %} {% if site.posts.size \u0026gt; 0 %} \u0026lt;h2 class=\u0026#34;hr\u0026#34;\u0026gt;{{ strings.posts | default:\u0026#34;Posts\u0026#34; }}\u0026lt;/h2\u0026gt; \u0026lt;ul class=\u0026#34;related-posts\u0026#34;\u0026gt; {% for post in allpost limit:10 %} {% include post-list-item.html post=post %} {% endfor %} \u0026lt;/ul\u0026gt; {% endif %} \u0026lt;!--fix--\u0026gt; {% endraw%} Can\u0026rsquo;t show picture in about page and footer about페이지와 footer에 사진이 안나옴\n./_date/author.yml 에서 srcset부분 삭제 해서 해결\n... srcset: 1x: https://placehold.it/128x128 2x: https://placehold.it/256x256 ... show the mycollection slug in any post 모든 포스트에서 mycollection의 slug표시\n_include/post.html에서 mycollection의 slug를 표시하도록 수정\n{% raw %} ... {% assign study_start = site.data.strings.study_start | default:\u0026#34;at \u0026#34; %} {% assign study_separator = site.data.strings.study_separator | default:\u0026#34;, \u0026#34; %} ... {% include tag-list.html tags=post.study meta=site.study start_with=study_start separator=study_separator %} ... {% endraw %} _data/strings.ymll에서 mycollection의 slug 표시방법 추가\n{% raw %} ... #Seperators study_start: \u0026#39;at \u0026#39; study_separator: \u0026#39;, \u0026#39; ... {% endraw %} 카테고리 페이지 나누기\nindex.md of location . ├── _data ├── _featured_tags ├── _includes ├── _js ├── _layouts ├── _posts ├── _sass ├── _site ├── assets ├── docs │ └── 7.5.1 │ └── index.md ├── index.md └── licenses Whole structure . ├── Gemfile ├── Gemfile.lock ├── LICENSE.md ├── NOTICE.md ├── _config.yml ├── _data ├── _featured_tags ├── _includes ├── _js ├── _layouts ├── _posts ├── _projects ├── _sass ├── _site ├── about.md ├── assets ├── docs ├── index.html ├── index.md ├── licenses └── posts.md ","date":"June 11, 2018","hero":"/images/default-hero.jpg","permalink":"https://codex-devlab.github.io/posts/blog-migration/sub-jekyll/","summary":"\u003ch2 id=\"working-in-hydejack\"\u003eWorking in Hydejack\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e_config.yml, Gemfile 의 초기 설정\u003c/p\u003e\n\u003cp\u003ejekyll을 시작하기 전에 필요한플러그 인이나 기본 설정을 완료해야한다.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e_config.yml\u003c/p\u003e\n\u003cp\u003e블로그의 URL, Name, DIsqus, Collection, Markdown Converter\u0026hellip;등\u003c/p\u003e\n\u003cp\u003ejekyll이 동작하고 블로그에 필요한 초기 정보를 담고 있다.\u003c/p\u003e\n\u003cp\u003e주로 플러그인과 블로그의 설정.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eGemfile\u003c/p\u003e\n\u003cp\u003e주로 해당 블로그에 적용되는 플러그인이 gem으로 동작할수있게 명시해줌\u003c/p\u003e\n\u003cp\u003e테마에 대한 remote나 jekyll의 버전 에 대한 정보를 담고있음\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e루트 폴더에서 index.md를 찾아서 가장 먼저 보여준다\u003c/p\u003e\n\u003cp\u003eindex.md에 있는 Fornt matter의 layout에 해당 하는 html문서를 템플릿처럼\u003c/p\u003e","tags":["Jekyll","Hydejack Theme","Manual"],"title":"Jekyll"},{"categories":null,"contents":"C언어 프로그램이란? 컴퓨터에서 실행될때 특정 작업을 수행 하는 일련의 명령어들의 모음이다.\n소프트웨어 공학 요구사항 분석 자료형 정의 등등 Flow chart 설계 및 구현(pseudo code) 코드 구현 실행 테스트 유지보수 CPU 구조 Control unit\u0026lt;-\u0026gt;ALU\u0026lt;-\u0026gt;Processor resister(R1,R2,R3\u0026hellip;) 위의 3가지 장치들이 Internal bus로 연결되어 통신한다.\nALU(Arithmetic logic unit )\n산술 논리 장치 : 실질적으로 산술, 논리 계산을 수행함.\nResister\nCPU의 자체적인 메모리저장 기능.\nMemory buffer register(MBR)\n​\tI/O로 보내지거나 메모리에 저장될 Word 혹은 I/O나 메모리로 부터 Word를 받는 것.\nMemory address register(MAR)\nInstruction register(IR)\nInstruction buffer register(IBR)\nProgram counter(PC)\nAccumulator (AC) and mutiplier quotient (MQ)\nControl unit\nCPU의 명령어를 제어한다.\n폰노이만 구조(최초의 컴퓨터 구조를 만듬) 폰노이만의 구조는 CPU, 메모리, 프로그램 구조를 갖는 프로그램 내장 방식 컴퓨터를 뜻한다.\n{: .center-image}\n폰노이만 구조(출처: 위키 백과사전) C 메모리 구조 {: width=\u0026ldquo;50%\u0026rdquo; height=\u0026ldquo;50%\u0026rdquo;}(출처 : https://bitsofcomputer.blogspot.com/)\nc언어에서의 메모리 구조를 알고 있다는것은 상당히 중요하다.\n주로 동적 할당 할때나 임베디드 시스템을 다룰때 메모리 구조와 영역을 알고 있으면 편하다.\nlocal variables can be stored either on the stack or in a data segment depending on whether they are auto or static. (if neither auto or static is explicitly specified, auto is assumed)\nglobal variables are stored in a data segment (unless the compiler can optimize them away, see const) and have visibility from the point of declaration to the end of the compilation unit.\nstatic variables are stored in a data segment (again, unless the compiler can optimize them away) and have visibility from the point of declaration to the end of the enclosing scope. Global variables which are not static are also visible in other compilation units (see extern).\nauto variables are always local and are stored on the stack.\nthe register modifier tells the compiler to do its best to keep the variable in a register if at all possible. Otherwise it is stored on the stack.\nextern variables are stored in the data segment. The extern modifier tells the compiler that a different compilation unit is actually declaring the variable, so don\u0026rsquo;t create another instance of it or there will be a name collision at link time.\nconst variables can be stored either on the stack or a readonly data segment depending on whether they are auto or static. However, if the compiler can determine that they cannot be referenced from a different compilation unit, or that your code is not using the address of the const variable, it is free to optimize it away (each reference can be replaced by the constant value). In that case it\u0026rsquo;s not stored anywhere.\nthe volatile modifier tells the compiler that the value of a variable may change at anytime from external influences (usually hardware) so it should not try to optimize away any reloads from memory into a register when that variable is referenced. This implies static storage.\ngeeks를 참고 하면서 공부해보자\nStorage class in C\n컴파일 과정 gcc compiler\nsource.c \u0026mdash;\u0026mdash;-\u0026gt; source.i \u0026mdash;\u0026mdash;-\u0026gt; source.s \u0026mdash;\u0026mdash;-\u0026gt; source.o \u0026mdash;\u0026mdash;-\u0026gt; source\n​ (precompile) (compiler) (assembler) (linker)\ngcc compile 과정 (출처: 제타위키) $ gcc test.c $ ls a.out 실행 파일 생성 $ gcc -c test.c test.o 오브젝트 파일 생성 $ gcc -o test.out test.o test.out 실행 파일이 생성됨 $ gcc -v --save-temps -o test.out test.c 컴파일 전체 과정을 보여주고 파일을 저장해줌 test.c test.i test.s test.o test.out C Concept 일단 이부분은 ISO/IEC 9899:TC3 의 표준을 보고 작성하였다.\nscope scope에 자세히 들어가기 전에 먼저 선행되야 하는 개념이있다.\nint i=0; 선언자 식별자 코딩을 하면서 int i 정수형 변수 선언은 그냥 자연스레 넘어갔었다.\n하지만 scope를 이해하기 위해서 더욱 자세하게 파고들어 보자.\n두가지 개념을 살펴보자.\nDeclarator 선언자 라고 하며, Type declarator라고도 한다.\n선언자의 역할은 변수의 형을 지정 하는것이다.\n위의 예제에 적용해 보자면 int 는 정수형 선언자 이다.\nIdentifier 식별자 라고하며, 형선언자로 인해 특정 데이터 형을 가질수 있는 변수가 된다.\nint 는 Type sepcifier(형식 지정자) 라고 한다.\n즉, i 는 int 형 변수에 대한 식별자이다.\n하지만 식별자는 반드시 변수에만 해당하는 것은 아니다.\n예를 들어 void main main은 void형 함수에 대한 식별자 이며,\nprintf() 는 printf 함수에 대한 식별자 이다.\nVisible 식별자는 오직 자신이 존재 하는 scope안에서만 사용될수 있다.\nInner Scope , Outer Scope의 개념을 이해 하는게 편할것 같다.\n예제를 살펴 보자.\n#include \u0026lt;stdio.h\u0026gt; int glo=10; void main(){ //scope 1 int a=3; { //scope 2 int b=4; { //scope 3 int c=8; printf(\u0026#34;a: %d b: %d c: %d glo: %d\\n\u0026#34;,a,b,c,glo ); } printf(\u0026#34;a: %d b: %d c: %d glo: %d\\n\u0026#34;,a,b,c,glo ); } printf(\u0026#34;a: %d b: %d c: %d glo: %d\\n\u0026#34;,a,b,c,glo ); } 이제 결과를 예상해 보자. 여태 배운 대로 라면 Inner scope 에서 선언된 식별자는\nouter scope에서 사용할수 없다. 그렇다면 scope 2 에서는 scope3 의 정수형 식별자\nc를 사용할수 없고, scope 1 에서는 정수형 식별자 b,c를 사용할수 없다.\n그럼 결과를 보자.\ntest.c:12:48: error: use of undeclared identifier \u0026#39;c\u0026#39; printf(\u0026#34;a: %d b: %d c: %d glo: %d\\n\u0026#34;,a,b,c,glo ); ^ test.c:14:42: error: use of undeclared identifier \u0026#39;b\u0026#39; printf(\u0026#34;a: %d b: %d c: %d glo: %d\\n\u0026#34;,a,b,c,glo ); ^ test.c:14:44: error: use of undeclared identifier \u0026#39;c\u0026#39; printf(\u0026#34;a: %d b: %d c: %d glo: %d\\n\u0026#34;,a,b,c,glo ); 당연히 outer scope에서 inner scope의 식별자를 사용하는것은 불가능하다.\n때문에 scope 2 에서는 scope 3 의 식별자를 사용할수 없고,\nscope 1 에서는 scope 2, scope 3 의 식별자를 사용할수 없다.\nC99 표준에 서는 Scope 에 대해 다음과 같이 정의하고 있다.\nIf so, the scope of one entity (the inner scope) will be a strict subset of the scope of the other entity (the outer scope).\nWithin the inner scope, the identifier designates the entity declared in the inner scope; the entity declared in the outer scope is hidden (and not visible) within the inner scope.\nValid scope 같은 이름과 형식(Same entities)의 식별자 들은 다른 scope에서 사용되거나,\n다른 파일(Different name space)에서 사용되어야 한다.\nVariety of Identifier 각 종류의 식별자는 그 자체의 scope를 가진다.\nfunction : 함수 내부에서의 식별자 function은 자체의 code block {} 안에서 선언된 식별자는\n해당 scope안에서만 사용될수 있으며, global, static 의 속성이 없으면,\n해당 scope 밖의 식별자를 사용할수 없다.\nfunction prototype : 함수 선언 parameter에서의 식별자 예를 들어 fuction을 선언 하고 사용 하기 위해선\n전처리 부분에 function에 대한 정보를 알려줘야 한다.\n예제를 보자\n#include \u0026lt;stdio.h\u0026gt; int add(int a,int b); // Function prototype int main(){ int a=1; printf(\u0026#34;%d\\n\u0026#34;,add(a,a)); } int add(int a, int b){ return a+b; } function prototype 안에서의 int a와 main함수 scope안의 int a 는\n중복 되지만 문제 되지 않는 이유는, 서로 다른 inner scope이기 때문에\n서로 영향을 주지 않는다.\nfile : 서로 다른 파일내부의 식별자 block : code block내의 식별자 file scope 와 block 은 다음 예제를 보고 이해해 보자.\n//In add.c #include \u0026lt;stdio.h\u0026gt; extern int test; int add(int a,int b); // Function prototype void main() //main도 main함수의 식별자 이다. { int i=1; //main 함수 code block안에 있는 정수형 식별자 i이다. // 즉 main function 안에 존재 하는 정수형 식별자 이다. int result=0; { // code block int b=10; printf(\u0026#34;i+b: %d\\n\u0026#34;,i+b); } result = add(i,i); //add도 add함수의 식별자 이름이다. printf(\u0026#34;%d\u0026#34;,result); //printf 도 printf함수의 식별자 printf(\u0026#34;%d\u0026#34;,test); } int add(int a, int b){ // add function내부에서 사용하는 함수 a,b 이다. return a+b; } //In sub.c //sub.c로 건너 오면 같은 이름의 식별자도 다른 name space에 존재하기 때문에 // 서로 영향을 주지 안는다. #include \u0026lt;stdio.h\u0026gt; static int result =0; //여기에 왜 static을 붙였을까? int test=100; int sub(int a,int b); void main() { int i=1; // add.c를 벗어난 다른 name space에서 사용된 같은 이름의 식별자이다. result = sub(i,i); printf(\u0026#34;%d\u0026#34;,result); } int add(int a, int b){ return a-b; } 위의 코드를 살펴 보면 특이 부분이 있다.\nstatic add.c 와 sub.c의 전역 변수중에 이름이 같은게 있다.\n두변수의 이름은 모두 result 이다. 하지만 해당 코드들은 실행시 에러가 발생하지 않는다.\n왜일까?\n예상 대로 라면 같은 이름의 전역변수는 data segment에서 충돌될것이다.\n하지만 전역변수에 staitc을 붙여 주면, 해당 전역 변수는\n해당 파일의 file scope를 벗어나지 못한다.\n때문에 sub.c의 result 는 sub file의 file scope 가 끝남과 동시에\n메모리에서 해제 된다.\nextern add.c 를 보면 extern int test 를 하고 있다.\n뭘까? test 식별자는 add.c file scope 내에는 존재하지 않는다.\n하지만 sub.c 를 보면 전역 변수로 int test=100 이 존재 한다.\n그럼 이제 어느정도 감이 왔을겄이다.\nextern은 file scope를 벗어나서 다른 file scope내에 있는\n전역 변수를 사용하고자 할때 쓰는것.\nextren 은 다른 file scope 의 전역 변수의 사용을 가능케 한다.\n그럼 이제 예시를 살펴보자.\n//t1.c #include \u0026lt;stdio.h\u0026gt; #include \u0026#34;t.h\u0026#34; extern int test; int main(){ printf(\u0026#34;%d\\n\u0026#34;,test ); test+=1; printf(\u0026#34;%d\\n\u0026#34;,test ); add(); } //t2.c #include \u0026lt;stdio.h\u0026gt; #include \u0026#34;t.h\u0026#34; int test=100; void add(int i){ printf(\u0026#34;%d\\n\u0026#34;,test ); } //t.h void add(); t1.c 는 t2.c 의 test를 가져 와서 출력후 1증가 한후 다시 출력해준다.\n그리고 add 함수를 호출하는데, 이 함수는 t2.c에 있다.\n그럼 t1.c에서 1을 증가 시켰던 test값이 t2.c에서 그대로 적용되는지 확인해 보는 예제이다.\n그럼 결과를 살펴 보자\n100 101 101 물론 t1.c에서 증가 시켰던 test의 값이 t2.c에서도 그대로 적용되었다.\n이러한 현상을 linkage 라고 한다.\n메모리에는 어떻게 저장되어 있을까?\ndata segment 에 저장되어 있다.\nextern으로 선언자를 지정해도 결국 초기화된 전역 변수 이므로 data segment에 저장된다.\n이제 scope에 대해 어느정도 이해를 했을 것이다.\n추후 내용에 Parameter 와 Argument 에 대한 내용이 나온다.\n이둘의 관계처럼 선언자와 식별자의 관계는 중요하다.\n상수, 변수 변수(Variable) : 정수, 실수, 문자, 문자열 등의 형태를 갖춘 가변 데이터.\n변수는 두가지 특징을 갖는다.\nScope - 특정 code block 안에서 실행, 참조된다.\nLife time - 특정 code block안에서 존재하고 벗어나면 소멸 한다\n일반 변수\n일반적으로 사용하는 자료형에 해당하는 대입 변수이다.\n//일반 변수 = 데이터 int a=4; double b=3.2; char p=\u0026#39;a\u0026#39;; 포인터 변수\nint temp_int=4; double temp_d=3.4; //포인터 변수 = 주소 int *a=\u0026amp;temp_int; int *c=\u0026amp;3; double *b=\u0026amp;temp_d; char *p=\u0026#34;abc\u0026#34;; 상수(Constant) : 값이 바뀌지 않는 데이터를 상수라 한다.\n변수 상수화\n변수 앞에 const를 붙여주면 상수가 된다.\nconst int a; =\u0026gt; 상수로 정해진 변수는 값을 바꾸는것이 불가\n매크로를 통한 상수화\n# define 을 통해서 상수를 만들수 있다. 매크로는 전처리기에 의해 변환 되고\n전역변수 처럼 사용 가능 하다. 위치는 헤더 파일 제일 밑에 사용해주면된다.\n#include \u0026lt;stdio.h\u0026gt; #define pi 3.14 #define poweroftwo 2 ex) 정수 상수 =\u0026gt; -2,-1,0,1,2,3\u0026hellip;.\n​ 실수 상수 =\u0026gt; -1.2, -0.2231, 3.14\u0026hellip;\n​ 문자 상수 =\u0026gt; \u0026lsquo;1\u0026rsquo;, \u0026lsquo;2\u0026rsquo; ,\u0026lsquo;ㄱ\u0026rsquo;,\u0026lsquo;A\u0026rsquo;,\u0026lsquo;a\u0026rsquo;\u0026hellip;\n​ 문자열 상수 =\u0026gt; \u0026ldquo;abc\u0026rdquo;, \u0026ldquo;ABC\u0026rdquo;\u0026hellip;\n정수형 상수의 컴파일후의 비트 형태\n정수형 상수는 컴파일되면 4바이트 크기의 2진수 형태로 변환 된다.\n예를 들어 정수 13이 컴파일 되면, 나머지 비트는 0으로 채워 지게 됩니다.\n0000 0000 0000 0000 0000 0000 0000 1101 \u0026lt;--MSB LSB--\u0026gt; 여기서 중요한 개념이 나옵니다. MSB와 LSB가 무었인가\nMSB는 Most significant bit 라 하며 가장 왼쪽의 비트는 전체 값에서 가장 큰 비중을 차지한다.\nLSB는 Least significant bit 라 하며 가장 오른쪽의 비트는 전체 값에서 가장 작은 비중을 차지한다.\n예를 들어,\n1000 0000(128) \u0026gt; 0111 1111(127) 극단 적인 예로 128과 127의 차이를 보면된다. 뇌피셜로는 비트가 1인 비트가 많을수록 숫자가 크다. 물론 맞는 말이지만 모든경우에 해당되지는 안는다. 위의 예처럼 오른쪽 7비트가 전부 1인 값보다 가장 왼쪽 1비트가 1인 값이 크다. 그렇다면, 비트가 큰값으로 움직일때는 MSB의 움직임을 보면될것이다. 만약 작은 단위로\n비트가 움직여야 한다면, LSB를 보면 되는데 이때 한가지 예를 살펴봐야 한다.\n(0x8E)1000 1101(141) --\u0026gt; (0x8D)1000 1110(142) 1가장 왼쪽 LSB의 1비트 움직임을 보일때 Niddle단위로 비트가 이동한다고 한다. 실수형 상수의 컴파일후의 비트 형태\nsingle, double, quad 세가지 형태가 있고, 그중에서 double형태를 살펴본다.\n0 00000000000 00000... 부호비트(1) 지수 저장 비트(11)\t소수 저장 비트(52) =\u0026gt; 8byte(64bit) //소소부 1 1 1 ... 2^-1 2^-2 2^-3 ... 위의 예시처럼 소수부는 2의 -n제곱의 형태를 띈다. 때문에 소수르 사용한 계산은 정확하지 안을수 있다. 2^-1 =\u0026gt; 1/2 이고 0.5이다. 2^-2 =\u0026gt; 1/4 이고 0.25이다 2^-3 =\u0026gt; 1/8 이고 0.125이다. 소수부분이 5의 나머지 연산으로 처리 되는점을 보면, 0.3 같은 표현은 다루기 힘들다. 강제 형변환 vs 자동 형변환 자동 형변환\n자동 형변환은 더 작은 자료형에서 더큰 자료형으로 assign할때 발생.\nint a=8,b=2; double b=a/b; printf(\u0026#34;%f\\n\u0026#34;,b); //실행결과 4.000000 우리가 원하는 값은 4였을 터이지만 실제 출력값은 4.000000이 나온다.\ndouble은 8바이트를 할당하고 지수부분에 11비트 소수부분이 52비트를 저장한다.\n때문에 지수부분 4와 소수부분 52비트 즉 6바이트 0.000000 이기 때문에\n소수점 밑으로 6자리를 표기한다.\n강제 형변환\n위와 같은 경우에서 원하는 값인 2로 표기할수도 있다.\nprintf(\u0026#34;%d\u0026#34;,(int)b); //실행결과 4 물론 강제 형변환은 포인터 에서도 많이 쓰인다.\n함수 포인터, byte access 를 참고.\n전달 인자(Argument)와 매개변수(Parapeter) int *a = \u0026amp;temp; 매개변수 전달인자 int add(int *a){} 매개변수 add(\u0026amp;temp); 전달인자 LIttle and Big Endian int a=1; =\u0026gt; 0x 00 00 00 01 Little Big |___01___|___00___| 0x7fff2ab9 |___00___|___00___| |___00___|___00___| |___00___|___01___| |________|________| 시스템마다 little endian, big endian 두가지 방법중 하나를 채택한다.\n하지만 다양한 종류의 컴퓨터들끼리 통신을 해야 하는데, 이때 데이터를 읽어서 저장하는 방법이\n다르다면 문제가 생긴다 때문에, 한가지로 통일해 줘야 한다.\n이떄 사용 되는 방법이 Byte Access이다\nDigital logic circuit(DLD) Bitwise 특정 비트 on/off\n예를들어 Led의 한부분을 껏다 켯다 하는 동작이 발생할수도 있다.\nLED와 연결되어 있는 특정 주소의 값에 한 비트를 on/off해야 동작 할때\n다음과 같은 비트 연산으로 수행 가능하다.\nres =\u0026gt; 0x 1111 0111 res\u0026amp;=~(0x01 \u0026lt;\u0026lt; 7); 0111 1111 (~res) \u0026amp; 1111 0111 (res) _____________ 0111 0111 =\u0026gt; 가장 오른쪽 1비트만 off가 되었다 이처럼 특정 비트를 on/off할때에 ~(not)과 \u0026amp;(and)연산이 필요하다. Basic of Loop 프로그래밍중에 실수와 의도에 의해서 무한 루프가 발생하거나 써야 하는 일이 있다.\n의도치 않은 무한 루프\n대부분 세미 콜론이나, 조건식을 잘못 써서 발생한다.\n//case1 int val=0; while(val\u0026lt;5); =\u0026gt; while문의 내용이 시작하기 전에 세미콜론을 사용하였다. { printf(\u0026#34;a\\n\u0026#34;); } 결과는 물론 무한 루프이다. while 문의 조건식을 잘못 적용 하였고 루프에 빠지게 될텐데, while 문의 내용이 시작하기 전에 세미 콜론으로 마무리 했다. 때문에 printf 는 while 문의 무한 루프 때문에 출력이 되질 않는다. //case2 int val=0; for(val=0;val\u0026lt;5;val++); =\u0026gt; for문의 내용이 시작도 전에 세미콜론이 찍혔다. { printf(\u0026#34;aa\\n\u0026#34;); } 이번엔 어떨까? aa가 5번 찍히는가? 아니다. for문의 내용이 시작도전에 세미콜론이 있기 때문에, for문만 5번 돌아가고나서 printf 는 한번만 사용된다. 즉 aa는 한번만 출력되는것!! 그럼 중괄호(\u0026#39;{}\u0026#39;)의 역할은 뭘까? 보통 중괄호는 코드의 영역을 나타낸다. 의도한 루프\nFirmware 등의 기본 동작에 필요한 경우가 있다. 혹은 지연 시간을 위해 고의적으로 넣는 경우도\n있는데, 지금은 펌웨어에서 필요로 하는 Polling 방식에 대해 기술해 보려 한다.\nPolling\n폴링방식은 하나의 프로그램에서 상태를 주기적으로 체크하여, 조건에 해당될때 송수신하는 목적이다.\n예를 들어 보자, 세탁기 같은 내장프로그램을 봤을때, 시작과 종료 후에 다시 시작을 눌러도\n기계는 작동한다. 이는 폴링 방식에 의해서 주기적으로 루프를 돌고 있기 때문이다.\nwhile(1){ 조건1 조건2 조건3 ... } 프로그램은 계속해서 주기적으로 조건이 만족한 명령을 수행후 다시 while 문 의 처음으로 돌아와서 처리한다. Interrupt\n인터럽트 방식은 특정 이벤트가 발생했을때 동작을 멈추고 해당 이벤트를 처리하는것\n주로 OS를 대표적인 예로 들수 있다. 만약 종료라는 이벤트가 발생한다면, cpu는 그즉시\n모든 연산을 멈추고 종료를 처리한다.\n물론 인터럽트 방식은 예기치 못한 상황에 대비할때 좋은 방법이다.\nArray 배열은 자료형의 집합이라고 생각할수 있다. 배열은 메모리 Stack 에 할당되며, main부분에 사용된\n배열은 프로그램 시작에 생성되고 종료시 삭제 된다. 하지만 함수 부분에서 사용한 배열은 함수 종료와 함께 사라진다. 때문에 동적할당의 필요성이 대두 될때가있다.\nint arr[5]; 여기서 int 는 배열의 자료형이고 arr은 배열명이다. 이제는 배열을 활용하는법을 알아야 한다.\n배열에 접근해서 직접 자료를 처리해서 프로그래밍을 해야한다.\n때문에 배열에 접근 하는 방법을 알필요가 있다.\n직접 접근(Direct access)\n배열에 직접적으로 접근하는 방법이다.\narr[0]=5; printf(\u0026#34;%d\\n\u0026#34;,arr[1]); 간접 접근(Indirect access)\n*(Asteric)에 관한 표현이 나오는데 이는 포인터의 개념이다.\n해당 주소의 값을 가져 온다고 생각 하면 된다.\n*arr=5; printf(\u0026#34;%d\\n\u0026#34;,*(arr+1)) 이제 배열을 사용하면서 주의해야 할사항들이 있다.\nint arr[5]; arr != arr[0] 배열의 시작 주소 배열의 0번째 값 *arr == \u0026amp;arr[0] 배열의 시작 주소 배열의 0번째 주소 배열의 시작 주소는 배열의 0번째 주소화 일치한다 arr이라는 배열명은 수정 불가능한 포인터 상수이다.\n만약 inr arr[5]; 선언후, arr의 주소가 0x2000번지 일때 0x3000번지로 수정하는것 불가!\n배열은 한번 스택에 할당 되면 고정된다.\n배열의 각 요소 들간의 차이는 배열의 자료형의 크기에 달려 있다.\narr[0] -\u0026gt; arr[1] -\u0026gt; arr[2] 0x0200 4byte 0x0204 4byte 0x0208 Shallow copy(얕은 복사) vs Deep copy(깊은 복사) Shallow copy(얕은 복사) Deep copy(깊은 복사) Function 함수는 3가지 단계이자 요소가 필요하다.\n함수의 원형\nmain문 시작전에 전저리 부분 다음에 기술해줘야 한다.\n#include \u0026lt;stdio.h\u0026gt; void display(); int add(int a,int b); 위의 예시처럼 원형을 기술할 때에는 매개변수부분은 써줘도되고 안써줘도 된다.\n함수의 호출\nint main(){ int res=0; int a=3,b=10; display(); res=add(10,20); printf(\u0026#34;%d\u0026#34;,add(a,b)); } 함수의 정의\nvoid display(int *ptr,int idx){ for(int i=0;i\u0026lt;idx;i++) printf(\u0026#34;%d has %d\\n\u0026#34;,i,*(ptr+i)); } Pointer 포인터라 하면 c언어의 포기하는 break point일지도 모른다. 하지만 포인터를 활용 하지못한다면\n다양항 프로그래밍이 불가능 하다 포인터 부분은 자다가도 벌떡 일어나서 정의할수 있어야한다.\n주소 연산자(\u0026amp;)\n\u0026amp;(Ampersand) 엔드 연산자, 주소연산자 등등으로 불린다. 정확한 명칭은 Ampersand이다.\n주소 연산자는 해당 변수, 함수 등의 주소를 확인할수 있게 합니다.\n주소에 대해 생소할수 있습니다. 프로그램 실행시에 컴파일러에 의해 메모리에 각 영역에 따른 변수나 함수 등이 할당됩니다. 첫번째 예는 변수 입니다.\nLocal \u0026amp; Gloal Variable\nLocal Variable은 지역 변수라고도 하며, 해당 함수 범위 내에서만 사용할수 있는 변수입니다.\nGlobal Variable은 전역 변수 라고도 하며, 코드 내의 그 어떤 부분에서도 사용할수 있습니다.\n이제 두변수의 사용 예를 살펴보려 합니다.\nint global_b=10; int main(){ int local_a=10; static int global_a=20; printf(\u0026#34;In main funtion local variable local_a has %d\\n\u0026#34;,local_a ); printf(\u0026#34;In main funtion local variable local_a address %p\\n\u0026#34;,\u0026amp;local_a ); printf(\u0026#34;In main funtion static global_a has %d\\n\u0026#34;,global_a ); printf(\u0026#34;In main funtion static global_a address %p\\n\u0026#34;,\u0026amp;global_a ); printf(\u0026#34;In main funtion global variable global_b has %d\\n\u0026#34;,global_b ); printf(\u0026#34;In main funtion global variable global_b address %p\\n\u0026#34;,\u0026amp;global_b ); local_func(local_a,global_a); point_func(\u0026amp;local_a); printf(\u0026#34;%d\\n\u0026#34;,local_a); } void local_func(int a,int b){ printf(\u0026#34;In local funtion printf local_a has: %d address: %p\\n\\n\u0026#34;,a,\u0026amp;a); printf(\u0026#34;In local funtion printf global_a has: %d address: %p\\n\\n\u0026#34;,b,\u0026amp;b); printf(\u0026#34;In local funtion printf global_b has: %d address: %p\\nbut not using parameter\\n\u0026#34;,global_b,\u0026amp;global_b); a=10; printf(\u0026#34;a=10;\\nlocal_a change 10 to 20 not using poiter\\n\u0026#34;); } void point_func(int *p){ *p=100; } 메인 함수에서 local_a와 global_a를 선합니다. 하지만 global_a는 앞에 static이 붙습니다.\n왜일까요? 바로 전역 변수 처럼 사용하기 위합입니다. 변수 앞에 static을 붙이면 전역 변수 저장 영역인 data영역에 할당됩니다. 마치 전역변수 처럼요.\nIn main funtion local variable local_a has 10 In main funtion local variable local_a address 0x7ffeed43898c In main funtion static global_a has 20 In main funtion static global_a address 0x1027c801c In main funtion global variable global_b has 10 In main funtion global variable global_b address 0x1027c8018 //into local_fun In local funtion printf local_a has: 10 address: 0x7ffeed43894c In local funtion printf global_a has: 20 address: 0x7ffeed438948 In local funtion printf global_b has: 10 address: 0x1027c8018 but not using parameter a=20; local_a change 10 to 20 not using pointer //end local_func after local_func, a has 10 local_a passing by point_func //into point_func In point_func change local_a 10 to 100 //end point_func after point_func, Now local_a has 100 local_func에서 local_a의 값을 변화 시키려 했지만 메인 함수에서 local_a의 값을 출력해보니 그대로 입니다. 왜일까요?\nlocal_fun는 전달 인자를 int a로 받았습니다. 이러한 매개변수는 값의 복사가 발생합니다.\n바로 call by value 의 상황이죠. 즉, 메모리에 변수의 복사가 발생하고, 이 변수는 함수의 종료와\n동시에 바로 삭제 됩니다.\ncall by value int main(){ int local_a=10; static int global_a=20; local_func(local_a,global_a); } void local_func(int a,int b){ =\u0026gt; 변수의 값을 함수의 변수로 복사하는것입니다. a=20; =\u0026gt;함수 내부의 변수는 함수의 시작과 동시에 생성되고 종료와 함께 반환됩니다. b=400; } Call by value는 매개변수로 값을 받아와 함수의 메모리로 복사해오는것 입니다.\n그래서 함수내부에서 아무리 값을 바꿔도, 실상은 함수로 복사된 값을 변환하는 것이므로,\n본래의 전달인자로 들어온 변수는 그대로입니다.\n그럼 본래 변수의 값을 바꾸려면 어떻게 해야할까요?\ncall by reference(call by address) 사실 C에서는 Call by reference 가 완벽하게 작동하지는 않습니다.\n아이라 폴과 알켈리의 A Book on C 에서 P.252 의 call by reference 를 언급하자면,\nHow the used of addresses of variables as arguments to functions can produce\nthe effect of \u0026ldquo;call by reference\u0026rdquo;.\n라고 명시되어 있습니다.\n다른 언어에서는 call by reference의 mechanism이 존재 하지만 C에서는 존재 하지 않습니다.\n하지만 비슷한 동작을 할수 있게끔 만들어줄수는 있습니다. 일단 예제를 보죠.\nint main(){ int a=3, b=7; printf(\u0026#34;a: %d b: %d\\n\u0026#34;,a,b); swap(\u0026amp;a,\u0026amp;b); printf(\u0026#34;a: %d b: %d\\n\u0026#34;,a,b); } void swap(int *a, int *b){ int temp; temp=*a; *a=*b; *b=temp; } 이전의 call by value에서는 함수에서의 값의 복사 때문에 본래의 변수의 값은 변하지 안았습니다.\n근데 이번 함수 swap은 매개변수(int *a)가 포인터이며, 전달인자(\u0026amp;a)를 변수의 주소를 받고있습니다.\n결과는 어떨까요?\na: 3 b: 7 a: 7 b: 3 값의 변화가 있습니다. 뭘까요?\n바로 call by reference의 효과 입니다. 변수의 주소를 전달 받아 직접 값을 바꾸는 것이죠.\n하지만 A Book on C에서 언급했던 완벽한 call by reference가 아닌 이유가 여기있습니다.\n사실상 주소를 전달받아 값을 바꾼 다는 것은, 주소의 값을 call by value한다는 것이죠.\n잘 이해가 안가는데 다음 예제를 살펴보죠.\n//출처 : 나무위키 void testFunc(int* fptr) { fptr = NULL; } int main(void) { int num = 12; int* ptr = \u0026amp;num; printf(\u0026#34;%d\\n\u0026#34;,*ptr ); testFunc(ptr); printf(\u0026#34;%d\\n\u0026#34;,*ptr ); return 0; } testFunc라는 함수는 포인터를 인자로 받아 포인터의 값을 NULL로 바꿉니다.\n자 그러면 코드를 어떻게 동작을 할까요?\n메인 함수에서 ptr은 num 의 주소를 갖고 있습니다. 그리고 그 주소에 대한 값을 testFunc에\n전달 하고 있습니다. 그럼 testFunc를 완료 하고 나면 ptr에는 NULL이 저장 될테고,\n더이상 num을 가르킬수 없습니다. 과연 결과도 그럴까요?\n12 12 예상과는 다르게 num의 값은 변하지 안았습니다.\n이게 뭘 뜻하는 걸까요?\nC에서는 주소값을 전달 받아 해당 주소로 이동후 값을 변화 할수 있지만, 그 과정에서 정확히는\n전달 인자로 포인터 변수를 전달한다. 즉, 포인터 변수 ptr을 전달 하므로 이는 call by value\n라고 할수 있다. 그러므로 C에서는 call by reference는 없다고 정의 할수 있다.\n다시 말해 함수에 인자를 받아 인자값 자체를 변화 시키는 것은 불가능 하다, 하지만 인자값의 주소로 건너가 그 값을 바꾸는 것은 가능하다, 하지만 이것은 값의 의한 복사 call by value 이다.\n하지만 call by value 로 전달하는 value 가 주소값이 이기 때문에 call by value 라고 부는것!!\n결론은 call by reference가 아니라 call by address or call by pointer\n라고 불러야 한다.\n그럼 진정한 call by reference는 어디에 존재하는 것이가?\n바로 c++부터 그 개념이 등장한다.\ncall by reference c++ 에서는 참조 변수 라는 것이 존재한다.\nint a=10; int \u0026amp;b=a; c에서는 \u0026amp;(ampersand)는 주소 값의 반화을 의미했다. 하지만 c++에서는 참조 매개변수가 존재 하며\n값을 복사 하는 call by value 가 아닌 주소 값을 받아와 참조에 의한 접근이 가능하다.\n다음 c++ 예시를 살펴보자.\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;iostream\u0026gt; void func1(int *q); void func2(int *q); void func3(int \u0026amp;q); int main(){ int a=10; int *point=\u0026amp;a; printf(\u0026#34;a address: %p value: %d \\n\\n\u0026#34;,\u0026amp;a,a); func1(\u0026amp;a); printf(\u0026#34;After func1 a value: %d\\n\u0026#34;,a); printf(\u0026#34;\\n===================================\\n\u0026#34;); printf(\u0026#34;point address:%p point has : %p value: %d \\n\u0026#34;,\u0026amp;point,point,*point ); func2(point); printf(\u0026#34;After func2 a value: %d\\n\u0026#34;,a); printf(\u0026#34;\\n===================================\\n\u0026#34;); printf(\u0026#34;Now we declaration int \u0026amp;ref_point=a\\n\u0026#34;); int \u0026amp;ref_point=a; printf(\u0026#34;point address:%p point has : %p value: %d \\n\u0026#34;,\u0026amp;point,point,*point ); func3(ref_point); printf(\u0026#34;After func3 a value: %d\\n\u0026#34;,a); } void func1(int *q){ printf(\u0026#34;In Func1\\nNow we change value of a to 100\\nSo q=20;\\nif you think change the value?\\n\u0026#34;); //q=20; printf(\u0026#34;q=20; is error occured\\n\u0026#34;); printf(\u0026#34;q address: %p value: %d \\n\u0026#34;,\u0026amp;q,*q); printf(\u0026#34;a address: %p value: %d \\n\u0026#34;,q,*q); } void func2(int *q){ printf(\u0026#34;In Func2\\nNow we change value of a to 100\\nSo *q=100;\\nif you think change the value?\\n\u0026#34;); *q=100; printf(\u0026#34;q address: %p value: %d \\n\u0026#34;,\u0026amp;q,*q); printf(\u0026#34;a address: %p value: %d \\n\u0026#34;,q,*q); } void func3(int \u0026amp;q){ printf(\u0026#34;In Func3\\nNow we change value of a to 100\\nSo *q=3000;\\nif you think change the value?\\n\u0026#34;); q=3000; printf(\u0026#34;q address: %p value: %d \\n\u0026#34;,\u0026amp;q,q); } 내용이 복잡하다. 우선 각 함수들이 뭘하는 지를 살펴보자.\nfun1~3까지의 함수가 존재하는데,\nfunc1\n//일반 적인 c에서의 call by address의 예시이다. void func1(int *q){ printf(\u0026#34;In Func1\\nNow we change value of a to 100\\nSo q=20;\\nif you think change the value?\\n\u0026#34;); //q=20; =\u0026gt; 진정한 call by reference가 되려면 주소로 받아온 값을 바꿀수 있어야한다. printf(\u0026#34;q=20; is error occured\\n\u0026#34;); printf(\u0026#34;q address: %p value: %d \\n\u0026#34;,\u0026amp;q,*q); printf(\u0026#34;a address: %p value: %d \\n\u0026#34;,q,*q); } func1은 매개변수로 포인터 변수 를 사용 하며, 전달 인자로 주소를받는다.\n만약 q=20을 하면 어떻게 될까?\n사실상 main함수에서 int *point=\u0026amp;a; 라고 선언했다는 것은\n//예를 들어 변수 q는 0x2000에 존재 하며 a변수는 0x1000에 있다고 치자. point == \u0026amp;a ==0x1000 \u0026amp;point == 0x2000(address of q q변수의 주소) *point == a(a의 값 10) 이제 위의 내용을 머리속에 넣고 정신 단디 차리고 하나씩 해석해 보자.\n먼저 func1에에서 전달 인자로 \u0026amp;a를 전달 했고 *q 포인터 변수로 받았다.\n이때 무슨일이 생길까?\n//In func1 //메인 함수에서 a의 주소를 전달 했다. //그러면 func1함수에서는 함수 시작과 동시에 int *q에 대한 변수 공간을 생성한다. //위에서 a변수의 주소는 0x1000이였다. 그렇다면 함수로 a의 주소를 전달하고 나서도 //그래도 a의 변수를 참조하여 접근이 가능할까? //진정한 call by reference 라면 받아온 주소로 바로 접근이 가능해야할것이다. //===============컴파일 결과============== a address: 0x7ffee1f8173c value: 10 In Func1 Now we change value of a to 100 So q=20; if you think change the value? q=20; is error occured q address: 0x7ffee1f816e8 value: 10 a address: 0x7ffee1f8173c value: 10 After func1 a value: 10 결과를 살펴 보자.\n우리가 원하는 결과는 받아온 a의 주소와 매개변수 q의 주소가 같아야한다.\n근데 보아하니 주소값은 두개가 존재한다. 이건 뭘 뜻할까?\nfunc1이 실행되는 순간 int *q 에 대한 변수 공간이 마련된다.\n이곳은 주소는 0x7ffee1f816e8 이다. 그리고 해당 주소한에 들어있는 값이 0x7ffee1f8173c(a의 주소)이다.\n즉 값에 의한 복사인 call by value 로 인해 a의 주소 값을 받아와 접근한다는것이다.\n때문에 q안에는 a의 주소값인 0x7ffee1f8173c 이 들어 있고 ,\nq=20; 이라는 재할당을 한다는 것은 q가 갖고는 있는 값을 20 으로 바꾼 다는 것이고,\nq는 포인터 변수 이기 때문에 20의 주소에 있는 값을 가져와야 한다고 해석한다.\n하지만 마음대로 메모리를 접근할수는 없다 컴파일 단계에서\n이런 위험한 코드는 막아 버리기때문에 에러를 토해낸다.\n결국 func1은 call by value 에 의한 함수 내부의 포인터 변수 공간에\n전달 인자로 받아온 a의 주소를 저장 하여 a의 값에 접근 한다는것이다.\n진정한 call by reference 는 실패 했다.\n그럼 이제 두번째 함수 func2 를 살펴보자.\nfunc2\nvoid func2(int *q){ printf(\u0026#34;In Func2\\nNow we change value of a to 100\\nSo *q=100;\\nif you think change the value?\\n\u0026#34;); *q=100; printf(\u0026#34;q address: %p value: %d \\n\u0026#34;,\u0026amp;q,*q); printf(\u0026#34;a address: %p value: %d \\n\u0026#34;,q,*q); } 사실상 func1과 별 차이가 없다. 하지만 func2에서는 a의 변수를 포인터로 접근하여\n값을 변경하기 때문에 a값의 변화가 생긴다.\n하지만 위에서 봤듯이 이는 call by value 에 의한 call by reference 를 흉내 낸것이다.\n우리는 이러한 과정을 call by address or call by pointer 라고 부른다.\n그럼 진정한 call by reference 는 어떻게 해야 볼수 있을까?\n위에서 데니스 리치 의 말을 언급 하면 C에서는 call by reference 는 없다 .\n하지만 C++에서는 참조 변수라는것이 존재한다.\n이제 func3를 살펴 보자.\nfunc3\nint main(){ int a=10; ... int \u0026amp;ref_point=a; func3(ref_point); } void func3(int \u0026amp;q){ printf(\u0026#34;In Func3\\nNow we change value of a to 100\\nSo *q=3000;\\nif you think change the value?\\n\u0026#34;); q=3000; printf(\u0026#34;q address: %p value: %d \\n\u0026#34;,\u0026amp;q,q); } 우리가 알던 C의 문법에서는 볼수 없는 변수 선언이 있다. 이게 뭘까 싶다.\n일단 실행 결과를 살펴 보자.\n=================================== Now we declaration int \u0026amp;ref_point=a ref_point address:0x7ffeee79373c ref_point has : 100 In Func3 Now we change value of a to 3000 So q=3000; if you think change the value? q address: 0x7ffeee79373c value: 3000 After func3 a value: 3000 정말 신박함의 극을 달린다 할수 있다. int \u0026amp;ref_point=a 참조 변수에 a의 주소 값도 아닌\na를 할당 하고 있다. 그리고 ref_point의 주소를 출력해보니 ref_point의 별도의 변수 공간이 아닌\na의 주소를 출력하고 있다.\n그럼 함수 안에서는 어떨까?\n물론 q 변수에 대해서도 별도의 변수 공간을 할당하지 않는다.\n함수내에서도 a의 주소 를 출력하고 있으며, q로 값을 3000으로 재할당한후,\n함수가 종료되고 나서 a의 값을 출력해 보니 3000으로 바뀌어 있다.\n진정한 call by reference 란 값에 의한 복사를 통해 변수에 접근하는 것이 아닌\n값의 복사 없이 변수 자체에 접근 할수 있어야 한다는 것\n그래서 데니스 리치는 call by reference 에 대해\n\u0026hellip;\u0026ldquo;call by reference\u0026rdquo;\u0026hellip;, in which the called routine has access to the original argument, not a local copy.\n\u0026ldquo;호출 과정 내에서 지역 값의 복사 없이 원본 인자에 접근 할수 있어여하 한다\u0026rdquo; 라고 말한 것이다.\n","date":"June 11, 2018","hero":"/images/default-hero.jpg","permalink":"https://codex-devlab.github.io/posts/study/sub-programming-language/system-programming-ftw-implementation/","summary":"\u003ch1 id=\"c언어\"\u003eC언어\u003c/h1\u003e\n\u003cp\u003e프로그램이란? 컴퓨터에서 실행될때 특정 작업을 수행 하는 일련의 명령어들의 모음이다.\u003c/p\u003e\n\u003ch2 id=\"소프트웨어-공학\"\u003e소프트웨어 공학\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e요구사항 분석\n자료형 정의 등등\u003c/li\u003e\n\u003cli\u003eFlow chart 설계 및 구현(pseudo code)\u003c/li\u003e\n\u003cli\u003e코드 구현\u003c/li\u003e\n\u003cli\u003e실행\u003c/li\u003e\n\u003cli\u003e테스트\u003c/li\u003e\n\u003cli\u003e유지보수\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"cpu-구조\"\u003eCPU 구조\u003c/h2\u003e\n\u003cp\u003eControl unit\u0026lt;-\u0026gt;ALU\u0026lt;-\u0026gt;Processor resister(R1,R2,R3\u0026hellip;)\n위의 3가지 장치들이 Internal bus로 연결되어 통신한다.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eALU(Arithmetic logic unit )\u003c/p\u003e\n\u003cp\u003e산술 논리 장치 : 실질적으로 산술, 논리 계산을 수행함.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eResister\u003c/p\u003e\n\u003cp\u003eCPU의 자체적인 메모리저장 기능.\u003c/p\u003e\n\u003cp\u003eMemory buffer register(MBR)\u003c/p\u003e\n\u003cp\u003e​\tI/O로 보내지거나 메모리에 저장될 Word 혹은 I/O나 메모리로 부터 Word를 받는 것.\u003c/p\u003e","tags":["Study","C","Theory"],"title":"C언어 스터디"},{"categories":null,"contents":" root Fire Fox Update GIT Installation and Setting Git multi user ssh setting Autojump Installation vim Installation and Setting vim scheme vim Plugin Install youcompleteme Airline ctag Mouse setting root $sudo passwd root Fire Fox Update $sudo apt-get firefox $sudo apt-get update GIT Installation and Setting 설치 $sudo apt install git 초기 설정 $git config --global user.name \u0026#34;kimleepark\u0026#34; $git config --global user.email kimleepark@gmail //$git config -l $ssh-keygen //.ssh 폴더안에 id_rsa.pub 의 내용을 Github ssh에 등록해준다. $git init $git log //git 작업 기록 $git status //git 현재 현황(add 되거나, 추적 가능한 파일 현황) $git add //-u 업데이트된 항목을 추적해서 add함, --all,-A 폴더내 모든 항목을 add함 $git commit $git push //local -\u0026gt; remote 저장소로 이동 $git pull //원격 저장소에 있는 변경 사항을 가져와서 merge함 Git 시작하기 를 참고 하시면서 작업 하시면 좋습니다.\n.gitignore 에 a.out, *.o, *.txt 등 을 추가하여 불필요한 형식은 걸러서 올리는것이 작업하기 편합니다.\npush 할때마다 아이디와 비밀번호 요구 일단 이유를 알아야 하니 여기참고해 주세요. ssh key 생성부터 설정\n\u0026gt;$ls -al ~/.ssh \u0026gt;//기존에 키가 존재 하는지 체크해 주세요. 아마 대부분 이미 ssh-keygen으로 만드셨을겁니다. \u0026gt;$ssh-keygen -t rsa -b 4096 -C \u0026#34;your_email@example.com\u0026#34; \u0026gt;//이후 나오는 설정 \u0026#34;아~ 잘모르궤쎠 엔터 누르롸눈거 가튠뒈 잘 모르게쒀 걍 무조건 엔터\u0026#34; \u0026gt;//뭐 순서대로 저장할 폴더, 패러프레이즈 에 대한 방식이니 그냥 엔터 눌러주세요. \u0026gt;$cat ~/.ssh/id_rsa.pub \u0026gt;//전부 복사해서 github sshkey 에 등록해주세요 \u0026gt;//등록후 조금 시간이 지나야 인증이 되니까 그동안 reboot해주세요 \u0026gt;$ssh -T git@github.com \u0026gt;//Hi~~어쩌구 나오면 ssh에 등록되고 연결이 된거에요. 그리고 대부분 아마 push할때 마다 id 와 pass를 물어보는 경우는 git clone시에 ssh가 아닌 http로 clone을 해서 그렇습니다. 그냥 간단하게 원래있던 폴더 삭제후 clone할때에 ssh로 clone하시면 id\u0026amp;pass 안물어봄.\n기존 로컬 저장소와 원격 저장소 연결 1.원격 저장소를 먼저 만들고 그냥 Clon $git clone https://원격저장소.git 2.기존로컬 저장소를 원격저장소와 연결 Github에서 resipotory를 먼저 만들어야 한다. $mkdir \u0026#34;resipotory와 같은 이름\u0026#34; //resipotory 이름은 foo라고 가정한다. $cd foo $git init //빈저장소를 만드는것 $git remote \u0026lt;name\u0026gt; \u0026lt;https://원격저장소.git\u0026gt; //name 간단하게 push할때마다 사용하는 브랜치 이름이다. $git remote show \u0026lt;name\u0026gt; //분명 HEAD 브랜치 : (unknown) 이라고 나올것이다. $git push \u0026lt;name\u0026gt; master Git multi user ssh setting 현재 사용하는 Git 계정이 두개입니다. 뭔가 생각에는 계정이 두개 있어도 한번 만들어져 있는\nssh key를 사용해도 될것 같지만, 이미 사용한 ssh key를 다른 계정에 등록하려고 하면\nkey is already used.라고 나옴니다. 때문에 추가 계정을 위한 ssh key가 필요합니다.\n먼저 .ssh 폴더안의 파일을 보면 이해가 빠릅니다.\n$cd ~/.ssh . ├── config -\u0026gt; 여러개정을 연결하기 위한 cofing ├── id_rsa ├── id_rsa.pub -\u0026gt; 원래 계정의 ssh key ├── id_rsa_blog └── id_rsa_blog.pub -\u0026gt; 추가 계정의 ssh key 일단 추가 계정을 위한 ssh key를 생성해야 합니다.\n$ssh-keygen -t rsa -C \u0026#34;username@gmail.com\u0026#34; //새 계정의 이메일 주소 Generating public/private rsa key pair. Enter file in which to save the key (/Users/Edwardson/.ssh/id_rsa): id_rsa_project //project는 임의로 작명해 주세요. ... $ssh-add ~/.ssh/id_rsa_project //ssh key 추가 $ssh-add -l //ssh key 저장 $vi config //이제 ssh가 두개가 됬으니 각각 생성된 key로 동작하도록 연결해줘야 합니다. //cofig를 .ssh안에 만들어줘서 다음 내용을 추가해 주세요. # default account Host github.com HostName github.com User git IdentityFile ~/.ssh/id_rsa # project account Host github.com-project HostName github.com User git IdentityFile ~/.ssh/id_rsa_project $ssh -T git@github.com Hi \u0026#34;원래계정 이름 나옴\u0026#34;! You\u0026#39;ve successfully authenticated, but GitHub does not provide shell access. $ssh -T git@github.com-project Hi \u0026#34;추가계정 이름 나옴\u0026#34;! You\u0026#39;ve successfully authenticated, but GitHub does not provide shell access. //위에 처럼 확인 됬으면 새로운 git계정에 ssh를 연결해서 사용할 준비가 다됬습니다. //이제 이전에 했던 Git hub에 ssh 새로 생성한 키를 등록해 주세요. 자 이제 거의 다됬습니다. 추가 계정의 repository만 remote 해주면 되겠네요.\n$mkdir project \u0026amp;\u0026amp; cd project $git init $git config user.name project $git config user.email project@email.com $git remote add origin git@github.com-project:YOURNAME/REPOSITORY.git //아까 config 에서 설정했던 두번째 계정의 Host 가 github.com-project 였죠 //그래서 remote 로 연결해 줄때도 git@github.com-project로 연결해줘야 합니다. $echo \u0026#34;project\u0026#34; \u0026gt;\u0026gt; readme.md $git add -A $git commit -m \u0026#34;firstcommit\u0026#34; $git push -u origin master Autojump Installation $sudo apt-get install autojump //Ubuntu에는 패키지가 있어서 apt-get으로 설치 가능 $sudo apt-get update $autojump //분명 이부분에서 bach 설정이 안되어 있어서 추가로 작성해달라고 나옵니다. $echo \u0026#34;. /usr/share/autojump/autojump.bash\u0026#34; \u0026gt;\u0026gt; ~/.bashrc //autojump가 터미널 실행시 바로 작동 할수 있게 경로를 추가해 줘야 한다. Autojump 를 참고하시길 바랍니다. 사실 요즘은 너무 간결하게 설치파일이 작성되어 있어서.\n그냥 install.py만 실행해주면 끝입니다\u0026hellip;ㅠㅠ\nvim Installation and Setting 설치 $sudo apt-get vim $sudo apt-get update vim scheme 후\u0026hellip;여러가지 준비해봤습니다. 제대로 모시겠습니다.Vim 설정\nvim scheme 여러가지 테마는 http://vimcolors.com여기에 많습니다. 테마가 들어가야할 위치는 /usr/share/vim/vimXX/colors 여기에 있습니다. vimXX는 Vim마다 버전이 다르기 때문에 본인에게 맞는 버전을 찾아 주면 될것 같네요.\n$sudo wget -O /usr/share/vim/vim74/colors/molokai.vim https://raw.github.com/tomasr/molokai/master/colors/molokai.vim //이런식으로 원하는 테마를 찾아서 바로 넣어주면 됩니다. 설정은 $vi ~/.vimrc colorscheme molokai 이렇게 넣어주면 되겠네요. vim Plugin Install 우선은 번들을 설치해 볼까요? 자세한 사항은 여기를 참고해 주세요\n$git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim $vi ~/.vimrc \u0026#34; set the runtime path to include Vundle and initialize set rtp+=~/.vim/bundle/Vundle.vim call vundle#begin() \u0026#34; alternatively, pass a path where Vundle should install plugins \u0026#34;call vundle#begin(\u0026#39;~/some/path/here\u0026#39;) \u0026#34; let Vundle manage Vundle, required Plugin \u0026#39;VundleVim/Vundle.vim\u0026#39; youcompleteme 자동 완성 플러그인 입니다. 자세한건 여기를 참고해 주세요\n$vi ~/.vimrc Plugin \u0026#39;Valloric/YouCompleteMe\u0026#39; //위 내용 추가후 :PluginInstall $ sudo apt-get install build-essential cmake $ sudo apt-get install python-dev python3-dev $ cd ~/.vim/bundle/YouCompleteMe $ ./install.py --clang-completer //youcompleteme 에서 특정 언어에 대한 자동완성을 지원하기 위해 각 언어의 지원을 받아야한다. //여기서 C 언어에 대해 지원하고 싶으면 ./install.py 할때 --clang-completer를 추가해 준다. //귀찬으면 그냥 -all 간혹 문제가 생길수 있다. vim에서 ycm_extra_conf.py이게 없다고 에러를 토해낼때!! 여기를 참고해도 되고 다음 처럼 해줘도 된다. let g:ycm_global_ycm_extra_conf = \u0026lsquo;~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py\u0026rsquo; 추가 cd /.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/ycm vim .ycm_extra_conf.py 여기서 compilation_database_folder = \u0026lsquo;\u0026lsquo;를 찾아 \u0026lsquo;\u0026lsquo;부분에 \u0026lsquo;/.vim/\u0026rsquo; 로 고친다.\nYCM Option .vimrc에 추가 \u0026quot;\u0026quot; turn on completion in comments let g:ycm_complete_in_comments=1 \u0026quot;\u0026quot; load ycm conf by default let g:ycm_confirm_extra_conf=0 \u0026quot;\u0026quot; turn on tag completion let g:ycm_collect_identifiers_from_tags_files=1 \u0026quot;\u0026quot; only show completion as a list instead of a sub-window set completeopt-=preview \u0026quot;\u0026quot; start completion from the first character let g:ycm_min_num_of_chars_for_completion=1 \u0026quot;\u0026quot; don\u0026rsquo;t cache completion items let g:ycm_cache_omnifunc=0 \u0026quot;\u0026quot; complete syntax keywords let g:ycm_seed_identifiers_with_syntax=1\nAirline 자세한건 여기를 참고해 주세요. 각종 정보들을 vim에 표시되게 합니다. 버퍼를 사용해 창을 나눌수도 있고 다른 플러그인에 같이 적용도 됩니다.(솔직히 그냥 간지)\n$vi ~/.vimrc Plugin \u0026#39;vim-airline/vim-airline\u0026#39; Plugin \u0026#39;vim-airline/vim-airline-themes\u0026#39; :PluginInstall 테마 적용 여기에서 원하는 테마를 찾고 밑에 처럼 적용해주면 됩니다. :AirlineTheme ctag 커널 프로그래밍 을 위해서 필수 절차이다.여기에 ctags에 대한 명령어등 튜토리얼이 있다.\n$sudo apt-get install exuberant-ctags $vi ~/.vimrc Plugin \u0026#39;xolox/vim-easytags\u0026#39; Plugin \u0026#39;xolox/vim-misc\u0026#39; //vim-misc는 easytags설치후 에러를 토하면서 misc 설치하라 하면 추가해주면됨 기본 사용법 Ctrl + ] - 함수, 구조체가 정의되어있는 곳으로 이동. Ctrl + t - 이동하기 전 소스코드 위치로 옴.\nMouse setting 시스템 설정 -\u0026gt; 마우스 설정 에 마우스 속도 조절이 없다.... 1. rc.local에 스크립트 파일 등록 [적용안됨] 2. init.d에 스크립트 파일 등록 [적용안됨] Runlevel=5\t#1~2번 까지 systemctl 로 상태를 확인해본 결과 똑같은 오류 메세지 나옴 unable to open display \u0026#34;\u0026#34; 이런식임 방법을 찾다가 display가 뜻하는것은 서버등 내 서버에 접속된 사용자들의 display 같음 하지만 난 솔플을 하는중이니 $echo $DIPLAY :0 일케 나옴 그러니당연히 매번 unable~ 이런식으로 오류를 던져줌 [해결] export XAUTHORITY=/home/codex/.Xauthority sh \u0026amp; xset -display :0 m 1/2 1/2 현재 내 display에 대한 정보와 권한을 가져오는것이 방법이였다. 근데 중요한건 결국 안됨....rc.local의 실행과정을 보니 parent에서 fork하는것이였고 현재 쉘에는 적용 안됨... 3.autostart에 스크립트 등록 [적용안됨] 4.autostart에 mate-mouse-property [적용됨] 근데 부팅되자마자 앱 화면이 로드됨 5. 런치패드 업데이트 [안됨] 6. 우분투 업데이트 [안됨] 7. Gnome으로 변경후 업데이트 [됨] ","date":"June 1, 2018","hero":"/images/default-hero.jpg","permalink":"https://codex-devlab.github.io/posts/os/sub-linux/debian-bases/ubuntu-setting/","summary":"\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#root\"\u003eroot\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#fire-fox-update\"\u003eFire Fox Update\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#git-installation-and-setting\"\u003eGIT Installation and Setting\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#git-multi-user-ssh-setting\"\u003eGit multi user ssh setting\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#autojump-installation\"\u003eAutojump Installation\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#vim-installation-and-setting\"\u003evim Installation and Setting\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#vim-scheme\"\u003evim scheme\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#vim-plugin-install\"\u003evim Plugin Install\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#youcompleteme\"\u003eyoucompleteme\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#airline\"\u003eAirline\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#ctag\"\u003ectag\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#mouse-setting\"\u003eMouse setting\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"root\"\u003eroot\u003c/h2\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e$sudo passwd root\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"fire-fox-update\"\u003eFire Fox Update\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e$sudo apt-get firefox\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e$sudo apt-get update\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"git-installation-and-setting\"\u003eGIT Installation and Setting\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e설치\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e$sudo apt install git\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e초기 설정\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e$git config --global user.name \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;kimleepark\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e$git config --global user.email kimleepark@gmail\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e//$git config -l\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e$ssh-keygen \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e//.ssh 폴더안에 id_rsa.pub 의 내용을 Github ssh에 등록해준다.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e$git init\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e$git log\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e//git 작업 기록\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e$git status\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e//git 현재 현황\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003eadd 되거나, 추적 가능한 파일 현황\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e$git add\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e//-u 업데이트된 항목을 추적해서 add함,  --all,-A 폴더내 모든 항목을 add함\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e$git commit\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e$git push\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e//local -\u0026gt; remote 저장소로 이동\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e$git pull\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e//원격 저장소에 있는 변경 사항을 가져와서 merge함\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cblockquote\u003e\n\u003cp\u003e\u003ca href=\"https://git-scm.com/book/ko/v1/%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0-Git-%EC%B5%9C%EC%B4%88-%EC%84%A4%EC%A0%95\" target=\"_blank\" rel=\"noopener\"\u003eGit 시작하기\u003c/a\u003e 를 참고 하시면서 작업 하시면 좋습니다.\u003c/p\u003e","tags":["OS","Ubuntu","초기설정","Git","Vim","Airline","Autojump"],"title":"Ubuntu \u0026 OSX setting"},{"categories":null,"contents":" 백준 단계별 문제집 레벨17\n모든 내용은 Git Hub에도있습니다.\nProblem.10871 10871번[윷놀이] 자세한 설명 여기 참고\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;string.h\u0026gt; int main(){ int input[10000]; int N=0,X=0,insert_num=0; scanf(\u0026#34;%d %d\\n\u0026#34;,\u0026amp;N,\u0026amp;X); for(int i=0;i\u0026lt;N;i++){ scanf(\u0026#34; %d\u0026#34;,\u0026amp;insert_num); //scanf의 심오한 의미 공부!!! input[i]=insert_num; } for (int i = 0; i \u0026lt; N; ++i) { if(input[i]\u0026lt;X) printf(\u0026#34;%d \u0026#34;,input[i] ); } } Problem.2490 2490번[윷놀이]\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;string.h\u0026gt; int main(){ int bae,deung; int one,two,three,four; char buf[10]; int status_zero=0,status_one=0; for(int i = 0; i \u0026lt; 3; ++i){ fgets(buf,sizeof(buf),stdin); for (int j = 0; j \u0026lt; strlen(buf); ++j) { if(buf[j]==\u0026#39;0\u0026#39;) status_zero++; else if(buf[j]==\u0026#39;1\u0026#39;) status_one++; else continue; } if(status_zero\u0026gt;0){ switch(status_zero){ case 1: printf(\u0026#34;A\\n\u0026#34;); break; case 2: printf(\u0026#34;B\\n\u0026#34;); break; case 3: printf(\u0026#34;C\\n\u0026#34;); break; case 4: printf(\u0026#34;D\\n\u0026#34;); break; } } else printf(\u0026#34;E\\n\u0026#34;); status_one=0; status_zero=0; } } 모든 내용은 Git Hub에도있습니다.\n","date":"May 18, 2018","hero":"/images/default-hero.jpg","permalink":"https://codex-devlab.github.io/posts/study/sub-algorithms/online-judge/backjoon/prob-10871/","summary":"\u003cblockquote\u003e\n\u003cp\u003e백준 단계별 문제집 레벨17\u003cbr\u003e\n\u003ca href=\"https://github.com/ehdwn1991/Coding-Interview/tree/master/Code_Interview_Prep_Platform/backjoon/Level_17\" target=\"_blank\" rel=\"noopener\"\u003e모든 내용은 Git Hub에도있습니다.\u003c/a\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2 id=\"problem10871httpswwwacmicpcnetproblem2490\"\u003e\u003ca href=\"https://www.acmicpc.net/problem/2490\" target=\"_blank\" rel=\"noopener\"\u003eProblem.10871\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003e10871번[윷놀이]\u003c/code\u003e\n자세한 설명 \u003ca href=\"2018-05-18-backjoon-Level4.md\"\u003e여기\u003c/a\u003e 참고\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;stdio.h\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;stdlib.h\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;string.h\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e(){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e input[\u003cspan style=\"color:#ae81ff\"\u003e10000\u003c/span\u003e];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e N\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e,X\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e,insert_num\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003escanf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;%d %d\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e,\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003eN,\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003eX);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;i\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003eN;i\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003escanf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34; %d\u0026#34;\u003c/span\u003e,\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003einsert_num);  \u003cspan style=\"color:#75715e\"\u003e//scanf의 심오한 의미 공부!!!\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\t\tinput[i]\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003einsert_num;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e; i \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e N; \u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003ei)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e(input[i]\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003eX)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003eprintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;%d \u0026#34;\u003c/span\u003e,input[i] );\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"problem2490httpswwwacmicpcnetproblem2490\"\u003e\u003ca href=\"https://www.acmicpc.net/problem/2490\" target=\"_blank\" rel=\"noopener\"\u003eProblem.2490\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003e2490번[윷놀이]\u003c/code\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;stdio.h\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;stdlib.h\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;string.h\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e(){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e bae,deung;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e one,two,three,four;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003echar\u003c/span\u003e buf[\u003cspan style=\"color:#ae81ff\"\u003e10\u003c/span\u003e];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e status_zero\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e,status_one\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e; i \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e; \u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003ei){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003efgets\u003c/span\u003e(buf,\u003cspan style=\"color:#66d9ef\"\u003esizeof\u003c/span\u003e(buf),stdin);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e j \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e; j \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003estrlen\u003c/span\u003e(buf); \u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003ej)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e(buf[j]\u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;0\u0026#39;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\tstatus_zero\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e(buf[j]\u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;1\u0026#39;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\tstatus_one\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t\u003cspan style=\"color:#66d9ef\"\u003econtinue\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e(status_zero\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#66d9ef\"\u003eswitch\u003c/span\u003e(status_zero){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t\u003cspan style=\"color:#66d9ef\"\u003ecase\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t\u003cspan style=\"color:#a6e22e\"\u003eprintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;A\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t\u003cspan style=\"color:#66d9ef\"\u003ebreak\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t\u003cspan style=\"color:#66d9ef\"\u003ecase\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t\u003cspan style=\"color:#a6e22e\"\u003eprintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;B\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t\u003cspan style=\"color:#66d9ef\"\u003ebreak\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t\u003cspan style=\"color:#66d9ef\"\u003ecase\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t\u003cspan style=\"color:#a6e22e\"\u003eprintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;C\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t\u003cspan style=\"color:#66d9ef\"\u003ebreak\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t\u003cspan style=\"color:#66d9ef\"\u003ecase\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e4\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t\u003cspan style=\"color:#a6e22e\"\u003eprintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;D\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t\u003cspan style=\"color:#66d9ef\"\u003ebreak\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#a6e22e\"\u003eprintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;E\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tstatus_one\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tstatus_zero\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003ca href=\"https://github.com/ehdwn1991/Coding-Interview/tree/master/Code_Interview_Prep_Platform/backjoon/Level_17\" target=\"_blank\" rel=\"noopener\"\u003e모든 내용은 Git Hub에도있습니다.\u003c/a\u003e\u003c/p\u003e","tags":["C",null,"Prime-Number"],"title":"Problem.10871"},{"categories":null,"contents":"Math Problem Problem.1978 - Tag[수학] 소수찾기\n소수찾기 소수는 sqrt(N)까지만 검색하면 된다. 2~sqrt(N)까지 나누어 떨어지는 수가 없다면 소수가 보장되기 때문임. #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;math.h\u0026gt; int is_prime(); int main(){ int N,input,count=0,prime=1; scanf(\u0026#34;%d\u0026#34;,\u0026amp;N); for (int i = 1; i \u0026lt;= N; ++i) { // input=i; scanf(\u0026#34;%d\u0026#34;,\u0026amp;input); if(is_prime(input)==1) count++; } printf(\u0026#34;%d\\n\u0026#34;,count); } int is_prime(int num){ if(num==1) return 0; for (int j = 2; j \u0026lt;= sqrt(num); ++j) { if(num%j==0){ return 0; } } return 1; } 에라토네스의 체 알고리즘 /* 에라토스테네스의 체 알고리즘을 기준으로 찾는다. 2부터 소수를 구하고자 하는 구간의 모든 수를 나열한다. 그림에서 회색 사각형으로 두른 수들이 여기에 해당한다. 2는 소수이므로 오른쪽에 2를 쓴다. (빨간색) 자기 자신을 제외한 2의 배수를 모두 지운다. 남아있는 수 가운데 3은 소수이므로 오른쪽에 3을 쓴다. (초록색) 자기 자신을 제외한 3의 배수를 모두 지운다. 남아있는 수 가운데 5는 소수이므로 오른쪽에 5를 쓴다. (파란색) 자기 자신을 제외한 5의 배수를 모두 지운다. 남아있는 수 가운데 7은 소수이므로 오른쪽에 7을 쓴다. (노란색) 자기 자신을 제외한 7의 배수를 모두 지운다. 위의 과정을 반복하면 구하는 구간의 모든 소수가 남는다. */ #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;string.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; int main(){ int N,count=1; scanf(\u0026#34;%d\u0026#34;,\u0026amp;N); char *arr=(char*)malloc(sizeof(char)*N); memset(arr,1,sizeof(char)*N); puts(arr); for (int i = 2; (i*i)\u0026lt;= N; ++i) //루트 N까지만 체크 { if(arr[i]==1){ for (int j = i*i; j \u0026lt; N; j+=i) { arr[j]=0;//1 is prime 0 is not prime } } } for (int i = 2; i \u0026lt; N; ++i) { if(arr[i]==1){ printf(\u0026#34;%d \u0026#34;,i); if(count%10==0) puts(\u0026#34;\u0026#34;); count++; } } free(arr); } Pascal Triangle 파스칼 삼각형\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; int main(){ int N; scanf(\u0026#34;%d\u0026#34;,\u0026amp;N); int **row; row=(int**)malloc(sizeof(int*)*N); for (int i = 0; i \u0026lt; N; ++i) { row[i]=(int*)malloc(sizeof(int)*((N*2)-1)); } for (int i = 0; i \u0026lt; N; ++i) { for (int j = 0; j \u0026lt; i+1; ++j) { if(j==0||j==i){ *(*(row+i)+(N-1+(j*2)-i))=1; } else{ *(*(row+i)+(N-1-i+(j*2)))=(*(*(row+i-1)+(N-1-i-1+(j*2))))+(*(*(row+(i-1))+(N-1-i+(j*2)+1))); } } } for (int i = 0; i \u0026lt; N; ++i) { for (int q = 0; q \u0026lt; (N*2)-1; ++q) { if(*(*(row+i)+q)%2==1) // if(*(*(row+i)+q)!=0) printf(\u0026#34;%d\u0026#34;,*(*(row+i)+q)); else{ printf(\u0026#34; \u0026#34;); } } free(*(row+i)); puts(\u0026#34;\u0026#34;); } } 모든 내용은 Git Hub에도있습니다.\n","date":"May 18, 2018","hero":"/images/default-hero.jpg","permalink":"https://codex-devlab.github.io/posts/study/sub-algorithms/online-judge/backjoon/prob-1978/","summary":"\u003ch2 id=\"math-problem\"\u003eMath Problem\u003c/h2\u003e\n\u003ch3 id=\"problem1978httpswwwacmicpcnetproblem1978---tag수학httpswwwacmicpcnetproblemsetsortac_descalgo124\"\u003e\u003ca href=\"https://www.acmicpc.net/problem/1978\" target=\"_blank\" rel=\"noopener\"\u003eProblem.1978\u003c/a\u003e - \u003ca href=\"https://www.acmicpc.net/problemset?sort=ac_desc\u0026amp;algo=124\" target=\"_blank\" rel=\"noopener\"\u003eTag[수학]\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003e\u003ccode\u003e소수찾기\u003c/code\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e소수찾기\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e소수는 sqrt\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003eN\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e까지만 검색하면 된다. 2~sqrt\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003eN\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e까지 나누어 떨어지는 수가 없다면 소수가 보장되기 때문임.\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;stdio.h\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;math.h\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eis_prime\u003c/span\u003e();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e(){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e N,input,count\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e,prime\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e; \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003escanf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;%d\u0026#34;\u003c/span\u003e,\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003eN);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e; i \u003cspan style=\"color:#f92672\"\u003e\u0026lt;=\u003c/span\u003e N; \u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003ei)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#75715e\"\u003e// input=i;\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003escanf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;%d\u0026#34;\u003c/span\u003e,\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003einput);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eis_prime\u003c/span\u003e(input)\u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\tcount\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eprintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;%d\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e,count);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eis_prime\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e num){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e(num\u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e j \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e; j \u003cspan style=\"color:#f92672\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esqrt\u003c/span\u003e(num); \u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003ej)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e(num\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003ej\u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"에라토네스의-체-알고리즘\"\u003e에라토네스의 체 알고리즘\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e/*\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e에라토스테네스의 체 알고리즘을 기준으로 찾는다.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e2부터 소수를 구하고자 하는 구간의 모든 수를 나열한다. 그림에서 회색 사각형으로 두른 수들이 여기에 해당한다.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e2는 소수이므로 오른쪽에 2를 쓴다. (빨간색)\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e자기 자신을 제외한 2의 배수를 모두 지운다.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e남아있는 수 가운데 3은 소수이므로 오른쪽에 3을 쓴다. (초록색)\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e자기 자신을 제외한 3의 배수를 모두 지운다.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e남아있는 수 가운데 5는 소수이므로 오른쪽에 5를 쓴다. (파란색)\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e자기 자신을 제외한 5의 배수를 모두 지운다.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e남아있는 수 가운데 7은 소수이므로 오른쪽에 7을 쓴다. (노란색)\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e자기 자신을 제외한 7의 배수를 모두 지운다.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e위의 과정을 반복하면 구하는 구간의 모든 소수가 남는다.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e*/\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;stdio.h\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;string.h\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;stdlib.h\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e(){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e N,count\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003escanf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;%d\u0026#34;\u003c/span\u003e,\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003eN);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003echar\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003earr\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003echar\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e)\u003cspan style=\"color:#a6e22e\"\u003emalloc\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003esizeof\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003echar\u003c/span\u003e)\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003eN);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003ememset\u003c/span\u003e(arr,\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e,\u003cspan style=\"color:#66d9ef\"\u003esizeof\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003echar\u003c/span\u003e)\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003eN);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eputs\u003c/span\u003e(arr);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e;  (i\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003ei)\u003cspan style=\"color:#f92672\"\u003e\u0026lt;=\u003c/span\u003e N; \u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003ei) \u003cspan style=\"color:#75715e\"\u003e//루트 N까지만 체크\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\t{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e(arr[i]\u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e j \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e i\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003ei; j \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e N; j\u003cspan style=\"color:#f92672\"\u003e+=\u003c/span\u003ei)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\tarr[j]\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\u003cspan style=\"color:#75715e\"\u003e//1 is prime 0 is not prime\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\t\t\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e; i \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e N; \u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003ei)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e(arr[i]\u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#a6e22e\"\u003eprintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;%d \u0026#34;\u003c/span\u003e,i);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e(count\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e10\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#a6e22e\"\u003eputs\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\tcount\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003efree\u003c/span\u003e(arr);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"pascal-triangle\"\u003ePascal Triangle\u003c/h3\u003e\n\u003cp\u003e\u003ccode\u003e파스칼 삼각형\u003c/code\u003e\u003c/p\u003e","tags":["C","Math","Prime-Number"],"title":"Problem.1978"}]