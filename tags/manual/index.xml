<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Manual on CodeXlog</title><link>https://codex-devlab.github.io/tags/manual/</link><description>Recent content in Manual on CodeXlog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Wed, 08 Jan 2025 08:06:25 +0600</lastBuildDate><atom:link href="https://codex-devlab.github.io/tags/manual/index.xml" rel="self" type="application/rss+xml"/><item><title>Hugo</title><link>https://codex-devlab.github.io/posts/blog-migration/sub-hugo/</link><pubDate>Wed, 01 Jan 2025 08:06:25 +0600</pubDate><guid>https://codex-devlab.github.io/posts/blog-migration/sub-hugo/</guid><description>&lt;h3 id="development">Development&lt;/h3>
&lt;details>
&lt;summary>Running the forked theme against your own site&lt;/summary>
&lt;h4 id="running-the-forked-theme-against-your-own-site">Running the forked theme against your own site&lt;/h4>
&lt;p>&lt;a href="https://toha-guides.netlify.app/posts/contributing/#running-the-forked-theme-against-your-own-site" target="_blank" rel="noopener">참고&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>원활한 커스텀을 위해, 테마를 Fork하여 별도의 저장소로 관리.&lt;/p>&lt;/blockquote>
&lt;p>과정은 간단합니다.
Go 개발시에 로컬 모듈을 go.mod에 추가하여 개발하는 방식과 동일 합니다.&lt;br>
단, toha의 테마에 있는 설정들과 스크립트들이 &lt;code>github.com/hugo-toha/toha/v4&lt;/code>를&lt;br>
바라보고 있기 때문에 사설 레포의 경로로 변경해줘야 합니다.&lt;/p>
&lt;ol>
&lt;li>
&lt;p>toha의 테마 원격 저장소를 Fork 하여 본인의 Github로 가져 옵니다.&lt;br>
&lt;img src="https://codex-devlab.github.io/posts/blog-migration/sub-hugo/images/toha-fork.png" alt="alt text">&lt;/p>
&lt;/li>
&lt;li>&lt;/li>
&lt;/ol>
&lt;p>혹시나 하는 에러 사태를 방지하기 위해 pre-commit을 통해 go 모듈의 경로를 로컬에서 리모트로 바꿔는 명령을 실행하게 하는게 좋습니다.&lt;/p></description></item><item><title>Jekyll</title><link>https://codex-devlab.github.io/posts/blog-migration/sub-jekyll/</link><pubDate>Mon, 11 Jun 2018 08:12:43 +0500</pubDate><guid>https://codex-devlab.github.io/posts/blog-migration/sub-jekyll/</guid><description>&lt;h2 id="working-in-hydejack">Working in Hydejack&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>_config.yml, Gemfile 의 초기 설정&lt;/p>
&lt;p>jekyll을 시작하기 전에 필요한플러그 인이나 기본 설정을 완료해야한다.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>_config.yml&lt;/p>
&lt;p>블로그의 URL, Name, DIsqus, Collection, Markdown Converter&amp;hellip;등&lt;/p>
&lt;p>jekyll이 동작하고 블로그에 필요한 초기 정보를 담고 있다.&lt;/p>
&lt;p>주로 플러그인과 블로그의 설정.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Gemfile&lt;/p>
&lt;p>주로 해당 블로그에 적용되는 플러그인이 gem으로 동작할수있게 명시해줌&lt;/p>
&lt;p>테마에 대한 remote나 jekyll의 버전 에 대한 정보를 담고있음&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>루트 폴더에서 index.md를 찾아서 가장 먼저 보여준다&lt;/p>
&lt;p>index.md에 있는 Fornt matter의 layout에 해당 하는 html문서를 템플릿처럼&lt;/p></description></item><item><title>Git Manual</title><link>https://codex-devlab.github.io/posts/dev/git/</link><pubDate>Fri, 18 May 2018 08:12:43 +0500</pubDate><guid>https://codex-devlab.github.io/posts/dev/git/</guid><description>&lt;h3 id="pre-commit">Pre-commit&lt;/h3>
&lt;blockquote>
&lt;p>Pre Commit의 동작은 Commit이 이루어지는 시점에 Commit이 완료 되기전에 해당 스크립트가 실행되는 방식입니다.&lt;br>
&lt;code>$ git init&lt;/code> 혹은 저장소를 Clone받게 되면 경로에 &lt;code>.git/hooks&lt;/code>&lt;br>
내부에 다양한 Hook이 있는걸 확인 할 수 있습니다.&lt;/p>&lt;/blockquote>
&lt;p>Pre Commit을 사용하는 두 가지 방법이 있습니다.
상세하게 따져본다면 git hook을 사용하는것은 동일하나,&lt;br>
이를 관리하는 방법이 조금 상이합니다.&lt;/p>
&lt;p>Pre Commit을 사용하는 이유는 몇가지가 있지만,&lt;br>
가장 큰 목적은 동료와의 협업, Commit 관리, 오류 방지 등이 있다고 생각합니다.&lt;/p>
&lt;p>예를 들어 Lint, Syntex Error 등이 해당 될 듯 합니다.&lt;/p></description></item></channel></rss>